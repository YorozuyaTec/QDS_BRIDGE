
QDS_BRIDGE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d90  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004e9c  08004e9c  00014e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ec4  08004ec4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  08004ec4  08004ec4  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ec4  08004ec4  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ec4  08004ec4  00014ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ec8  08004ec8  00014ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08004ecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000610  200001ec  080050b8  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007fc  080050b8  000207fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001947d  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000346f  00000000  00000000  00039692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  0003cb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd0  00000000  00000000  0003da40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a170  00000000  00000000  0003e810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c5d  00000000  00000000  00058980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c401  00000000  00000000  0006c5dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f89de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cb0  00000000  00000000  000f8a34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001ec 	.word	0x200001ec
 8000128:	00000000 	.word	0x00000000
 800012c:	08004e84 	.word	0x08004e84

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f0 	.word	0x200001f0
 8000148:	08004e84 	.word	0x08004e84

0800014c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000150:	4b17      	ldr	r3, [pc, #92]	; (80001b0 <MX_CAN_Init+0x64>)
 8000152:	4a18      	ldr	r2, [pc, #96]	; (80001b4 <MX_CAN_Init+0x68>)
 8000154:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8000156:	4b16      	ldr	r3, [pc, #88]	; (80001b0 <MX_CAN_Init+0x64>)
 8000158:	2208      	movs	r2, #8
 800015a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800015c:	4b14      	ldr	r3, [pc, #80]	; (80001b0 <MX_CAN_Init+0x64>)
 800015e:	2200      	movs	r2, #0
 8000160:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000162:	4b13      	ldr	r3, [pc, #76]	; (80001b0 <MX_CAN_Init+0x64>)
 8000164:	2200      	movs	r2, #0
 8000166:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000168:	4b11      	ldr	r3, [pc, #68]	; (80001b0 <MX_CAN_Init+0x64>)
 800016a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800016e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000170:	4b0f      	ldr	r3, [pc, #60]	; (80001b0 <MX_CAN_Init+0x64>)
 8000172:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8000176:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000178:	4b0d      	ldr	r3, [pc, #52]	; (80001b0 <MX_CAN_Init+0x64>)
 800017a:	2200      	movs	r2, #0
 800017c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800017e:	4b0c      	ldr	r3, [pc, #48]	; (80001b0 <MX_CAN_Init+0x64>)
 8000180:	2200      	movs	r2, #0
 8000182:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8000184:	4b0a      	ldr	r3, [pc, #40]	; (80001b0 <MX_CAN_Init+0x64>)
 8000186:	2201      	movs	r2, #1
 8000188:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800018a:	4b09      	ldr	r3, [pc, #36]	; (80001b0 <MX_CAN_Init+0x64>)
 800018c:	2200      	movs	r2, #0
 800018e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000190:	4b07      	ldr	r3, [pc, #28]	; (80001b0 <MX_CAN_Init+0x64>)
 8000192:	2200      	movs	r2, #0
 8000194:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000196:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <MX_CAN_Init+0x64>)
 8000198:	2200      	movs	r2, #0
 800019a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <MX_CAN_Init+0x64>)
 800019e:	f001 fbc7 	bl	8001930 <HAL_CAN_Init>
 80001a2:	4603      	mov	r3, r0
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d001      	beq.n	80001ac <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80001a8:	f000 f95b 	bl	8000462 <Error_Handler>
  /* USER CODE BEGIN CAN_Init 2 */


  /* USER CODE END CAN_Init 2 */

}
 80001ac:	bf00      	nop
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	20000218 	.word	0x20000218
 80001b4:	40006400 	.word	0x40006400

080001b8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b088      	sub	sp, #32
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001c0:	f107 0310 	add.w	r3, r7, #16
 80001c4:	2200      	movs	r2, #0
 80001c6:	601a      	str	r2, [r3, #0]
 80001c8:	605a      	str	r2, [r3, #4]
 80001ca:	609a      	str	r2, [r3, #8]
 80001cc:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a20      	ldr	r2, [pc, #128]	; (8000254 <HAL_CAN_MspInit+0x9c>)
 80001d4:	4293      	cmp	r3, r2
 80001d6:	d139      	bne.n	800024c <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80001d8:	4b1f      	ldr	r3, [pc, #124]	; (8000258 <HAL_CAN_MspInit+0xa0>)
 80001da:	69db      	ldr	r3, [r3, #28]
 80001dc:	4a1e      	ldr	r2, [pc, #120]	; (8000258 <HAL_CAN_MspInit+0xa0>)
 80001de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80001e2:	61d3      	str	r3, [r2, #28]
 80001e4:	4b1c      	ldr	r3, [pc, #112]	; (8000258 <HAL_CAN_MspInit+0xa0>)
 80001e6:	69db      	ldr	r3, [r3, #28]
 80001e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80001ec:	60fb      	str	r3, [r7, #12]
 80001ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001f0:	4b19      	ldr	r3, [pc, #100]	; (8000258 <HAL_CAN_MspInit+0xa0>)
 80001f2:	699b      	ldr	r3, [r3, #24]
 80001f4:	4a18      	ldr	r2, [pc, #96]	; (8000258 <HAL_CAN_MspInit+0xa0>)
 80001f6:	f043 0304 	orr.w	r3, r3, #4
 80001fa:	6193      	str	r3, [r2, #24]
 80001fc:	4b16      	ldr	r3, [pc, #88]	; (8000258 <HAL_CAN_MspInit+0xa0>)
 80001fe:	699b      	ldr	r3, [r3, #24]
 8000200:	f003 0304 	and.w	r3, r3, #4
 8000204:	60bb      	str	r3, [r7, #8]
 8000206:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000208:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800020c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800020e:	2300      	movs	r3, #0
 8000210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000212:	2300      	movs	r3, #0
 8000214:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000216:	f107 0310 	add.w	r3, r7, #16
 800021a:	4619      	mov	r1, r3
 800021c:	480f      	ldr	r0, [pc, #60]	; (800025c <HAL_CAN_MspInit+0xa4>)
 800021e:	f002 fd6f 	bl	8002d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000222:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000226:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000228:	2302      	movs	r3, #2
 800022a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800022c:	2303      	movs	r3, #3
 800022e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000230:	f107 0310 	add.w	r3, r7, #16
 8000234:	4619      	mov	r1, r3
 8000236:	4809      	ldr	r0, [pc, #36]	; (800025c <HAL_CAN_MspInit+0xa4>)
 8000238:	f002 fd62 	bl	8002d00 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800023c:	2200      	movs	r2, #0
 800023e:	2100      	movs	r1, #0
 8000240:	2014      	movs	r0, #20
 8000242:	f002 fa88 	bl	8002756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000246:	2014      	movs	r0, #20
 8000248:	f002 faa1 	bl	800278e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800024c:	bf00      	nop
 800024e:	3720      	adds	r7, #32
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	40006400 	.word	0x40006400
 8000258:	40021000 	.word	0x40021000
 800025c:	40010800 	.word	0x40010800

08000260 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000266:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <MX_DMA_Init+0x38>)
 8000268:	695b      	ldr	r3, [r3, #20]
 800026a:	4a0b      	ldr	r2, [pc, #44]	; (8000298 <MX_DMA_Init+0x38>)
 800026c:	f043 0301 	orr.w	r3, r3, #1
 8000270:	6153      	str	r3, [r2, #20]
 8000272:	4b09      	ldr	r3, [pc, #36]	; (8000298 <MX_DMA_Init+0x38>)
 8000274:	695b      	ldr	r3, [r3, #20]
 8000276:	f003 0301 	and.w	r3, r3, #1
 800027a:	607b      	str	r3, [r7, #4]
 800027c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800027e:	2200      	movs	r2, #0
 8000280:	2100      	movs	r1, #0
 8000282:	2010      	movs	r0, #16
 8000284:	f002 fa67 	bl	8002756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000288:	2010      	movs	r0, #16
 800028a:	f002 fa80 	bl	800278e <HAL_NVIC_EnableIRQ>

}
 800028e:	bf00      	nop
 8000290:	3708      	adds	r7, #8
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40021000 	.word	0x40021000

0800029c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b088      	sub	sp, #32
 80002a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a2:	f107 0310 	add.w	r3, r7, #16
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002b0:	4b1e      	ldr	r3, [pc, #120]	; (800032c <MX_GPIO_Init+0x90>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a1d      	ldr	r2, [pc, #116]	; (800032c <MX_GPIO_Init+0x90>)
 80002b6:	f043 0320 	orr.w	r3, r3, #32
 80002ba:	6193      	str	r3, [r2, #24]
 80002bc:	4b1b      	ldr	r3, [pc, #108]	; (800032c <MX_GPIO_Init+0x90>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	f003 0320 	and.w	r3, r3, #32
 80002c4:	60fb      	str	r3, [r7, #12]
 80002c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c8:	4b18      	ldr	r3, [pc, #96]	; (800032c <MX_GPIO_Init+0x90>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	4a17      	ldr	r2, [pc, #92]	; (800032c <MX_GPIO_Init+0x90>)
 80002ce:	f043 0304 	orr.w	r3, r3, #4
 80002d2:	6193      	str	r3, [r2, #24]
 80002d4:	4b15      	ldr	r3, [pc, #84]	; (800032c <MX_GPIO_Init+0x90>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	f003 0304 	and.w	r3, r3, #4
 80002dc:	60bb      	str	r3, [r7, #8]
 80002de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e0:	4b12      	ldr	r3, [pc, #72]	; (800032c <MX_GPIO_Init+0x90>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a11      	ldr	r2, [pc, #68]	; (800032c <MX_GPIO_Init+0x90>)
 80002e6:	f043 0308 	orr.w	r3, r3, #8
 80002ea:	6193      	str	r3, [r2, #24]
 80002ec:	4b0f      	ldr	r3, [pc, #60]	; (800032c <MX_GPIO_Init+0x90>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	f003 0308 	and.w	r3, r3, #8
 80002f4:	607b      	str	r3, [r7, #4]
 80002f6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002fe:	480c      	ldr	r0, [pc, #48]	; (8000330 <MX_GPIO_Init+0x94>)
 8000300:	f002 fe78 	bl	8002ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000304:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000308:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800030a:	2301      	movs	r3, #1
 800030c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030e:	2300      	movs	r3, #0
 8000310:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000312:	2302      	movs	r3, #2
 8000314:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000316:	f107 0310 	add.w	r3, r7, #16
 800031a:	4619      	mov	r1, r3
 800031c:	4804      	ldr	r0, [pc, #16]	; (8000330 <MX_GPIO_Init+0x94>)
 800031e:	f002 fcef 	bl	8002d00 <HAL_GPIO_Init>

}
 8000322:	bf00      	nop
 8000324:	3720      	adds	r7, #32
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40021000 	.word	0x40021000
 8000330:	40010c00 	.word	0x40010c00

08000334 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000338:	4b09      	ldr	r3, [pc, #36]	; (8000360 <MX_IWDG_Init+0x2c>)
 800033a:	4a0a      	ldr	r2, [pc, #40]	; (8000364 <MX_IWDG_Init+0x30>)
 800033c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 800033e:	4b08      	ldr	r3, [pc, #32]	; (8000360 <MX_IWDG_Init+0x2c>)
 8000340:	2204      	movs	r2, #4
 8000342:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000344:	4b06      	ldr	r3, [pc, #24]	; (8000360 <MX_IWDG_Init+0x2c>)
 8000346:	f640 72ff 	movw	r2, #4095	; 0xfff
 800034a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800034c:	4804      	ldr	r0, [pc, #16]	; (8000360 <MX_IWDG_Init+0x2c>)
 800034e:	f002 fe82 	bl	8003056 <HAL_IWDG_Init>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000358:	f000 f883 	bl	8000462 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800035c:	bf00      	nop
 800035e:	bd80      	pop	{r7, pc}
 8000360:	20000240 	.word	0x20000240
 8000364:	40003000 	.word	0x40003000

08000368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800036c:	f001 fa5a 	bl	8001824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000370:	f000 f830 	bl	80003d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000374:	f7ff ff92 	bl	800029c <MX_GPIO_Init>
  MX_CAN_Init();
 8000378:	f7ff fee8 	bl	800014c <MX_CAN_Init>
  MX_IWDG_Init();
 800037c:	f7ff ffda 	bl	8000334 <MX_IWDG_Init>
  MX_TIM2_Init();
 8000380:	f000 f900 	bl	8000584 <MX_TIM2_Init>
  MX_DMA_Init();
 8000384:	f7ff ff6c 	bl	8000260 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000388:	f000 f96e 	bl	8000668 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uart_module_init(&signal_wire_huart_module, &huart2, &hdma_usart2_rx);
 800038c:	4a0b      	ldr	r2, [pc, #44]	; (80003bc <main+0x54>)
 800038e:	490c      	ldr	r1, [pc, #48]	; (80003c0 <main+0x58>)
 8000390:	480c      	ldr	r0, [pc, #48]	; (80003c4 <main+0x5c>)
 8000392:	f000 fb05 	bl	80009a0 <uart_module_init>
  HAL_TIM_Base_Start(&htim2);
 8000396:	480c      	ldr	r0, [pc, #48]	; (80003c8 <main+0x60>)
 8000398:	f003 fb18 	bl	80039cc <HAL_TIM_Base_Start>
  CAN1_Config();   //调用过滤器函
 800039c:	f000 fa30 	bl	8000800 <CAN1_Config>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_IWDG_Refresh(&hiwdg); //iwdg
 80003a0:	480a      	ldr	r0, [pc, #40]	; (80003cc <main+0x64>)
 80003a2:	f002 fe9a 	bl	80030da <HAL_IWDG_Refresh>

	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80003a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003aa:	4809      	ldr	r0, [pc, #36]	; (80003d0 <main+0x68>)
 80003ac:	f002 fe3a 	bl	8003024 <HAL_GPIO_TogglePin>
	  //signal_wire_read_handler();
	  HAL_Delay(250);
 80003b0:	20fa      	movs	r0, #250	; 0xfa
 80003b2:	f001 fa99 	bl	80018e8 <HAL_Delay>
	 // CAN_senddata(&hcan);
	  bat_charge_management();
 80003b6:	f000 fe8d 	bl	80010d4 <bat_charge_management>
	  HAL_IWDG_Refresh(&hiwdg); //iwdg
 80003ba:	e7f1      	b.n	80003a0 <main+0x38>
 80003bc:	20000294 	.word	0x20000294
 80003c0:	200002d8 	.word	0x200002d8
 80003c4:	20000004 	.word	0x20000004
 80003c8:	2000024c 	.word	0x2000024c
 80003cc:	20000240 	.word	0x20000240
 80003d0:	40010c00 	.word	0x40010c00

080003d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b090      	sub	sp, #64	; 0x40
 80003d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003da:	f107 0318 	add.w	r3, r7, #24
 80003de:	2228      	movs	r2, #40	; 0x28
 80003e0:	2100      	movs	r1, #0
 80003e2:	4618      	mov	r0, r3
 80003e4:	f004 fd46 	bl	8004e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]
 80003f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80003f6:	2309      	movs	r3, #9
 80003f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000400:	2300      	movs	r3, #0
 8000402:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000404:	2301      	movs	r3, #1
 8000406:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000408:	2301      	movs	r3, #1
 800040a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800040c:	2302      	movs	r3, #2
 800040e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000410:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000414:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000416:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800041a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800041c:	f107 0318 	add.w	r3, r7, #24
 8000420:	4618      	mov	r0, r3
 8000422:	f002 fe69 	bl	80030f8 <HAL_RCC_OscConfig>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800042c:	f000 f819 	bl	8000462 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000430:	230f      	movs	r3, #15
 8000432:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000434:	2302      	movs	r3, #2
 8000436:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000438:	2300      	movs	r3, #0
 800043a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800043c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000440:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000442:	2300      	movs	r3, #0
 8000444:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	2101      	movs	r1, #1
 800044a:	4618      	mov	r0, r3
 800044c:	f003 f8d4 	bl	80035f8 <HAL_RCC_ClockConfig>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000456:	f000 f804 	bl	8000462 <Error_Handler>
  }
}
 800045a:	bf00      	nop
 800045c:	3740      	adds	r7, #64	; 0x40
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}

08000462 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000462:	b480      	push	{r7}
 8000464:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000466:	b672      	cpsid	i
}
 8000468:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800046a:	e7fe      	b.n	800046a <Error_Handler+0x8>

0800046c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800046c:	b480      	push	{r7}
 800046e:	b085      	sub	sp, #20
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000472:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <HAL_MspInit+0x5c>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	4a14      	ldr	r2, [pc, #80]	; (80004c8 <HAL_MspInit+0x5c>)
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	6193      	str	r3, [r2, #24]
 800047e:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <HAL_MspInit+0x5c>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	60bb      	str	r3, [r7, #8]
 8000488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048a:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <HAL_MspInit+0x5c>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	4a0e      	ldr	r2, [pc, #56]	; (80004c8 <HAL_MspInit+0x5c>)
 8000490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000494:	61d3      	str	r3, [r2, #28]
 8000496:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <HAL_MspInit+0x5c>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004a2:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <HAL_MspInit+0x60>)
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	4a04      	ldr	r2, [pc, #16]	; (80004cc <HAL_MspInit+0x60>)
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004be:	bf00      	nop
 80004c0:	3714      	adds	r7, #20
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr
 80004c8:	40021000 	.word	0x40021000
 80004cc:	40010000 	.word	0x40010000

080004d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <NMI_Handler+0x4>

080004d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004da:	e7fe      	b.n	80004da <HardFault_Handler+0x4>

080004dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <MemManage_Handler+0x4>

080004e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004e6:	e7fe      	b.n	80004e6 <BusFault_Handler+0x4>

080004e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004ec:	e7fe      	b.n	80004ec <UsageFault_Handler+0x4>

080004ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004f2:	bf00      	nop
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bc80      	pop	{r7}
 80004f8:	4770      	bx	lr

080004fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr

08000506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800050a:	bf00      	nop
 800050c:	46bd      	mov	sp, r7
 800050e:	bc80      	pop	{r7}
 8000510:	4770      	bx	lr

08000512 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000516:	f001 f9cb 	bl	80018b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
	...

08000520 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000524:	4802      	ldr	r0, [pc, #8]	; (8000530 <DMA1_Channel6_IRQHandler+0x10>)
 8000526:	f002 fab7 	bl	8002a98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	20000294 	.word	0x20000294

08000534 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000538:	4802      	ldr	r0, [pc, #8]	; (8000544 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800053a:	f001 fe11 	bl	8002160 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	20000218 	.word	0x20000218

08000548 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800054c:	4802      	ldr	r0, [pc, #8]	; (8000558 <TIM2_IRQHandler+0x10>)
 800054e:	f003 fa81 	bl	8003a54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	2000024c 	.word	0x2000024c

0800055c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000560:	4803      	ldr	r0, [pc, #12]	; (8000570 <USART2_IRQHandler+0x14>)
 8000562:	f003 ff29 	bl	80043b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  uart_module_IRQHandler(&signal_wire_huart_module);
 8000566:	4803      	ldr	r0, [pc, #12]	; (8000574 <USART2_IRQHandler+0x18>)
 8000568:	f000 fa3e 	bl	80009e8 <uart_module_IRQHandler>
  /* USER CODE END USART2_IRQn 1 */
}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}
 8000570:	200002d8 	.word	0x200002d8
 8000574:	20000004 	.word	0x20000004

08000578 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr

08000584 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800058a:	f107 0308 	add.w	r3, r7, #8
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000598:	463b      	mov	r3, r7
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005a0:	4b1e      	ldr	r3, [pc, #120]	; (800061c <MX_TIM2_Init+0x98>)
 80005a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47999;
 80005a8:	4b1c      	ldr	r3, [pc, #112]	; (800061c <MX_TIM2_Init+0x98>)
 80005aa:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80005ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b0:	4b1a      	ldr	r3, [pc, #104]	; (800061c <MX_TIM2_Init+0x98>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80005b6:	4b19      	ldr	r3, [pc, #100]	; (800061c <MX_TIM2_Init+0x98>)
 80005b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005be:	4b17      	ldr	r3, [pc, #92]	; (800061c <MX_TIM2_Init+0x98>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c4:	4b15      	ldr	r3, [pc, #84]	; (800061c <MX_TIM2_Init+0x98>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005ca:	4814      	ldr	r0, [pc, #80]	; (800061c <MX_TIM2_Init+0x98>)
 80005cc:	f003 f9ae 	bl	800392c <HAL_TIM_Base_Init>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80005d6:	f7ff ff44 	bl	8000462 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005e0:	f107 0308 	add.w	r3, r7, #8
 80005e4:	4619      	mov	r1, r3
 80005e6:	480d      	ldr	r0, [pc, #52]	; (800061c <MX_TIM2_Init+0x98>)
 80005e8:	f003 fb3c 	bl	8003c64 <HAL_TIM_ConfigClockSource>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80005f2:	f7ff ff36 	bl	8000462 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f6:	2300      	movs	r3, #0
 80005f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005fe:	463b      	mov	r3, r7
 8000600:	4619      	mov	r1, r3
 8000602:	4806      	ldr	r0, [pc, #24]	; (800061c <MX_TIM2_Init+0x98>)
 8000604:	f003 fd04 	bl	8004010 <HAL_TIMEx_MasterConfigSynchronization>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800060e:	f7ff ff28 	bl	8000462 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000612:	bf00      	nop
 8000614:	3718      	adds	r7, #24
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	2000024c 	.word	0x2000024c

08000620 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000630:	d113      	bne.n	800065a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <HAL_TIM_Base_MspInit+0x44>)
 8000634:	69db      	ldr	r3, [r3, #28]
 8000636:	4a0b      	ldr	r2, [pc, #44]	; (8000664 <HAL_TIM_Base_MspInit+0x44>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	61d3      	str	r3, [r2, #28]
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <HAL_TIM_Base_MspInit+0x44>)
 8000640:	69db      	ldr	r3, [r3, #28]
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	201c      	movs	r0, #28
 8000650:	f002 f881 	bl	8002756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000654:	201c      	movs	r0, #28
 8000656:	f002 f89a 	bl	800278e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800065a:	bf00      	nop
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40021000 	.word	0x40021000

08000668 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 800066e:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <MX_USART2_UART_Init+0x50>)
 8000670:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 4800;
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 8000674:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8000678:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 800068e:	220c      	movs	r2, #12
 8000690:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 80006a0:	f003 fd20 	bl	80040e4 <HAL_UART_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006aa:	f7ff feda 	bl	8000462 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200002d8 	.word	0x200002d8
 80006b8:	40004400 	.word	0x40004400

080006bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a32      	ldr	r2, [pc, #200]	; (80007a0 <HAL_UART_MspInit+0xe4>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d15d      	bne.n	8000798 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006dc:	4b31      	ldr	r3, [pc, #196]	; (80007a4 <HAL_UART_MspInit+0xe8>)
 80006de:	69db      	ldr	r3, [r3, #28]
 80006e0:	4a30      	ldr	r2, [pc, #192]	; (80007a4 <HAL_UART_MspInit+0xe8>)
 80006e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e6:	61d3      	str	r3, [r2, #28]
 80006e8:	4b2e      	ldr	r3, [pc, #184]	; (80007a4 <HAL_UART_MspInit+0xe8>)
 80006ea:	69db      	ldr	r3, [r3, #28]
 80006ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f4:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <HAL_UART_MspInit+0xe8>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	4a2a      	ldr	r2, [pc, #168]	; (80007a4 <HAL_UART_MspInit+0xe8>)
 80006fa:	f043 0304 	orr.w	r3, r3, #4
 80006fe:	6193      	str	r3, [r2, #24]
 8000700:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <HAL_UART_MspInit+0xe8>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	f003 0304 	and.w	r3, r3, #4
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800070c:	2304      	movs	r3, #4
 800070e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000710:	2302      	movs	r3, #2
 8000712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000714:	2303      	movs	r3, #3
 8000716:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000718:	f107 0310 	add.w	r3, r7, #16
 800071c:	4619      	mov	r1, r3
 800071e:	4822      	ldr	r0, [pc, #136]	; (80007a8 <HAL_UART_MspInit+0xec>)
 8000720:	f002 faee 	bl	8002d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000724:	2308      	movs	r3, #8
 8000726:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000730:	f107 0310 	add.w	r3, r7, #16
 8000734:	4619      	mov	r1, r3
 8000736:	481c      	ldr	r0, [pc, #112]	; (80007a8 <HAL_UART_MspInit+0xec>)
 8000738:	f002 fae2 	bl	8002d00 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800073c:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <HAL_UART_MspInit+0xf0>)
 800073e:	4a1c      	ldr	r2, [pc, #112]	; (80007b0 <HAL_UART_MspInit+0xf4>)
 8000740:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000742:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <HAL_UART_MspInit+0xf0>)
 8000744:	2200      	movs	r2, #0
 8000746:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000748:	4b18      	ldr	r3, [pc, #96]	; (80007ac <HAL_UART_MspInit+0xf0>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800074e:	4b17      	ldr	r3, [pc, #92]	; (80007ac <HAL_UART_MspInit+0xf0>)
 8000750:	2280      	movs	r2, #128	; 0x80
 8000752:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000754:	4b15      	ldr	r3, [pc, #84]	; (80007ac <HAL_UART_MspInit+0xf0>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <HAL_UART_MspInit+0xf0>)
 800075c:	2200      	movs	r2, #0
 800075e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <HAL_UART_MspInit+0xf0>)
 8000762:	2200      	movs	r2, #0
 8000764:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <HAL_UART_MspInit+0xf0>)
 8000768:	2200      	movs	r2, #0
 800076a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800076c:	480f      	ldr	r0, [pc, #60]	; (80007ac <HAL_UART_MspInit+0xf0>)
 800076e:	f002 f829 	bl	80027c4 <HAL_DMA_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8000778:	f7ff fe73 	bl	8000462 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4a0b      	ldr	r2, [pc, #44]	; (80007ac <HAL_UART_MspInit+0xf0>)
 8000780:	639a      	str	r2, [r3, #56]	; 0x38
 8000782:	4a0a      	ldr	r2, [pc, #40]	; (80007ac <HAL_UART_MspInit+0xf0>)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000788:	2200      	movs	r2, #0
 800078a:	2100      	movs	r1, #0
 800078c:	2026      	movs	r0, #38	; 0x26
 800078e:	f001 ffe2 	bl	8002756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000792:	2026      	movs	r0, #38	; 0x26
 8000794:	f001 fffb 	bl	800278e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000798:	bf00      	nop
 800079a:	3720      	adds	r7, #32
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40004400 	.word	0x40004400
 80007a4:	40021000 	.word	0x40021000
 80007a8:	40010800 	.word	0x40010800
 80007ac:	20000294 	.word	0x20000294
 80007b0:	4002006c 	.word	0x4002006c

080007b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b4:	480c      	ldr	r0, [pc, #48]	; (80007e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007b6:	490d      	ldr	r1, [pc, #52]	; (80007ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007b8:	4a0d      	ldr	r2, [pc, #52]	; (80007f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007bc:	e002      	b.n	80007c4 <LoopCopyDataInit>

080007be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007c2:	3304      	adds	r3, #4

080007c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c8:	d3f9      	bcc.n	80007be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ca:	4a0a      	ldr	r2, [pc, #40]	; (80007f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007cc:	4c0a      	ldr	r4, [pc, #40]	; (80007f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d0:	e001      	b.n	80007d6 <LoopFillZerobss>

080007d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d4:	3204      	adds	r2, #4

080007d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d8:	d3fb      	bcc.n	80007d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007da:	f7ff fecd 	bl	8000578 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007de:	f004 fb17 	bl	8004e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007e2:	f7ff fdc1 	bl	8000368 <main>
  bx lr
 80007e6:	4770      	bx	lr
  ldr r0, =_sdata
 80007e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ec:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80007f0:	08004ecc 	.word	0x08004ecc
  ldr r2, =_sbss
 80007f4:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80007f8:	200007fc 	.word	0x200007fc

080007fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007fc:	e7fe      	b.n	80007fc <ADC1_2_IRQHandler>
	...

08000800 <CAN1_Config>:
uint32_t pTxMailbox = 0;
uint8_t buffer[1024];

/* USER CODE BEGIN 1 */
  void CAN1_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef CAN_FilterType;
	CAN_FilterType.FilterBank=0;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
	CAN_FilterType.FilterIdHigh=0x0000;
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
	CAN_FilterType.FilterIdLow=0x0000;
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
	CAN_FilterType.FilterMaskIdHigh=0x0000;
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
	CAN_FilterType.FilterMaskIdLow=0x0000;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
	CAN_FilterType.FilterFIFOAssignment=CAN_RX_FIFO0;
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
	CAN_FilterType.FilterMode=CAN_FILTERMODE_IDMASK;
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
	CAN_FilterType.FilterScale=CAN_FILTERSCALE_32BIT;
 8000822:	2301      	movs	r3, #1
 8000824:	61fb      	str	r3, [r7, #28]
	CAN_FilterType.FilterActivation=ENABLE;
 8000826:	2301      	movs	r3, #1
 8000828:	623b      	str	r3, [r7, #32]
	CAN_FilterType.SlaveStartFilterBank=14;
 800082a:	230e      	movs	r3, #14
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
	if(HAL_CAN_ConfigFilter(&hcan,&CAN_FilterType)!=HAL_OK)
 800082e:	463b      	mov	r3, r7
 8000830:	4619      	mov	r1, r3
 8000832:	480e      	ldr	r0, [pc, #56]	; (800086c <CAN1_Config+0x6c>)
 8000834:	f001 f977 	bl	8001b26 <HAL_CAN_ConfigFilter>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <CAN1_Config+0x42>
	{
		Error_Handler();
 800083e:	f7ff fe10 	bl	8000462 <Error_Handler>
	}
	if(HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING)!=HAL_OK)
 8000842:	2102      	movs	r1, #2
 8000844:	4809      	ldr	r0, [pc, #36]	; (800086c <CAN1_Config+0x6c>)
 8000846:	f001 fc66 	bl	8002116 <HAL_CAN_ActivateNotification>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <CAN1_Config+0x54>
	{
		Error_Handler();
 8000850:	f7ff fe07 	bl	8000462 <Error_Handler>
	}
	if(HAL_CAN_Start(&hcan)!=HAL_OK)
 8000854:	4805      	ldr	r0, [pc, #20]	; (800086c <CAN1_Config+0x6c>)
 8000856:	f001 fa2f 	bl	8001cb8 <HAL_CAN_Start>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <CAN1_Config+0x64>
	{
		Error_Handler();
 8000860:	f7ff fdff 	bl	8000462 <Error_Handler>
	}
}
 8000864:	bf00      	nop
 8000866:	3728      	adds	r7, #40	; 0x28
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000218 	.word	0x20000218

08000870 <HAL_CAN_RxFifo0MsgPendingCallback>:
  }



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)//接受邮箱0挂起中断回调函数
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	//static uint16_t cnt=0;
	if(hcan->Instance==CAN1)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a09      	ldr	r2, [pc, #36]	; (80008a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d10b      	bne.n	800089a <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
	{
		HAL_CAN_GetRxMessage(hcan,CAN_FILTER_FIFO0,&RXHeader,RXmessage);//获取数据
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000884:	4a09      	ldr	r2, [pc, #36]	; (80008ac <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000886:	2100      	movs	r1, #0
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f001 fb33 	bl	8001ef4 <HAL_CAN_GetRxMessage>

		bat_can_data_handler(RXHeader.ExtId,RXmessage);
 800088e:	4b07      	ldr	r3, [pc, #28]	; (80008ac <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	4905      	ldr	r1, [pc, #20]	; (80008a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000894:	4618      	mov	r0, r3
 8000896:	f000 f91f 	bl	8000ad8 <bat_can_data_handler>
//		}


    }

}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40006400 	.word	0x40006400
 80008a8:	20000334 	.word	0x20000334
 80008ac:	20000744 	.word	0x20000744

080008b0 <user_can_send_data>:
	 TXHeader.TransmitGlobalTime = DISABLE;
	 HAL_CAN_AddTxMessage(hcan,&TXHeader,TXmessage,&pTxMailbox);
}

void user_can_send_data(uint32_t id , uint8_t *data)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
     TXHeader.StdId=0x00000000;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <user_can_send_data+0x44>)
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
	 TXHeader.ExtId=id;
 80008c0:	4a0c      	ldr	r2, [pc, #48]	; (80008f4 <user_can_send_data+0x44>)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6053      	str	r3, [r2, #4]
	 TXHeader.DLC=8;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <user_can_send_data+0x44>)
 80008c8:	2208      	movs	r2, #8
 80008ca:	611a      	str	r2, [r3, #16]
	 TXHeader.IDE=CAN_ID_EXT;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <user_can_send_data+0x44>)
 80008ce:	2204      	movs	r2, #4
 80008d0:	609a      	str	r2, [r3, #8]
	 TXHeader.RTR=CAN_RTR_DATA;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <user_can_send_data+0x44>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
	 TXHeader.TransmitGlobalTime = DISABLE;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <user_can_send_data+0x44>)
 80008da:	2200      	movs	r2, #0
 80008dc:	751a      	strb	r2, [r3, #20]
	 HAL_CAN_AddTxMessage(&hcan,&TXHeader,data,&pTxMailbox);
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <user_can_send_data+0x48>)
 80008e0:	683a      	ldr	r2, [r7, #0]
 80008e2:	4904      	ldr	r1, [pc, #16]	; (80008f4 <user_can_send_data+0x44>)
 80008e4:	4805      	ldr	r0, [pc, #20]	; (80008fc <user_can_send_data+0x4c>)
 80008e6:	f001 fa2b 	bl	8001d40 <HAL_CAN_AddTxMessage>
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	2000031c 	.word	0x2000031c
 80008f8:	20000208 	.word	0x20000208
 80008fc:	20000218 	.word	0x20000218

08000900 <getCheckSum>:

}


uint8_t  getCheckSum(uint8_t *data,uint16_t lenth)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	460b      	mov	r3, r1
 800090a:	807b      	strh	r3, [r7, #2]
	uint32_t sum=0;
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
	for(uint16_t i=0;i<lenth;i++)
 8000910:	2300      	movs	r3, #0
 8000912:	817b      	strh	r3, [r7, #10]
 8000914:	e00a      	b.n	800092c <getCheckSum+0x2c>
	{
		sum+=data[i];
 8000916:	897b      	ldrh	r3, [r7, #10]
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	4413      	add	r3, r2
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	461a      	mov	r2, r3
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	4413      	add	r3, r2
 8000924:	60fb      	str	r3, [r7, #12]
	for(uint16_t i=0;i<lenth;i++)
 8000926:	897b      	ldrh	r3, [r7, #10]
 8000928:	3301      	adds	r3, #1
 800092a:	817b      	strh	r3, [r7, #10]
 800092c:	897a      	ldrh	r2, [r7, #10]
 800092e:	887b      	ldrh	r3, [r7, #2]
 8000930:	429a      	cmp	r2, r3
 8000932:	d3f0      	bcc.n	8000916 <getCheckSum+0x16>

	}
	return (uint8_t )sum;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	b2db      	uxtb	r3, r3

}
 8000938:	4618      	mov	r0, r3
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr
	...

08000944 <HAL_TIM_PeriodElapsedCallback>:

#include "includes.h"


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)  //1ms IRQ
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	static uint16_t sec_cnt = 0;
	static uint16_t get_adc_flag=0;
	if (htim == &htim2)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a10      	ldr	r2, [pc, #64]	; (8000990 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d118      	bne.n	8000986 <HAL_TIM_PeriodElapsedCallback+0x42>
	{
		//uartReceiveTimmerRun(&hrs485);
		//ADS_getAllChannel(30);
		if (++sec_cnt > 1000)
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000956:	881b      	ldrh	r3, [r3, #0]
 8000958:	3301      	adds	r3, #1
 800095a:	b29a      	uxth	r2, r3
 800095c:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800095e:	801a      	strh	r2, [r3, #0]
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000968:	d907      	bls.n	800097a <HAL_TIM_PeriodElapsedCallback+0x36>
		{
			sec_cnt=0;
 800096a:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800096c:	2200      	movs	r2, #0
 800096e:	801a      	strh	r2, [r3, #0]
		    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000970:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000974:	4808      	ldr	r0, [pc, #32]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000976:	f002 fb55 	bl	8003024 <HAL_GPIO_TogglePin>
		}
		if(++get_adc_flag > 100)
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x58>)
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	3301      	adds	r3, #1
 8000980:	b29a      	uxth	r2, r3
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000984:	801a      	strh	r2, [r3, #0]

		//	ADS_getAllChannel(50);

		}
	}
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	2000024c 	.word	0x2000024c
 8000994:	2000020c 	.word	0x2000020c
 8000998:	40010c00 	.word	0x40010c00
 800099c:	2000020e 	.word	0x2000020e

080009a0 <uart_module_init>:
}



void uart_module_init(uart_module_TypeDef *UART_MODULE,UART_HandleTypeDef *UART,DMA_HandleTypeDef *hdma_usart_rx)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
    UART_MODULE->UART = UART;
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	601a      	str	r2, [r3, #0]
    UART_MODULE->hdma_usart_rx = hdma_usart_rx;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	605a      	str	r2, [r3, #4]
	__HAL_UART_ENABLE_IT(UART_MODULE->UART, UART_IT_IDLE);
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	68da      	ldr	r2, [r3, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f042 0210 	orr.w	r2, r2, #16
 80009ca:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_DMA(UART_MODULE->UART, UART_MODULE->uart_module_receive_buffer, RECEIVE_BUFFER_SIZE);
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	6818      	ldr	r0, [r3, #0]
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	330c      	adds	r3, #12
 80009d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009d8:	4619      	mov	r1, r3
 80009da:	f003 fc62 	bl	80042a2 <HAL_UART_Receive_DMA>

}
 80009de:	bf00      	nop
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <uart_module_IRQHandler>:
//}



void uart_module_IRQHandler(uart_module_TypeDef *UART_MODULE)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	uint16_t data_length;

   if (RESET != __HAL_UART_GET_FLAG(UART_MODULE->UART, UART_FLAG_IDLE) )
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f003 0310 	and.w	r3, r3, #16
 80009fc:	2b10      	cmp	r3, #16
 80009fe:	d126      	bne.n	8000a4e <uart_module_IRQHandler+0x66>
		{
			__HAL_UART_CLEAR_IDLEFLAG(UART_MODULE->UART);
 8000a00:	2300      	movs	r3, #0
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
			//printf("\r\nUART1 Idle IQR Detected\r\n");
			uart_cnt++;
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <uart_module_IRQHandler+0x70>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <uart_module_IRQHandler+0x70>)
 8000a24:	701a      	strb	r2, [r3, #0]
			//HAL_UART_DMAStop(huart);
			data_length = RECEIVE_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(UART_MODULE->hdma_usart_rx);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000a34:	81fb      	strh	r3, [r7, #14]
			//printf("Receive Data_length = %d : ", data_length);
			//HAL_UART_Transmit(huart, UART_MODULE->uart_module_receive_buffer,data_length, 0x200);

			//printf("\r\n");
			//memset(UART_MODULE->uart_module_receive_buffer, 0, data_length);
			UART_MODULE->rec_lenth = data_length;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	89fa      	ldrh	r2, [r7, #14]
 8000a3a:	815a      	strh	r2, [r3, #10]
			data_length = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	81fb      	strh	r3, [r7, #14]
			//HAL_UART_Receive_DMA(&huart1,UART_MODULE->uart_module_receive_buffer,RECEIVE_BUFFER_SIZE);
		    UART_MODULE->rec_flag = 1;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2201      	movs	r2, #1
 8000a44:	721a      	strb	r2, [r3, #8]

		    UART_MODULE->Handler();
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8000a4c:	4798      	blx	r3

		}


}
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000210 	.word	0x20000210

08000a5c <uart_module_send_hex>:
	HAL_UART_Transmit(usb_huart_module.UART, data, lenth, 1000);

}

void uart_module_send_hex(uint8_t *data,uint8_t lenth)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	460b      	mov	r3, r1
 8000a66:	70fb      	strb	r3, [r7, #3]
	//HAL_GPIO_WritePin(RS485_CTRL_GPIO_Port, RS485_CTRL_Pin, SET);
	uart_module_stop_receive(&signal_wire_huart_module);
 8000a68:	4809      	ldr	r0, [pc, #36]	; (8000a90 <uart_module_send_hex+0x34>)
 8000a6a:	f000 f813 	bl	8000a94 <uart_module_stop_receive>
	HAL_UART_Transmit(signal_wire_huart_module.UART, data, lenth, 1000);
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <uart_module_send_hex+0x34>)
 8000a70:	6818      	ldr	r0, [r3, #0]
 8000a72:	78fb      	ldrb	r3, [r7, #3]
 8000a74:	b29a      	uxth	r2, r3
 8000a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7a:	6879      	ldr	r1, [r7, #4]
 8000a7c:	f003 fb7f 	bl	800417e <HAL_UART_Transmit>
	uart_module_start_receive(&signal_wire_huart_module);
 8000a80:	4803      	ldr	r0, [pc, #12]	; (8000a90 <uart_module_send_hex+0x34>)
 8000a82:	f000 f814 	bl	8000aae <uart_module_start_receive>
	//HAL_GPIO_WritePin(RS485_CTRL_GPIO_Port, RS485_CTRL_Pin, RESET);
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000004 	.word	0x20000004

08000a94 <uart_module_stop_receive>:


void uart_module_stop_receive(uart_module_TypeDef *UART_MODULE)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	HAL_UART_DMAStop(UART_MODULE->UART);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f003 fc2e 	bl	8004302 <HAL_UART_DMAStop>


}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <uart_module_start_receive>:

void uart_module_start_receive(uart_module_TypeDef *UART_MODULE)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
	UART_MODULE->rec_lenth=0;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	815a      	strh	r2, [r3, #10]
	HAL_UART_Receive_DMA(UART_MODULE->UART,UART_MODULE->uart_module_receive_buffer,RECEIVE_BUFFER_SIZE);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6818      	ldr	r0, [r3, #0]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	330c      	adds	r3, #12
 8000ac4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f003 fbea 	bl	80042a2 <HAL_UART_Receive_DMA>

}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <bat_can_data_handler>:
uint8_t chg_fsm = CHG_INIT;
int16_t temp16=0;


void bat_can_data_handler(uint32_t id,uint8_t *data)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
	TIM2->CNT=0;
 8000ae2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	625a      	str	r2, [r3, #36]	; 0x24
	switch(id)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a9b      	ldr	r2, [pc, #620]	; (8000d5c <bat_can_data_handler+0x284>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	f000 81a9 	beq.w	8000e46 <bat_can_data_handler+0x36e>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4a99      	ldr	r2, [pc, #612]	; (8000d5c <bat_can_data_handler+0x284>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	f200 82e4 	bhi.w	80010c6 <bat_can_data_handler+0x5ee>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a97      	ldr	r2, [pc, #604]	; (8000d60 <bat_can_data_handler+0x288>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	f000 82c6 	beq.w	8001094 <bat_can_data_handler+0x5bc>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a95      	ldr	r2, [pc, #596]	; (8000d60 <bat_can_data_handler+0x288>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	f200 82da 	bhi.w	80010c6 <bat_can_data_handler+0x5ee>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a93      	ldr	r2, [pc, #588]	; (8000d64 <bat_can_data_handler+0x28c>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	f000 825d 	beq.w	8000fd6 <bat_can_data_handler+0x4fe>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a91      	ldr	r2, [pc, #580]	; (8000d64 <bat_can_data_handler+0x28c>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	f200 82d0 	bhi.w	80010c6 <bat_can_data_handler+0x5ee>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a8f      	ldr	r2, [pc, #572]	; (8000d68 <bat_can_data_handler+0x290>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	f000 8210 	beq.w	8000f50 <bat_can_data_handler+0x478>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a8d      	ldr	r2, [pc, #564]	; (8000d68 <bat_can_data_handler+0x290>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	f200 82c6 	bhi.w	80010c6 <bat_can_data_handler+0x5ee>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a8b      	ldr	r2, [pc, #556]	; (8000d6c <bat_can_data_handler+0x294>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	f000 8200 	beq.w	8000f44 <bat_can_data_handler+0x46c>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a89      	ldr	r2, [pc, #548]	; (8000d6c <bat_can_data_handler+0x294>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	f200 82bc 	bhi.w	80010c6 <bat_can_data_handler+0x5ee>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4a87      	ldr	r2, [pc, #540]	; (8000d70 <bat_can_data_handler+0x298>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	f000 81f0 	beq.w	8000f38 <bat_can_data_handler+0x460>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a85      	ldr	r2, [pc, #532]	; (8000d70 <bat_can_data_handler+0x298>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	f200 82b2 	bhi.w	80010c6 <bat_can_data_handler+0x5ee>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a83      	ldr	r2, [pc, #524]	; (8000d74 <bat_can_data_handler+0x29c>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	f000 81e0 	beq.w	8000f2c <bat_can_data_handler+0x454>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a81      	ldr	r2, [pc, #516]	; (8000d74 <bat_can_data_handler+0x29c>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	f200 82a8 	bhi.w	80010c6 <bat_can_data_handler+0x5ee>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a7f      	ldr	r2, [pc, #508]	; (8000d78 <bat_can_data_handler+0x2a0>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	f000 817d 	beq.w	8000e7a <bat_can_data_handler+0x3a2>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a7d      	ldr	r2, [pc, #500]	; (8000d78 <bat_can_data_handler+0x2a0>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	f200 829e 	bhi.w	80010c6 <bat_can_data_handler+0x5ee>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a7b      	ldr	r2, [pc, #492]	; (8000d7c <bat_can_data_handler+0x2a4>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d07b      	beq.n	8000c8a <bat_can_data_handler+0x1b2>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a79      	ldr	r2, [pc, #484]	; (8000d7c <bat_can_data_handler+0x2a4>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	f200 8295 	bhi.w	80010c6 <bat_can_data_handler+0x5ee>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a78      	ldr	r2, [pc, #480]	; (8000d80 <bat_can_data_handler+0x2a8>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	f000 810f 	beq.w	8000dc4 <bat_can_data_handler+0x2ec>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4a75      	ldr	r2, [pc, #468]	; (8000d80 <bat_can_data_handler+0x2a8>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	f200 828b 	bhi.w	80010c6 <bat_can_data_handler+0x5ee>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a74      	ldr	r2, [pc, #464]	; (8000d84 <bat_can_data_handler+0x2ac>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	f000 80c2 	beq.w	8000d3e <bat_can_data_handler+0x266>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a71      	ldr	r2, [pc, #452]	; (8000d84 <bat_can_data_handler+0x2ac>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	f200 8281 	bhi.w	80010c6 <bat_can_data_handler+0x5ee>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a70      	ldr	r2, [pc, #448]	; (8000d88 <bat_can_data_handler+0x2b0>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	f000 809d 	beq.w	8000d08 <bat_can_data_handler+0x230>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a6d      	ldr	r2, [pc, #436]	; (8000d88 <bat_can_data_handler+0x2b0>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	f200 8277 	bhi.w	80010c6 <bat_can_data_handler+0x5ee>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a6c      	ldr	r2, [pc, #432]	; (8000d8c <bat_can_data_handler+0x2b4>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d078      	beq.n	8000cd2 <bat_can_data_handler+0x1fa>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a6a      	ldr	r2, [pc, #424]	; (8000d8c <bat_can_data_handler+0x2b4>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	f200 826e 	bhi.w	80010c6 <bat_can_data_handler+0x5ee>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a68      	ldr	r2, [pc, #416]	; (8000d90 <bat_can_data_handler+0x2b8>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d054      	beq.n	8000c9c <bat_can_data_handler+0x1c4>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4a66      	ldr	r2, [pc, #408]	; (8000d90 <bat_can_data_handler+0x2b8>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	f200 8265 	bhi.w	80010c6 <bat_can_data_handler+0x5ee>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a65      	ldr	r2, [pc, #404]	; (8000d94 <bat_can_data_handler+0x2bc>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	f000 8215 	beq.w	8001030 <bat_can_data_handler+0x558>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a62      	ldr	r2, [pc, #392]	; (8000d94 <bat_can_data_handler+0x2bc>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	f200 825b 	bhi.w	80010c6 <bat_can_data_handler+0x5ee>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a61      	ldr	r2, [pc, #388]	; (8000d98 <bat_can_data_handler+0x2c0>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	f000 81f9 	beq.w	800100c <bat_can_data_handler+0x534>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a5e      	ldr	r2, [pc, #376]	; (8000d98 <bat_can_data_handler+0x2c0>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	f200 8251 	bhi.w	80010c6 <bat_can_data_handler+0x5ee>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a5d      	ldr	r2, [pc, #372]	; (8000d9c <bat_can_data_handler+0x2c4>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	f000 8247 	beq.w	80010bc <bat_can_data_handler+0x5e4>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a5a      	ldr	r2, [pc, #360]	; (8000d9c <bat_can_data_handler+0x2c4>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	f200 8247 	bhi.w	80010c6 <bat_can_data_handler+0x5ee>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a59      	ldr	r2, [pc, #356]	; (8000da0 <bat_can_data_handler+0x2c8>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	f000 8235 	beq.w	80010ac <bat_can_data_handler+0x5d4>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a56      	ldr	r2, [pc, #344]	; (8000da0 <bat_can_data_handler+0x2c8>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	f200 823d 	bhi.w	80010c6 <bat_can_data_handler+0x5ee>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a55      	ldr	r2, [pc, #340]	; (8000da4 <bat_can_data_handler+0x2cc>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	f000 821b 	beq.w	800108c <bat_can_data_handler+0x5b4>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a52      	ldr	r2, [pc, #328]	; (8000da4 <bat_can_data_handler+0x2cc>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	f200 8233 	bhi.w	80010c6 <bat_can_data_handler+0x5ee>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a51      	ldr	r2, [pc, #324]	; (8000da8 <bat_can_data_handler+0x2d0>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	f000 820d 	beq.w	8001084 <bat_can_data_handler+0x5ac>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a4e      	ldr	r2, [pc, #312]	; (8000da8 <bat_can_data_handler+0x2d0>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	f200 8229 	bhi.w	80010c6 <bat_can_data_handler+0x5ee>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a4d      	ldr	r2, [pc, #308]	; (8000dac <bat_can_data_handler+0x2d4>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	f000 820f 	beq.w	800109c <bat_can_data_handler+0x5c4>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a4b      	ldr	r2, [pc, #300]	; (8000db0 <bat_can_data_handler+0x2d8>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	f000 8216 	beq.w	80010b4 <bat_can_data_handler+0x5dc>
	case BSD:
		chg_flags.chg_bms_cnt_flag = true;
		break;
	}

}
 8000c88:	e21d      	b.n	80010c6 <bat_can_data_handler+0x5ee>
		can_battery.ntc_num = data[0];
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	781a      	ldrb	r2, [r3, #0]
 8000c8e:	4b49      	ldr	r3, [pc, #292]	; (8000db4 <bat_can_data_handler+0x2dc>)
 8000c90:	701a      	strb	r2, [r3, #0]
		can_battery.series_num = data[2];
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	789a      	ldrb	r2, [r3, #2]
 8000c96:	4b47      	ldr	r3, [pc, #284]	; (8000db4 <bat_can_data_handler+0x2dc>)
 8000c98:	705a      	strb	r2, [r3, #1]
		break;
 8000c9a:	e214      	b.n	80010c6 <bat_can_data_handler+0x5ee>
		for(uint8_t i=0;i<8;i++)
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	73fb      	strb	r3, [r7, #15]
 8000ca0:	e00e      	b.n	8000cc0 <bat_can_data_handler+0x1e8>
			if(data[i]>127) //not ascii
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	683a      	ldr	r2, [r7, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	b25b      	sxtb	r3, r3
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	da04      	bge.n	8000cba <bat_can_data_handler+0x1e2>
				data[i]=0;
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
 8000cb2:	683a      	ldr	r2, [r7, #0]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0;i<8;i++)
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	73fb      	strb	r3, [r7, #15]
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	2b07      	cmp	r3, #7
 8000cc4:	d9ed      	bls.n	8000ca2 <bat_can_data_handler+0x1ca>
		memcpy(&can_battery.battery_code[0],data,8);
 8000cc6:	2208      	movs	r2, #8
 8000cc8:	6839      	ldr	r1, [r7, #0]
 8000cca:	483b      	ldr	r0, [pc, #236]	; (8000db8 <bat_can_data_handler+0x2e0>)
 8000ccc:	f004 f8c4 	bl	8004e58 <memcpy>
		break;
 8000cd0:	e1f9      	b.n	80010c6 <bat_can_data_handler+0x5ee>
		for(uint8_t i=0;i<8;i++)
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	73bb      	strb	r3, [r7, #14]
 8000cd6:	e00e      	b.n	8000cf6 <bat_can_data_handler+0x21e>
			if(data[i]>127) //not ascii
 8000cd8:	7bbb      	ldrb	r3, [r7, #14]
 8000cda:	683a      	ldr	r2, [r7, #0]
 8000cdc:	4413      	add	r3, r2
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	b25b      	sxtb	r3, r3
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	da04      	bge.n	8000cf0 <bat_can_data_handler+0x218>
				data[i]=0;
 8000ce6:	7bbb      	ldrb	r3, [r7, #14]
 8000ce8:	683a      	ldr	r2, [r7, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0;i<8;i++)
 8000cf0:	7bbb      	ldrb	r3, [r7, #14]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	73bb      	strb	r3, [r7, #14]
 8000cf6:	7bbb      	ldrb	r3, [r7, #14]
 8000cf8:	2b07      	cmp	r3, #7
 8000cfa:	d9ed      	bls.n	8000cd8 <bat_can_data_handler+0x200>
		memcpy(&can_battery.battery_code[8],data,8);
 8000cfc:	2208      	movs	r2, #8
 8000cfe:	6839      	ldr	r1, [r7, #0]
 8000d00:	482e      	ldr	r0, [pc, #184]	; (8000dbc <bat_can_data_handler+0x2e4>)
 8000d02:	f004 f8a9 	bl	8004e58 <memcpy>
		break;
 8000d06:	e1de      	b.n	80010c6 <bat_can_data_handler+0x5ee>
		for(uint8_t i=0;i<8;i++)
 8000d08:	2300      	movs	r3, #0
 8000d0a:	737b      	strb	r3, [r7, #13]
 8000d0c:	e00e      	b.n	8000d2c <bat_can_data_handler+0x254>
			if(data[i]>127) //not ascii
 8000d0e:	7b7b      	ldrb	r3, [r7, #13]
 8000d10:	683a      	ldr	r2, [r7, #0]
 8000d12:	4413      	add	r3, r2
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	b25b      	sxtb	r3, r3
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	da04      	bge.n	8000d26 <bat_can_data_handler+0x24e>
				data[i]=0;
 8000d1c:	7b7b      	ldrb	r3, [r7, #13]
 8000d1e:	683a      	ldr	r2, [r7, #0]
 8000d20:	4413      	add	r3, r2
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0;i<8;i++)
 8000d26:	7b7b      	ldrb	r3, [r7, #13]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	737b      	strb	r3, [r7, #13]
 8000d2c:	7b7b      	ldrb	r3, [r7, #13]
 8000d2e:	2b07      	cmp	r3, #7
 8000d30:	d9ed      	bls.n	8000d0e <bat_can_data_handler+0x236>
		memcpy(&can_battery.battery_code[16],data,8);
 8000d32:	2208      	movs	r2, #8
 8000d34:	6839      	ldr	r1, [r7, #0]
 8000d36:	4822      	ldr	r0, [pc, #136]	; (8000dc0 <bat_can_data_handler+0x2e8>)
 8000d38:	f004 f88e 	bl	8004e58 <memcpy>
		break;
 8000d3c:	e1c3      	b.n	80010c6 <bat_can_data_handler+0x5ee>
		can_battery.max_value.max_charge_current = (data[1]*256+data[0])*10;
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	3301      	adds	r3, #1
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	021b      	lsls	r3, r3, #8
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	7812      	ldrb	r2, [r2, #0]
 8000d4a:	441a      	add	r2, r3
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4413      	add	r3, r2
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	461a      	mov	r2, r3
 8000d56:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <bat_can_data_handler+0x2dc>)
 8000d58:	661a      	str	r2, [r3, #96]	; 0x60
		break;
 8000d5a:	e1b4      	b.n	80010c6 <bat_can_data_handler+0x5ee>
 8000d5c:	1c3a0809 	.word	0x1c3a0809
 8000d60:	1c350809 	.word	0x1c350809
 8000d64:	18fd0809 	.word	0x18fd0809
 8000d68:	18f90809 	.word	0x18f90809
 8000d6c:	18f80809 	.word	0x18f80809
 8000d70:	18f70809 	.word	0x18f70809
 8000d74:	18f60809 	.word	0x18f60809
 8000d78:	18f50809 	.word	0x18f50809
 8000d7c:	18f10809 	.word	0x18f10809
 8000d80:	18e10809 	.word	0x18e10809
 8000d84:	18e00809 	.word	0x18e00809
 8000d88:	18650809 	.word	0x18650809
 8000d8c:	18640809 	.word	0x18640809
 8000d90:	18630809 	.word	0x18630809
 8000d94:	18620809 	.word	0x18620809
 8000d98:	18610809 	.word	0x18610809
 8000d9c:	183e0908 	.word	0x183e0908
 8000da0:	18390809 	.word	0x18390809
 8000da4:	18340809 	.word	0x18340809
 8000da8:	18320809 	.word	0x18320809
 8000dac:	10370809 	.word	0x10370809
 8000db0:	103c0908 	.word	0x103c0908
 8000db4:	20000770 	.word	0x20000770
 8000db8:	2000078c 	.word	0x2000078c
 8000dbc:	20000794 	.word	0x20000794
 8000dc0:	2000079c 	.word	0x2000079c
		can_battery.battery_soc = data[0];
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	781a      	ldrb	r2, [r3, #0]
 8000dc8:	4ba6      	ldr	r3, [pc, #664]	; (8001064 <bat_can_data_handler+0x58c>)
 8000dca:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		can_battery.battery_soh = data[1];
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	785a      	ldrb	r2, [r3, #1]
 8000dd2:	4ba4      	ldr	r3, [pc, #656]	; (8001064 <bat_can_data_handler+0x58c>)
 8000dd4:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		can_battery.pack_voltage = ((data[3]*256)+data[2])*10;
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	3303      	adds	r3, #3
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	021b      	lsls	r3, r3, #8
 8000de0:	683a      	ldr	r2, [r7, #0]
 8000de2:	3202      	adds	r2, #2
 8000de4:	7812      	ldrb	r2, [r2, #0]
 8000de6:	441a      	add	r2, r3
 8000de8:	4613      	mov	r3, r2
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	4413      	add	r3, r2
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	461a      	mov	r2, r3
 8000df2:	4b9c      	ldr	r3, [pc, #624]	; (8001064 <bat_can_data_handler+0x58c>)
 8000df4:	679a      	str	r2, [r3, #120]	; 0x78
		memcpy(&can_battery.cycle_counter,&data[4],2);
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	4b99      	ldr	r3, [pc, #612]	; (8001064 <bat_can_data_handler+0x58c>)
 8000e00:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		can_battery.full_capacity = (data[7]*256+data[6])*10;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	3307      	adds	r3, #7
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	021b      	lsls	r3, r3, #8
 8000e0c:	683a      	ldr	r2, [r7, #0]
 8000e0e:	3206      	adds	r2, #6
 8000e10:	7812      	ldrb	r2, [r2, #0]
 8000e12:	441a      	add	r2, r3
 8000e14:	4613      	mov	r3, r2
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	4413      	add	r3, r2
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b91      	ldr	r3, [pc, #580]	; (8001064 <bat_can_data_handler+0x58c>)
 8000e20:	609a      	str	r2, [r3, #8]
		can_battery.design_capacity = can_battery.full_capacity;
 8000e22:	4b90      	ldr	r3, [pc, #576]	; (8001064 <bat_can_data_handler+0x58c>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	4a8f      	ldr	r2, [pc, #572]	; (8001064 <bat_can_data_handler+0x58c>)
 8000e28:	60d3      	str	r3, [r2, #12]
		can_battery.current_capacity = can_battery.full_capacity*can_battery.battery_soc/100;
 8000e2a:	4b8e      	ldr	r3, [pc, #568]	; (8001064 <bat_can_data_handler+0x58c>)
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	4a8d      	ldr	r2, [pc, #564]	; (8001064 <bat_can_data_handler+0x58c>)
 8000e30:	f892 2076 	ldrb.w	r2, [r2, #118]	; 0x76
 8000e34:	fb02 f303 	mul.w	r3, r2, r3
 8000e38:	4a8b      	ldr	r2, [pc, #556]	; (8001068 <bat_can_data_handler+0x590>)
 8000e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3e:	095b      	lsrs	r3, r3, #5
 8000e40:	4a88      	ldr	r2, [pc, #544]	; (8001064 <bat_can_data_handler+0x58c>)
 8000e42:	6053      	str	r3, [r2, #4]
		break;
 8000e44:	e13f      	b.n	80010c6 <bat_can_data_handler+0x5ee>
		chg_flags.chg_status_flag = true;
 8000e46:	4b89      	ldr	r3, [pc, #548]	; (800106c <bat_can_data_handler+0x594>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	719a      	strb	r2, [r3, #6]
		memcpy(&temp16,&data[2],2);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	3302      	adds	r3, #2
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	4b86      	ldr	r3, [pc, #536]	; (8001070 <bat_can_data_handler+0x598>)
 8000e56:	801a      	strh	r2, [r3, #0]
		can_battery.real_time_current = temp16*10;
 8000e58:	4b85      	ldr	r3, [pc, #532]	; (8001070 <bat_can_data_handler+0x598>)
 8000e5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4613      	mov	r3, r2
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	4413      	add	r3, r2
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b7e      	ldr	r3, [pc, #504]	; (8001064 <bat_can_data_handler+0x58c>)
 8000e6c:	67da      	str	r2, [r3, #124]	; 0x7c
		can_battery.battery_soc = data[4];
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	791a      	ldrb	r2, [r3, #4]
 8000e72:	4b7c      	ldr	r3, [pc, #496]	; (8001064 <bat_can_data_handler+0x58c>)
 8000e74:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		break;
 8000e78:	e125      	b.n	80010c6 <bat_can_data_handler+0x5ee>
		can_battery.mosfet_tmp = data[7]-40;
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	3307      	adds	r3, #7
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	3b28      	subs	r3, #40	; 0x28
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	b25a      	sxtb	r2, r3
 8000e86:	4b77      	ldr	r3, [pc, #476]	; (8001064 <bat_can_data_handler+0x58c>)
 8000e88:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		can_battery.highest_cell_tmp = data[0];
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	b25a      	sxtb	r2, r3
 8000e92:	4b74      	ldr	r3, [pc, #464]	; (8001064 <bat_can_data_handler+0x58c>)
 8000e94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		can_battery.lowest_cell_tmp = data[0];
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	b25a      	sxtb	r2, r3
 8000e9e:	4b71      	ldr	r3, [pc, #452]	; (8001064 <bat_can_data_handler+0x58c>)
 8000ea0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		for(uint8_t i=0;i<can_battery.ntc_num;i++)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	733b      	strb	r3, [r7, #12]
 8000ea8:	e026      	b.n	8000ef8 <bat_can_data_handler+0x420>
			if(data[i]>can_battery.highest_cell_tmp)
 8000eaa:	7b3b      	ldrb	r3, [r7, #12]
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	4413      	add	r3, r2
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4b6b      	ldr	r3, [pc, #428]	; (8001064 <bat_can_data_handler+0x58c>)
 8000eb6:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	dd07      	ble.n	8000ece <bat_can_data_handler+0x3f6>
				can_battery.highest_cell_tmp = data[i];
 8000ebe:	7b3b      	ldrb	r3, [r7, #12]
 8000ec0:	683a      	ldr	r2, [r7, #0]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	b25a      	sxtb	r2, r3
 8000ec8:	4b66      	ldr	r3, [pc, #408]	; (8001064 <bat_can_data_handler+0x58c>)
 8000eca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
			if(data[i]<can_battery.lowest_cell_tmp)
 8000ece:	7b3b      	ldrb	r3, [r7, #12]
 8000ed0:	683a      	ldr	r2, [r7, #0]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	4b62      	ldr	r3, [pc, #392]	; (8001064 <bat_can_data_handler+0x58c>)
 8000eda:	f993 3081 	ldrsb.w	r3, [r3, #129]	; 0x81
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	da07      	bge.n	8000ef2 <bat_can_data_handler+0x41a>
				can_battery.lowest_cell_tmp = data[i];
 8000ee2:	7b3b      	ldrb	r3, [r7, #12]
 8000ee4:	683a      	ldr	r2, [r7, #0]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	b25a      	sxtb	r2, r3
 8000eec:	4b5d      	ldr	r3, [pc, #372]	; (8001064 <bat_can_data_handler+0x58c>)
 8000eee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		for(uint8_t i=0;i<can_battery.ntc_num;i++)
 8000ef2:	7b3b      	ldrb	r3, [r7, #12]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	733b      	strb	r3, [r7, #12]
 8000ef8:	4b5a      	ldr	r3, [pc, #360]	; (8001064 <bat_can_data_handler+0x58c>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	7b3a      	ldrb	r2, [r7, #12]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d3d3      	bcc.n	8000eaa <bat_can_data_handler+0x3d2>
		can_battery.highest_cell_tmp -= 40;
 8000f02:	4b58      	ldr	r3, [pc, #352]	; (8001064 <bat_can_data_handler+0x58c>)
 8000f04:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	3b28      	subs	r3, #40	; 0x28
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	b25a      	sxtb	r2, r3
 8000f10:	4b54      	ldr	r3, [pc, #336]	; (8001064 <bat_can_data_handler+0x58c>)
 8000f12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		can_battery.lowest_cell_tmp -= 40;
 8000f16:	4b53      	ldr	r3, [pc, #332]	; (8001064 <bat_can_data_handler+0x58c>)
 8000f18:	f993 3081 	ldrsb.w	r3, [r3, #129]	; 0x81
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	3b28      	subs	r3, #40	; 0x28
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	b25a      	sxtb	r2, r3
 8000f24:	4b4f      	ldr	r3, [pc, #316]	; (8001064 <bat_can_data_handler+0x58c>)
 8000f26:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		break;
 8000f2a:	e0cc      	b.n	80010c6 <bat_can_data_handler+0x5ee>
		memcpy(&can_battery.cell_voltage[0], data,8);
 8000f2c:	2208      	movs	r2, #8
 8000f2e:	6839      	ldr	r1, [r7, #0]
 8000f30:	4850      	ldr	r0, [pc, #320]	; (8001074 <bat_can_data_handler+0x59c>)
 8000f32:	f003 ff91 	bl	8004e58 <memcpy>
		break;
 8000f36:	e0c6      	b.n	80010c6 <bat_can_data_handler+0x5ee>
		memcpy(&can_battery.cell_voltage[4], data,8);
 8000f38:	2208      	movs	r2, #8
 8000f3a:	6839      	ldr	r1, [r7, #0]
 8000f3c:	484e      	ldr	r0, [pc, #312]	; (8001078 <bat_can_data_handler+0x5a0>)
 8000f3e:	f003 ff8b 	bl	8004e58 <memcpy>
		break;
 8000f42:	e0c0      	b.n	80010c6 <bat_can_data_handler+0x5ee>
		memcpy(&can_battery.cell_voltage[8], data,8);
 8000f44:	2208      	movs	r2, #8
 8000f46:	6839      	ldr	r1, [r7, #0]
 8000f48:	484c      	ldr	r0, [pc, #304]	; (800107c <bat_can_data_handler+0x5a4>)
 8000f4a:	f003 ff85 	bl	8004e58 <memcpy>
		break;
 8000f4e:	e0ba      	b.n	80010c6 <bat_can_data_handler+0x5ee>
		memcpy(&can_battery.cell_voltage[12], data,8);
 8000f50:	2208      	movs	r2, #8
 8000f52:	6839      	ldr	r1, [r7, #0]
 8000f54:	484a      	ldr	r0, [pc, #296]	; (8001080 <bat_can_data_handler+0x5a8>)
 8000f56:	f003 ff7f 	bl	8004e58 <memcpy>
		can_battery.max_value.max_cell_voltage = can_battery.cell_voltage[0];
 8000f5a:	4b42      	ldr	r3, [pc, #264]	; (8001064 <bat_can_data_handler+0x58c>)
 8000f5c:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8000f5e:	4b41      	ldr	r3, [pc, #260]	; (8001064 <bat_can_data_handler+0x58c>)
 8000f60:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		can_battery.max_value.min_cell_voltage = can_battery.cell_voltage[0];
 8000f64:	4b3f      	ldr	r3, [pc, #252]	; (8001064 <bat_can_data_handler+0x58c>)
 8000f66:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8000f68:	4b3e      	ldr	r3, [pc, #248]	; (8001064 <bat_can_data_handler+0x58c>)
 8000f6a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
		for(uint8_t i=0;i<can_battery.series_num;i++)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	72fb      	strb	r3, [r7, #11]
 8000f72:	e02a      	b.n	8000fca <bat_can_data_handler+0x4f2>
			if(can_battery.cell_voltage[i]>can_battery.max_value.max_cell_voltage)
 8000f74:	7afb      	ldrb	r3, [r7, #11]
 8000f76:	4a3b      	ldr	r2, [pc, #236]	; (8001064 <bat_can_data_handler+0x58c>)
 8000f78:	331c      	adds	r3, #28
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	889a      	ldrh	r2, [r3, #4]
 8000f80:	4b38      	ldr	r3, [pc, #224]	; (8001064 <bat_can_data_handler+0x58c>)
 8000f82:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d908      	bls.n	8000f9c <bat_can_data_handler+0x4c4>
				can_battery.max_value.max_cell_voltage = can_battery.cell_voltage[i];
 8000f8a:	7afb      	ldrb	r3, [r7, #11]
 8000f8c:	4a35      	ldr	r2, [pc, #212]	; (8001064 <bat_can_data_handler+0x58c>)
 8000f8e:	331c      	adds	r3, #28
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	4413      	add	r3, r2
 8000f94:	889a      	ldrh	r2, [r3, #4]
 8000f96:	4b33      	ldr	r3, [pc, #204]	; (8001064 <bat_can_data_handler+0x58c>)
 8000f98:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
			if(can_battery.cell_voltage[i]<can_battery.max_value.min_cell_voltage)
 8000f9c:	7afb      	ldrb	r3, [r7, #11]
 8000f9e:	4a31      	ldr	r2, [pc, #196]	; (8001064 <bat_can_data_handler+0x58c>)
 8000fa0:	331c      	adds	r3, #28
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	4413      	add	r3, r2
 8000fa6:	889a      	ldrh	r2, [r3, #4]
 8000fa8:	4b2e      	ldr	r3, [pc, #184]	; (8001064 <bat_can_data_handler+0x58c>)
 8000faa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d208      	bcs.n	8000fc4 <bat_can_data_handler+0x4ec>
				can_battery.max_value.min_cell_voltage = can_battery.cell_voltage[i];
 8000fb2:	7afb      	ldrb	r3, [r7, #11]
 8000fb4:	4a2b      	ldr	r2, [pc, #172]	; (8001064 <bat_can_data_handler+0x58c>)
 8000fb6:	331c      	adds	r3, #28
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	4413      	add	r3, r2
 8000fbc:	889a      	ldrh	r2, [r3, #4]
 8000fbe:	4b29      	ldr	r3, [pc, #164]	; (8001064 <bat_can_data_handler+0x58c>)
 8000fc0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
		for(uint8_t i=0;i<can_battery.series_num;i++)
 8000fc4:	7afb      	ldrb	r3, [r7, #11]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	72fb      	strb	r3, [r7, #11]
 8000fca:	4b26      	ldr	r3, [pc, #152]	; (8001064 <bat_can_data_handler+0x58c>)
 8000fcc:	785b      	ldrb	r3, [r3, #1]
 8000fce:	7afa      	ldrb	r2, [r7, #11]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d3cf      	bcc.n	8000f74 <bat_can_data_handler+0x49c>
		break;
 8000fd4:	e077      	b.n	80010c6 <bat_can_data_handler+0x5ee>
		can_battery.max_value.max_pack_temperature = data[0]-40;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	3b28      	subs	r3, #40	; 0x28
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	b25a      	sxtb	r2, r3
 8000fe0:	4b20      	ldr	r3, [pc, #128]	; (8001064 <bat_can_data_handler+0x58c>)
 8000fe2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		can_battery.max_value.min_pack_temperature = data[1]-40;
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	3b28      	subs	r3, #40	; 0x28
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	b25a      	sxtb	r2, r3
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <bat_can_data_handler+0x58c>)
 8000ff4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
		can_battery.mosfet_tmp = data[4]-40;
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	3304      	adds	r3, #4
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	3b28      	subs	r3, #40	; 0x28
 8001000:	b2db      	uxtb	r3, r3
 8001002:	b25a      	sxtb	r2, r3
 8001004:	4b17      	ldr	r3, [pc, #92]	; (8001064 <bat_can_data_handler+0x58c>)
 8001006:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		break;
 800100a:	e05c      	b.n	80010c6 <bat_can_data_handler+0x5ee>
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	b29a      	uxth	r2, r3
		memcpy(&can_battery.version_info.hw_version,&data[0],2);
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <bat_can_data_handler+0x58c>)
 8001014:	82da      	strh	r2, [r3, #22]
		memcpy(&can_battery.version_info.fw_version,&data[2],2);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	3302      	adds	r3, #2
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	b29a      	uxth	r2, r3
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <bat_can_data_handler+0x58c>)
 8001020:	829a      	strh	r2, [r3, #20]
		memcpy(can_battery.version_info.fw_index,&data[4],4);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	3304      	adds	r3, #4
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	461a      	mov	r2, r3
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <bat_can_data_handler+0x58c>)
 800102c:	619a      	str	r2, [r3, #24]
		break;
 800102e:	e04a      	b.n	80010c6 <bat_can_data_handler+0x5ee>
		memcpy(can_battery.error_info.error,&data[0],6);
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <bat_can_data_handler+0x58c>)
 8001032:	683a      	ldr	r2, [r7, #0]
 8001034:	336c      	adds	r3, #108	; 0x6c
 8001036:	6810      	ldr	r0, [r2, #0]
 8001038:	6018      	str	r0, [r3, #0]
 800103a:	8892      	ldrh	r2, [r2, #4]
 800103c:	809a      	strh	r2, [r3, #4]
		can_battery.status_info.pre_charge_circuit = (data[6]&0x02);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	3306      	adds	r3, #6
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <bat_can_data_handler+0x58c>)
 800104c:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		can_battery.status_info.charge_mosfet = (data[6]&0x02);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	3306      	adds	r3, #6
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	b2da      	uxtb	r2, r3
 800105c:	4b01      	ldr	r3, [pc, #4]	; (8001064 <bat_can_data_handler+0x58c>)
 800105e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		break;
 8001062:	e030      	b.n	80010c6 <bat_can_data_handler+0x5ee>
 8001064:	20000770 	.word	0x20000770
 8001068:	51eb851f 	.word	0x51eb851f
 800106c:	20000764 	.word	0x20000764
 8001070:	20000212 	.word	0x20000212
 8001074:	200007ac 	.word	0x200007ac
 8001078:	200007b4 	.word	0x200007b4
 800107c:	200007bc 	.word	0x200007bc
 8001080:	200007c4 	.word	0x200007c4
		chg_flags.handshake_flag = true;
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <bat_can_data_handler+0x5f8>)
 8001086:	2201      	movs	r2, #1
 8001088:	701a      	strb	r2, [r3, #0]
		break;
 800108a:	e01c      	b.n	80010c6 <bat_can_data_handler+0x5ee>
		chg_flags.identification_flag = true;
 800108c:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <bat_can_data_handler+0x5f8>)
 800108e:	2201      	movs	r2, #1
 8001090:	705a      	strb	r2, [r3, #1]
		break;
 8001092:	e018      	b.n	80010c6 <bat_can_data_handler+0x5ee>
		chg_flags.bat_chg_parameter = true;
 8001094:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <bat_can_data_handler+0x5f8>)
 8001096:	2201      	movs	r2, #1
 8001098:	709a      	strb	r2, [r3, #2]
		break;
 800109a:	e014      	b.n	80010c6 <bat_can_data_handler+0x5ee>
		if(data[0] == 0xAA)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2baa      	cmp	r3, #170	; 0xaa
 80010a2:	d10f      	bne.n	80010c4 <bat_can_data_handler+0x5ec>
			chg_flags.bat_ready_flag = true;
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <bat_can_data_handler+0x5f8>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	70da      	strb	r2, [r3, #3]
		break;
 80010aa:	e00b      	b.n	80010c4 <bat_can_data_handler+0x5ec>
		chg_flags.chg_demand_flag = true;
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <bat_can_data_handler+0x5f8>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	715a      	strb	r2, [r3, #5]
		break;
 80010b2:	e008      	b.n	80010c6 <bat_can_data_handler+0x5ee>
		chg_flags.chg_bms_stop_flag = true;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <bat_can_data_handler+0x5f8>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	71da      	strb	r2, [r3, #7]
		break;
 80010ba:	e004      	b.n	80010c6 <bat_can_data_handler+0x5ee>
		chg_flags.chg_bms_cnt_flag = true;
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <bat_can_data_handler+0x5f8>)
 80010be:	2201      	movs	r2, #1
 80010c0:	721a      	strb	r2, [r3, #8]
		break;
 80010c2:	e000      	b.n	80010c6 <bat_can_data_handler+0x5ee>
		break;
 80010c4:	bf00      	nop
}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000764 	.word	0x20000764

080010d4 <bat_charge_management>:

void bat_charge_management()
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
	uint8_t tx_data[8];
	memset(tx_data,0,8);
 80010da:	f107 0308 	add.w	r3, r7, #8
 80010de:	2208      	movs	r2, #8
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f003 fec6 	bl	8004e74 <memset>
	uint32_t errors;
	static uint16_t retry_cnt=0;

	if(TIM2->CNT > 2000)  //2S未接收到超时
 80010e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ee:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80010f2:	d914      	bls.n	800111e <bat_charge_management+0x4a>
	{
		TIM2->CNT=0;
 80010f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010f8:	2200      	movs	r2, #0
 80010fa:	625a      	str	r2, [r3, #36]	; 0x24
		chg_fsm = CHG_INIT;  //error
 80010fc:	4ba7      	ldr	r3, [pc, #668]	; (800139c <bat_charge_management+0x2c8>)
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]
		memset(&can_battery,0,sizeof(BatInfoTypeDef));
 8001102:	2288      	movs	r2, #136	; 0x88
 8001104:	2100      	movs	r1, #0
 8001106:	48a6      	ldr	r0, [pc, #664]	; (80013a0 <bat_charge_management+0x2cc>)
 8001108:	f003 feb4 	bl	8004e74 <memset>
		memset(&chg_flags,0,sizeof(ChargeFlagsTypeDef));
 800110c:	2209      	movs	r2, #9
 800110e:	2100      	movs	r1, #0
 8001110:	48a4      	ldr	r0, [pc, #656]	; (80013a4 <bat_charge_management+0x2d0>)
 8001112:	f003 feaf 	bl	8004e74 <memset>
		can_battery.connected_flag = false;
 8001116:	4ba2      	ldr	r3, [pc, #648]	; (80013a0 <bat_charge_management+0x2cc>)
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
	}

	switch(chg_fsm)
 800111e:	4b9f      	ldr	r3, [pc, #636]	; (800139c <bat_charge_management+0x2c8>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b0d      	cmp	r3, #13
 8001124:	f200 819c 	bhi.w	8001460 <bat_charge_management+0x38c>
 8001128:	a201      	add	r2, pc, #4	; (adr r2, 8001130 <bat_charge_management+0x5c>)
 800112a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800112e:	bf00      	nop
 8001130:	08001169 	.word	0x08001169
 8001134:	0800118b 	.word	0x0800118b
 8001138:	08001213 	.word	0x08001213
 800113c:	08001235 	.word	0x08001235
 8001140:	0800126f 	.word	0x0800126f
 8001144:	080012a1 	.word	0x080012a1
 8001148:	080012e3 	.word	0x080012e3
 800114c:	08001317 	.word	0x08001317
 8001150:	08001351 	.word	0x08001351
 8001154:	08001377 	.word	0x08001377
 8001158:	080013c1 	.word	0x080013c1
 800115c:	08001421 	.word	0x08001421
 8001160:	08001461 	.word	0x08001461
 8001164:	08001429 	.word	0x08001429
	{
	case CHG_INIT:

		memset(tx_data,0xFF,8);
 8001168:	f107 0308 	add.w	r3, r7, #8
 800116c:	2208      	movs	r2, #8
 800116e:	21ff      	movs	r1, #255	; 0xff
 8001170:	4618      	mov	r0, r3
 8001172:	f003 fe7f 	bl	8004e74 <memset>
		user_can_send_data(CBV, tx_data);
 8001176:	f107 0308 	add.w	r3, r7, #8
 800117a:	4619      	mov	r1, r3
 800117c:	488a      	ldr	r0, [pc, #552]	; (80013a8 <bat_charge_management+0x2d4>)
 800117e:	f7ff fb97 	bl	80008b0 <user_can_send_data>
		chg_fsm = CHG_CHECK_PAR;
 8001182:	4b86      	ldr	r3, [pc, #536]	; (800139c <bat_charge_management+0x2c8>)
 8001184:	2201      	movs	r2, #1
 8001186:	701a      	strb	r2, [r3, #0]
		break;
 8001188:	e16a      	b.n	8001460 <bat_charge_management+0x38c>
	case CHG_CHECK_PAR:
		if(can_battery.battery_code[0]>0 && can_battery.battery_soc<100)  //读到编码且未满电  can_battery.battery_soc>=0
 800118a:	4b85      	ldr	r3, [pc, #532]	; (80013a0 <bat_charge_management+0x2cc>)
 800118c:	7f1b      	ldrb	r3, [r3, #28]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d019      	beq.n	80011c6 <bat_charge_management+0xf2>
 8001192:	4b83      	ldr	r3, [pc, #524]	; (80013a0 <bat_charge_management+0x2cc>)
 8001194:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001198:	2b63      	cmp	r3, #99	; 0x63
 800119a:	d814      	bhi.n	80011c6 <bat_charge_management+0xf2>
		{
			can_battery.connected_flag = true;
 800119c:	4b80      	ldr	r3, [pc, #512]	; (80013a0 <bat_charge_management+0x2cc>)
 800119e:	2201      	movs	r2, #1
 80011a0:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 80011a4:	4b7e      	ldr	r3, [pc, #504]	; (80013a0 <bat_charge_management+0x2cc>)
 80011a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
			memcpy(&errors,can_battery.error_info.error,4);
 80011a8:	607b      	str	r3, [r7, #4]
			if(errors>0)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <bat_charge_management+0xe4>
			{
				chg_fsm = CHG_INIT;  //error
 80011b0:	4b7a      	ldr	r3, [pc, #488]	; (800139c <bat_charge_management+0x2c8>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]
 80011b6:	e002      	b.n	80011be <bat_charge_management+0xea>
			}
			else
			{

				chg_fsm = CHG_HANDSHAKE;
 80011b8:	4b78      	ldr	r3, [pc, #480]	; (800139c <bat_charge_management+0x2c8>)
 80011ba:	2202      	movs	r2, #2
 80011bc:	701a      	strb	r2, [r3, #0]
			}
			retry_cnt=0;
 80011be:	4b7b      	ldr	r3, [pc, #492]	; (80013ac <bat_charge_management+0x2d8>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	801a      	strh	r2, [r3, #0]
				chg_fsm = CHG_INIT;
					}
		}
		//memset(tx_data,)

		break;
 80011c4:	e141      	b.n	800144a <bat_charge_management+0x376>
		else if(can_battery.battery_soc == 100)
 80011c6:	4b76      	ldr	r3, [pc, #472]	; (80013a0 <bat_charge_management+0x2cc>)
 80011c8:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80011cc:	2b64      	cmp	r3, #100	; 0x64
 80011ce:	d107      	bne.n	80011e0 <bat_charge_management+0x10c>
			can_battery.connected_flag = true;
 80011d0:	4b73      	ldr	r3, [pc, #460]	; (80013a0 <bat_charge_management+0x2cc>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			chg_fsm = CHG_FINISH;
 80011d8:	4b70      	ldr	r3, [pc, #448]	; (800139c <bat_charge_management+0x2c8>)
 80011da:	220d      	movs	r2, #13
 80011dc:	701a      	strb	r2, [r3, #0]
		break;
 80011de:	e134      	b.n	800144a <bat_charge_management+0x376>
			chg_fsm = CHG_INIT;
 80011e0:	4b6e      	ldr	r3, [pc, #440]	; (800139c <bat_charge_management+0x2c8>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	701a      	strb	r2, [r3, #0]
			retry_cnt++;
 80011e6:	4b71      	ldr	r3, [pc, #452]	; (80013ac <bat_charge_management+0x2d8>)
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	3301      	adds	r3, #1
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	4b6f      	ldr	r3, [pc, #444]	; (80013ac <bat_charge_management+0x2d8>)
 80011f0:	801a      	strh	r2, [r3, #0]
			if(retry_cnt>10)  //电池未连接
 80011f2:	4b6e      	ldr	r3, [pc, #440]	; (80013ac <bat_charge_management+0x2d8>)
 80011f4:	881b      	ldrh	r3, [r3, #0]
 80011f6:	2b0a      	cmp	r3, #10
 80011f8:	f240 8127 	bls.w	800144a <bat_charge_management+0x376>
				retry_cnt = 10;
 80011fc:	4b6b      	ldr	r3, [pc, #428]	; (80013ac <bat_charge_management+0x2d8>)
 80011fe:	220a      	movs	r2, #10
 8001200:	801a      	strh	r2, [r3, #0]
				can_battery.connected_flag = false;
 8001202:	4b67      	ldr	r3, [pc, #412]	; (80013a0 <bat_charge_management+0x2cc>)
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
				chg_fsm = CHG_INIT;
 800120a:	4b64      	ldr	r3, [pc, #400]	; (800139c <bat_charge_management+0x2c8>)
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
		break;
 8001210:	e11b      	b.n	800144a <bat_charge_management+0x376>
	case CHG_HANDSHAKE:
		memset(tx_data,0,8);
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	2208      	movs	r2, #8
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f003 fe2a 	bl	8004e74 <memset>
		user_can_send_data(CHM, tx_data);
 8001220:	f107 0308 	add.w	r3, r7, #8
 8001224:	4619      	mov	r1, r3
 8001226:	4862      	ldr	r0, [pc, #392]	; (80013b0 <bat_charge_management+0x2dc>)
 8001228:	f7ff fb42 	bl	80008b0 <user_can_send_data>
		chg_fsm = CHG_WAIT_HANDSHAKE;
 800122c:	4b5b      	ldr	r3, [pc, #364]	; (800139c <bat_charge_management+0x2c8>)
 800122e:	2203      	movs	r2, #3
 8001230:	701a      	strb	r2, [r3, #0]
		break;
 8001232:	e115      	b.n	8001460 <bat_charge_management+0x38c>
	case CHG_WAIT_HANDSHAKE:
		if(chg_flags.handshake_flag)
 8001234:	4b5b      	ldr	r3, [pc, #364]	; (80013a4 <bat_charge_management+0x2d0>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <bat_charge_management+0x170>
		{
			chg_fsm = CHG_IDENTIFICATION;
 800123c:	4b57      	ldr	r3, [pc, #348]	; (800139c <bat_charge_management+0x2c8>)
 800123e:	2204      	movs	r2, #4
 8001240:	701a      	strb	r2, [r3, #0]
				retry_cnt = 0;
				chg_fsm = CHG_INIT;
			}
		}

		break;
 8001242:	e104      	b.n	800144e <bat_charge_management+0x37a>
			chg_fsm  = CHG_HANDSHAKE;
 8001244:	4b55      	ldr	r3, [pc, #340]	; (800139c <bat_charge_management+0x2c8>)
 8001246:	2202      	movs	r2, #2
 8001248:	701a      	strb	r2, [r3, #0]
			retry_cnt++;
 800124a:	4b58      	ldr	r3, [pc, #352]	; (80013ac <bat_charge_management+0x2d8>)
 800124c:	881b      	ldrh	r3, [r3, #0]
 800124e:	3301      	adds	r3, #1
 8001250:	b29a      	uxth	r2, r3
 8001252:	4b56      	ldr	r3, [pc, #344]	; (80013ac <bat_charge_management+0x2d8>)
 8001254:	801a      	strh	r2, [r3, #0]
			if(retry_cnt>50)
 8001256:	4b55      	ldr	r3, [pc, #340]	; (80013ac <bat_charge_management+0x2d8>)
 8001258:	881b      	ldrh	r3, [r3, #0]
 800125a:	2b32      	cmp	r3, #50	; 0x32
 800125c:	f240 80f7 	bls.w	800144e <bat_charge_management+0x37a>
				retry_cnt = 0;
 8001260:	4b52      	ldr	r3, [pc, #328]	; (80013ac <bat_charge_management+0x2d8>)
 8001262:	2200      	movs	r2, #0
 8001264:	801a      	strh	r2, [r3, #0]
				chg_fsm = CHG_INIT;
 8001266:	4b4d      	ldr	r3, [pc, #308]	; (800139c <bat_charge_management+0x2c8>)
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]
		break;
 800126c:	e0ef      	b.n	800144e <bat_charge_management+0x37a>
	case CHG_IDENTIFICATION:
		memset(tx_data,0xFF,8);
 800126e:	f107 0308 	add.w	r3, r7, #8
 8001272:	2208      	movs	r2, #8
 8001274:	21ff      	movs	r1, #255	; 0xff
 8001276:	4618      	mov	r0, r3
 8001278:	f003 fdfc 	bl	8004e74 <memset>
		//tx_data[0] =0;
		//user_can_send_data(CRM, tx_data);
		//HAL_Delay(250);
		tx_data[0] =0xAA;
 800127c:	23aa      	movs	r3, #170	; 0xaa
 800127e:	723b      	strb	r3, [r7, #8]
		user_can_send_data(CRM, tx_data);
 8001280:	f107 0308 	add.w	r3, r7, #8
 8001284:	4619      	mov	r1, r3
 8001286:	484b      	ldr	r0, [pc, #300]	; (80013b4 <bat_charge_management+0x2e0>)
 8001288:	f7ff fb12 	bl	80008b0 <user_can_send_data>
		user_can_send_data(CRM, tx_data);
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	4619      	mov	r1, r3
 8001292:	4848      	ldr	r0, [pc, #288]	; (80013b4 <bat_charge_management+0x2e0>)
 8001294:	f7ff fb0c 	bl	80008b0 <user_can_send_data>

		chg_fsm = CHG_WAIT_IDENTIFICATION;
 8001298:	4b40      	ldr	r3, [pc, #256]	; (800139c <bat_charge_management+0x2c8>)
 800129a:	2205      	movs	r2, #5
 800129c:	701a      	strb	r2, [r3, #0]
		break;
 800129e:	e0df      	b.n	8001460 <bat_charge_management+0x38c>
	case CHG_WAIT_IDENTIFICATION:
		if(chg_flags.identification_flag && chg_flags.bat_chg_parameter)
 80012a0:	4b40      	ldr	r3, [pc, #256]	; (80013a4 <bat_charge_management+0x2d0>)
 80012a2:	785b      	ldrb	r3, [r3, #1]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d007      	beq.n	80012b8 <bat_charge_management+0x1e4>
 80012a8:	4b3e      	ldr	r3, [pc, #248]	; (80013a4 <bat_charge_management+0x2d0>)
 80012aa:	789b      	ldrb	r3, [r3, #2]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <bat_charge_management+0x1e4>
		{
			chg_fsm = CHG_MAX_OUTPUT;
 80012b0:	4b3a      	ldr	r3, [pc, #232]	; (800139c <bat_charge_management+0x2c8>)
 80012b2:	2206      	movs	r2, #6
 80012b4:	701a      	strb	r2, [r3, #0]
			{
				retry_cnt = 0;
				chg_fsm = CHG_INIT;
			}
		}
		break;
 80012b6:	e0cc      	b.n	8001452 <bat_charge_management+0x37e>
			chg_fsm = CHG_IDENTIFICATION;
 80012b8:	4b38      	ldr	r3, [pc, #224]	; (800139c <bat_charge_management+0x2c8>)
 80012ba:	2204      	movs	r2, #4
 80012bc:	701a      	strb	r2, [r3, #0]
			retry_cnt++;
 80012be:	4b3b      	ldr	r3, [pc, #236]	; (80013ac <bat_charge_management+0x2d8>)
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	3301      	adds	r3, #1
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	4b39      	ldr	r3, [pc, #228]	; (80013ac <bat_charge_management+0x2d8>)
 80012c8:	801a      	strh	r2, [r3, #0]
			if(retry_cnt>10)
 80012ca:	4b38      	ldr	r3, [pc, #224]	; (80013ac <bat_charge_management+0x2d8>)
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	2b0a      	cmp	r3, #10
 80012d0:	f240 80bf 	bls.w	8001452 <bat_charge_management+0x37e>
				retry_cnt = 0;
 80012d4:	4b35      	ldr	r3, [pc, #212]	; (80013ac <bat_charge_management+0x2d8>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	801a      	strh	r2, [r3, #0]
				chg_fsm = CHG_INIT;
 80012da:	4b30      	ldr	r3, [pc, #192]	; (800139c <bat_charge_management+0x2c8>)
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
		break;
 80012e0:	e0b7      	b.n	8001452 <bat_charge_management+0x37e>
	case CHG_MAX_OUTPUT:
		tx_data[0] = 0x70;tx_data[1] = 0x17;
 80012e2:	2370      	movs	r3, #112	; 0x70
 80012e4:	723b      	strb	r3, [r7, #8]
 80012e6:	2317      	movs	r3, #23
 80012e8:	727b      	strb	r3, [r7, #9]
		tx_data[2] = 0xC0;tx_data[3] = 0x12;
 80012ea:	23c0      	movs	r3, #192	; 0xc0
 80012ec:	72bb      	strb	r3, [r7, #10]
 80012ee:	2312      	movs	r3, #18
 80012f0:	72fb      	strb	r3, [r7, #11]
		tx_data[4] = 0x08;tx_data[5] = 0x3E;
 80012f2:	2308      	movs	r3, #8
 80012f4:	733b      	strb	r3, [r7, #12]
 80012f6:	233e      	movs	r3, #62	; 0x3e
 80012f8:	737b      	strb	r3, [r7, #13]
		tx_data[6] = 0x0;tx_data[7] = 0x0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	73bb      	strb	r3, [r7, #14]
 80012fe:	2300      	movs	r3, #0
 8001300:	73fb      	strb	r3, [r7, #15]
		//memset(tx_data,0x00,8);
		user_can_send_data(CML, tx_data);
 8001302:	f107 0308 	add.w	r3, r7, #8
 8001306:	4619      	mov	r1, r3
 8001308:	482b      	ldr	r0, [pc, #172]	; (80013b8 <bat_charge_management+0x2e4>)
 800130a:	f7ff fad1 	bl	80008b0 <user_can_send_data>
		chg_fsm = CHG_WAIT_MAX_OUTPUT;
 800130e:	4b23      	ldr	r3, [pc, #140]	; (800139c <bat_charge_management+0x2c8>)
 8001310:	2207      	movs	r2, #7
 8001312:	701a      	strb	r2, [r3, #0]
		break;
 8001314:	e0a4      	b.n	8001460 <bat_charge_management+0x38c>
	case CHG_WAIT_MAX_OUTPUT:
		if(chg_flags.bat_ready_flag)
 8001316:	4b23      	ldr	r3, [pc, #140]	; (80013a4 <bat_charge_management+0x2d0>)
 8001318:	78db      	ldrb	r3, [r3, #3]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <bat_charge_management+0x252>
			//if(1)
		{
			chg_fsm = CHG_READY;
 800131e:	4b1f      	ldr	r3, [pc, #124]	; (800139c <bat_charge_management+0x2c8>)
 8001320:	2208      	movs	r2, #8
 8001322:	701a      	strb	r2, [r3, #0]
			{
				retry_cnt = 0;
				chg_fsm = CHG_INIT;
			}
		}
		break;
 8001324:	e097      	b.n	8001456 <bat_charge_management+0x382>
			chg_fsm = CHG_MAX_OUTPUT;
 8001326:	4b1d      	ldr	r3, [pc, #116]	; (800139c <bat_charge_management+0x2c8>)
 8001328:	2206      	movs	r2, #6
 800132a:	701a      	strb	r2, [r3, #0]
			retry_cnt++;
 800132c:	4b1f      	ldr	r3, [pc, #124]	; (80013ac <bat_charge_management+0x2d8>)
 800132e:	881b      	ldrh	r3, [r3, #0]
 8001330:	3301      	adds	r3, #1
 8001332:	b29a      	uxth	r2, r3
 8001334:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <bat_charge_management+0x2d8>)
 8001336:	801a      	strh	r2, [r3, #0]
			if(retry_cnt>10)
 8001338:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <bat_charge_management+0x2d8>)
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	2b0a      	cmp	r3, #10
 800133e:	f240 808a 	bls.w	8001456 <bat_charge_management+0x382>
				retry_cnt = 0;
 8001342:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <bat_charge_management+0x2d8>)
 8001344:	2200      	movs	r2, #0
 8001346:	801a      	strh	r2, [r3, #0]
				chg_fsm = CHG_INIT;
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <bat_charge_management+0x2c8>)
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]
		break;
 800134e:	e082      	b.n	8001456 <bat_charge_management+0x382>
	case CHG_READY:
		//if(chg_flags.cabibet_ready_flag)
		if(1)
		{
			memset(tx_data,0xFF,8);
 8001350:	f107 0308 	add.w	r3, r7, #8
 8001354:	2208      	movs	r2, #8
 8001356:	21ff      	movs	r1, #255	; 0xff
 8001358:	4618      	mov	r0, r3
 800135a:	f003 fd8b 	bl	8004e74 <memset>
			tx_data[0] = 0xAA;
 800135e:	23aa      	movs	r3, #170	; 0xaa
 8001360:	723b      	strb	r3, [r7, #8]
			user_can_send_data(CRO, tx_data);
 8001362:	f107 0308 	add.w	r3, r7, #8
 8001366:	4619      	mov	r1, r3
 8001368:	4814      	ldr	r0, [pc, #80]	; (80013bc <bat_charge_management+0x2e8>)
 800136a:	f7ff faa1 	bl	80008b0 <user_can_send_data>
			chg_fsm = CHG_WAIT_READY;
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <bat_charge_management+0x2c8>)
 8001370:	2209      	movs	r2, #9
 8001372:	701a      	strb	r2, [r3, #0]
			{
				retry_cnt = 0;
				chg_fsm = CHG_INIT;
			}
		}
		break;
 8001374:	e074      	b.n	8001460 <bat_charge_management+0x38c>
	case CHG_WAIT_READY:
		if(chg_flags.chg_demand_flag && chg_flags.chg_status_flag)
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <bat_charge_management+0x2d0>)
 8001378:	795b      	ldrb	r3, [r3, #5]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d006      	beq.n	800138c <bat_charge_management+0x2b8>
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <bat_charge_management+0x2d0>)
 8001380:	799b      	ldrb	r3, [r3, #6]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d002      	beq.n	800138c <bat_charge_management+0x2b8>
		{
			chg_fsm = CHG_ING;
 8001386:	4b05      	ldr	r3, [pc, #20]	; (800139c <bat_charge_management+0x2c8>)
 8001388:	220a      	movs	r2, #10
 800138a:	701a      	strb	r2, [r3, #0]
		}
		if(chg_flags.chg_bms_stop_flag)
 800138c:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <bat_charge_management+0x2d0>)
 800138e:	79db      	ldrb	r3, [r3, #7]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d062      	beq.n	800145a <bat_charge_management+0x386>
		{
			chg_fsm = CHG_INIT;
 8001394:	4b01      	ldr	r3, [pc, #4]	; (800139c <bat_charge_management+0x2c8>)
 8001396:	2200      	movs	r2, #0
 8001398:	701a      	strb	r2, [r3, #0]
		}
		break;
 800139a:	e05e      	b.n	800145a <bat_charge_management+0x386>
 800139c:	20000211 	.word	0x20000211
 80013a0:	20000770 	.word	0x20000770
 80013a4:	20000764 	.word	0x20000764
 80013a8:	18fc0908 	.word	0x18fc0908
 80013ac:	20000214 	.word	0x20000214
 80013b0:	18310908 	.word	0x18310908
 80013b4:	18330908 	.word	0x18330908
 80013b8:	18360908 	.word	0x18360908
 80013bc:	10380908 	.word	0x10380908
	case CHG_ING:
		//    	tx_data[0] = 0x38;tx_data[1] = 0x15;
		//    	tx_data[2] = 0xE8;tx_data[3] = 0x03;
		memset(tx_data,0,8);
 80013c0:	f107 0308 	add.w	r3, r7, #8
 80013c4:	2208      	movs	r2, #8
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f003 fd53 	bl	8004e74 <memset>
		user_can_send_data(CCS, tx_data);
 80013ce:	f107 0308 	add.w	r3, r7, #8
 80013d2:	4619      	mov	r1, r3
 80013d4:	4824      	ldr	r0, [pc, #144]	; (8001468 <bat_charge_management+0x394>)
 80013d6:	f7ff fa6b 	bl	80008b0 <user_can_send_data>
		user_can_send_data(CCS, tx_data);
 80013da:	f107 0308 	add.w	r3, r7, #8
 80013de:	4619      	mov	r1, r3
 80013e0:	4821      	ldr	r0, [pc, #132]	; (8001468 <bat_charge_management+0x394>)
 80013e2:	f7ff fa65 	bl	80008b0 <user_can_send_data>
		user_can_send_data(CBV, tx_data);
 80013e6:	f107 0308 	add.w	r3, r7, #8
 80013ea:	4619      	mov	r1, r3
 80013ec:	481f      	ldr	r0, [pc, #124]	; (800146c <bat_charge_management+0x398>)
 80013ee:	f7ff fa5f 	bl	80008b0 <user_can_send_data>
		user_can_send_data(CCS, tx_data);
 80013f2:	f107 0308 	add.w	r3, r7, #8
 80013f6:	4619      	mov	r1, r3
 80013f8:	481b      	ldr	r0, [pc, #108]	; (8001468 <bat_charge_management+0x394>)
 80013fa:	f7ff fa59 	bl	80008b0 <user_can_send_data>
		//user_can_send_data(CCS, tx_data);
		//user_can_send_data(CCS, tx_data);
	//	user_can_send_data(CBV, tx_data);
		user_can_send_data(CBV, tx_data);
 80013fe:	f107 0308 	add.w	r3, r7, #8
 8001402:	4619      	mov	r1, r3
 8001404:	4819      	ldr	r0, [pc, #100]	; (800146c <bat_charge_management+0x398>)
 8001406:	f7ff fa53 	bl	80008b0 <user_can_send_data>
		chg_fsm = CHG_WAIT_READY;
 800140a:	4b19      	ldr	r3, [pc, #100]	; (8001470 <bat_charge_management+0x39c>)
 800140c:	2209      	movs	r2, #9
 800140e:	701a      	strb	r2, [r3, #0]
		if(chg_flags.chg_bms_stop_flag)
 8001410:	4b18      	ldr	r3, [pc, #96]	; (8001474 <bat_charge_management+0x3a0>)
 8001412:	79db      	ldrb	r3, [r3, #7]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d022      	beq.n	800145e <bat_charge_management+0x38a>
		{
			chg_fsm = CHG_STOP;
 8001418:	4b15      	ldr	r3, [pc, #84]	; (8001470 <bat_charge_management+0x39c>)
 800141a:	220b      	movs	r2, #11
 800141c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800141e:	e01e      	b.n	800145e <bat_charge_management+0x38a>
	case CHG_STOP:
		chg_fsm = CHG_FINISH;
 8001420:	4b13      	ldr	r3, [pc, #76]	; (8001470 <bat_charge_management+0x39c>)
 8001422:	220d      	movs	r2, #13
 8001424:	701a      	strb	r2, [r3, #0]

		break;
 8001426:	e01b      	b.n	8001460 <bat_charge_management+0x38c>
	case CHG_FINISH:
		memset(tx_data,0xFF,8);
 8001428:	f107 0308 	add.w	r3, r7, #8
 800142c:	2208      	movs	r2, #8
 800142e:	21ff      	movs	r1, #255	; 0xff
 8001430:	4618      	mov	r0, r3
 8001432:	f003 fd1f 	bl	8004e74 <memset>
		user_can_send_data(CBV, tx_data);
 8001436:	f107 0308 	add.w	r3, r7, #8
 800143a:	4619      	mov	r1, r3
 800143c:	480b      	ldr	r0, [pc, #44]	; (800146c <bat_charge_management+0x398>)
 800143e:	f7ff fa37 	bl	80008b0 <user_can_send_data>
		chg_fsm = CHG_CHECK_PAR;
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <bat_charge_management+0x39c>)
 8001444:	2201      	movs	r2, #1
 8001446:	701a      	strb	r2, [r3, #0]
		break;
 8001448:	e00a      	b.n	8001460 <bat_charge_management+0x38c>
		break;
 800144a:	bf00      	nop
 800144c:	e008      	b.n	8001460 <bat_charge_management+0x38c>
		break;
 800144e:	bf00      	nop
 8001450:	e006      	b.n	8001460 <bat_charge_management+0x38c>
		break;
 8001452:	bf00      	nop
 8001454:	e004      	b.n	8001460 <bat_charge_management+0x38c>
		break;
 8001456:	bf00      	nop
 8001458:	e002      	b.n	8001460 <bat_charge_management+0x38c>
		break;
 800145a:	bf00      	nop
 800145c:	e000      	b.n	8001460 <bat_charge_management+0x38c>
		break;
 800145e:	bf00      	nop
	//	{
	//
	//	}


}
 8001460:	bf00      	nop
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	183b0908 	.word	0x183b0908
 800146c:	18fc0908 	.word	0x18fc0908
 8001470:	20000211 	.word	0x20000211
 8001474:	20000764 	.word	0x20000764

08001478 <check_sum_head>:

	return 0;
}

int8_t check_sum_head(uint8_t  *data , uint8_t lenth)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	70fb      	strb	r3, [r7, #3]
	uint16_t sum=0;
 8001484:	2300      	movs	r3, #0
 8001486:	81fb      	strh	r3, [r7, #14]
	if(data[0] != 0x46 || data[1] != 0x16 )
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b46      	cmp	r3, #70	; 0x46
 800148e:	d104      	bne.n	800149a <check_sum_head+0x22>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3301      	adds	r3, #1
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b16      	cmp	r3, #22
 8001498:	d001      	beq.n	800149e <check_sum_head+0x26>
	{
		return 0;
 800149a:	2300      	movs	r3, #0
 800149c:	e01e      	b.n	80014dc <check_sum_head+0x64>
	}
	for(uint8_t  i=0;i<lenth-1;i++)
 800149e:	2300      	movs	r3, #0
 80014a0:	737b      	strb	r3, [r7, #13]
 80014a2:	e00a      	b.n	80014ba <check_sum_head+0x42>
	{
		sum+=data[i];
 80014a4:	7b7b      	ldrb	r3, [r7, #13]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	89fb      	ldrh	r3, [r7, #14]
 80014b0:	4413      	add	r3, r2
 80014b2:	81fb      	strh	r3, [r7, #14]
	for(uint8_t  i=0;i<lenth-1;i++)
 80014b4:	7b7b      	ldrb	r3, [r7, #13]
 80014b6:	3301      	adds	r3, #1
 80014b8:	737b      	strb	r3, [r7, #13]
 80014ba:	7b7a      	ldrb	r2, [r7, #13]
 80014bc:	78fb      	ldrb	r3, [r7, #3]
 80014be:	3b01      	subs	r3, #1
 80014c0:	429a      	cmp	r2, r3
 80014c2:	dbef      	blt.n	80014a4 <check_sum_head+0x2c>

	}
	if((uint8_t)sum == data[lenth-1])
 80014c4:	89fb      	ldrh	r3, [r7, #14]
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	78fb      	ldrb	r3, [r7, #3]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	6879      	ldr	r1, [r7, #4]
 80014ce:	440b      	add	r3, r1
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d101      	bne.n	80014da <check_sum_head+0x62>
	{
		return 1;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e000      	b.n	80014dc <check_sum_head+0x64>
	}

	return 0;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
	...

080014e8 <signal_wire_read_handler>:
	return (uint8_t)sum;
}


void signal_wire_read_handler()
{
 80014e8:	b5b0      	push	{r4, r5, r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
	uint8_t *P;
	uint16_t lenth;
	int32_t temp_value;
	if(signal_wire_huart_module.rec_flag)
 80014ee:	4bbc      	ldr	r3, [pc, #752]	; (80017e0 <signal_wire_read_handler+0x2f8>)
 80014f0:	7a1b      	ldrb	r3, [r3, #8]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f000 8170 	beq.w	80017d8 <signal_wire_read_handler+0x2f0>
	{
		uart_module_stop_receive(&signal_wire_huart_module);
 80014f8:	48b9      	ldr	r0, [pc, #740]	; (80017e0 <signal_wire_read_handler+0x2f8>)
 80014fa:	f7ff facb 	bl	8000a94 <uart_module_stop_receive>
		signal_wire_huart_module.rec_flag = 0;
 80014fe:	4bb8      	ldr	r3, [pc, #736]	; (80017e0 <signal_wire_read_handler+0x2f8>)
 8001500:	2200      	movs	r2, #0
 8001502:	721a      	strb	r2, [r3, #8]
		//process
		P = signal_wire_huart_module.uart_module_receive_buffer;
 8001504:	4bb7      	ldr	r3, [pc, #732]	; (80017e4 <signal_wire_read_handler+0x2fc>)
 8001506:	60fb      	str	r3, [r7, #12]
		lenth = signal_wire_huart_module.rec_lenth;
 8001508:	4bb5      	ldr	r3, [pc, #724]	; (80017e0 <signal_wire_read_handler+0x2f8>)
 800150a:	895b      	ldrh	r3, [r3, #10]
 800150c:	817b      	strh	r3, [r7, #10]

		if(can_battery.connected_flag)
 800150e:	4bb6      	ldr	r3, [pc, #728]	; (80017e8 <signal_wire_read_handler+0x300>)
 8001510:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8001514:	2b00      	cmp	r3, #0
 8001516:	f000 8156 	beq.w	80017c6 <signal_wire_read_handler+0x2de>
		{
			if(check_sum_head(P, lenth))  //
 800151a:	897b      	ldrh	r3, [r7, #10]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	4619      	mov	r1, r3
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f7ff ffa9 	bl	8001478 <check_sum_head>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 814c 	beq.w	80017c6 <signal_wire_read_handler+0x2de>
			{
				//uart_module_send_hex(P, lenth);
				if(P[2] == 0x01)  //读取指令
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	3302      	adds	r3, #2
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b01      	cmp	r3, #1
 8001536:	f040 8135 	bne.w	80017a4 <signal_wire_read_handler+0x2bc>
				{
					switch(P[3])
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	3303      	adds	r3, #3
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b26      	cmp	r3, #38	; 0x26
 8001542:	dc57      	bgt.n	80015f4 <signal_wire_read_handler+0x10c>
 8001544:	2b00      	cmp	r3, #0
 8001546:	f2c0 813e 	blt.w	80017c6 <signal_wire_read_handler+0x2de>
 800154a:	2b26      	cmp	r3, #38	; 0x26
 800154c:	f200 813b 	bhi.w	80017c6 <signal_wire_read_handler+0x2de>
 8001550:	a201      	add	r2, pc, #4	; (adr r2, 8001558 <signal_wire_read_handler+0x70>)
 8001552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001556:	bf00      	nop
 8001558:	080015fb 	.word	0x080015fb
 800155c:	080017c7 	.word	0x080017c7
 8001560:	080017c7 	.word	0x080017c7
 8001564:	080017c7 	.word	0x080017c7
 8001568:	080017c7 	.word	0x080017c7
 800156c:	080017c7 	.word	0x080017c7
 8001570:	080017c7 	.word	0x080017c7
 8001574:	080017c7 	.word	0x080017c7
 8001578:	080017c7 	.word	0x080017c7
 800157c:	080017c7 	.word	0x080017c7
 8001580:	080017c7 	.word	0x080017c7
 8001584:	080017c7 	.word	0x080017c7
 8001588:	080017c7 	.word	0x080017c7
 800158c:	080017c7 	.word	0x080017c7
 8001590:	080017c7 	.word	0x080017c7
 8001594:	08001605 	.word	0x08001605
 8001598:	080017c7 	.word	0x080017c7
 800159c:	080017c7 	.word	0x080017c7
 80015a0:	080017c7 	.word	0x080017c7
 80015a4:	080017c7 	.word	0x080017c7
 80015a8:	080017c7 	.word	0x080017c7
 80015ac:	080017c7 	.word	0x080017c7
 80015b0:	080017c7 	.word	0x080017c7
 80015b4:	080017c7 	.word	0x080017c7
 80015b8:	08001633 	.word	0x08001633
 80015bc:	080017c7 	.word	0x080017c7
 80015c0:	080017c7 	.word	0x080017c7
 80015c4:	080017c7 	.word	0x080017c7
 80015c8:	080017c7 	.word	0x080017c7
 80015cc:	080017c7 	.word	0x080017c7
 80015d0:	080017c7 	.word	0x080017c7
 80015d4:	080017c7 	.word	0x080017c7
 80015d8:	080017c7 	.word	0x080017c7
 80015dc:	080017c7 	.word	0x080017c7
 80015e0:	080017c7 	.word	0x080017c7
 80015e4:	0800166b 	.word	0x0800166b
 80015e8:	080016a5 	.word	0x080016a5
 80015ec:	080017c7 	.word	0x080017c7
 80015f0:	080016cb 	.word	0x080016cb
 80015f4:	2ba0      	cmp	r3, #160	; 0xa0
 80015f6:	d07f      	beq.n	80016f8 <signal_wire_read_handler+0x210>
 80015f8:	e0e5      	b.n	80017c6 <signal_wire_read_handler+0x2de>
					{
					case 0x00:  //综合信息
						uart_module_send_hex(cmd_00, sizeof(cmd_00));
 80015fa:	210a      	movs	r1, #10
 80015fc:	487b      	ldr	r0, [pc, #492]	; (80017ec <signal_wire_read_handler+0x304>)
 80015fe:	f7ff fa2d 	bl	8000a5c <uart_module_send_hex>
						break;
 8001602:	e0e0      	b.n	80017c6 <signal_wire_read_handler+0x2de>
 8001604:	4b78      	ldr	r3, [pc, #480]	; (80017e8 <signal_wire_read_handler+0x300>)
 8001606:	685b      	ldr	r3, [r3, #4]
					case 0x0F:
						memcpy(&cmd_0F[5],&can_battery.current_capacity,4);
 8001608:	4a79      	ldr	r2, [pc, #484]	; (80017f0 <signal_wire_read_handler+0x308>)
 800160a:	f8c2 3005 	str.w	r3, [r2, #5]
 800160e:	4b76      	ldr	r3, [pc, #472]	; (80017e8 <signal_wire_read_handler+0x300>)
 8001610:	689b      	ldr	r3, [r3, #8]
						memcpy(&cmd_0F[9],&can_battery.full_capacity,4);
 8001612:	4a77      	ldr	r2, [pc, #476]	; (80017f0 <signal_wire_read_handler+0x308>)
 8001614:	f8c2 3009 	str.w	r3, [r2, #9]
						cmd_0F[13] = getCheckSum(cmd_0F, 13);
 8001618:	210d      	movs	r1, #13
 800161a:	4875      	ldr	r0, [pc, #468]	; (80017f0 <signal_wire_read_handler+0x308>)
 800161c:	f7ff f970 	bl	8000900 <getCheckSum>
 8001620:	4603      	mov	r3, r0
 8001622:	461a      	mov	r2, r3
 8001624:	4b72      	ldr	r3, [pc, #456]	; (80017f0 <signal_wire_read_handler+0x308>)
 8001626:	735a      	strb	r2, [r3, #13]
						uart_module_send_hex(cmd_0F, sizeof(cmd_0F));
 8001628:	210e      	movs	r1, #14
 800162a:	4871      	ldr	r0, [pc, #452]	; (80017f0 <signal_wire_read_handler+0x308>)
 800162c:	f7ff fa16 	bl	8000a5c <uart_module_send_hex>
						break;
 8001630:	e0c9      	b.n	80017c6 <signal_wire_read_handler+0x2de>
 8001632:	4b6d      	ldr	r3, [pc, #436]	; (80017e8 <signal_wire_read_handler+0x300>)
 8001634:	68db      	ldr	r3, [r3, #12]
					case 0x18:  //设计容量 设计电压 版本
						memcpy(&cmd_18[5],&can_battery.design_capacity,4);
 8001636:	4a6f      	ldr	r2, [pc, #444]	; (80017f4 <signal_wire_read_handler+0x30c>)
 8001638:	f8c2 3005 	str.w	r3, [r2, #5]
 800163c:	4b6a      	ldr	r3, [pc, #424]	; (80017e8 <signal_wire_read_handler+0x300>)
 800163e:	691b      	ldr	r3, [r3, #16]
						memcpy(&cmd_18[9],&can_battery.design_voltage,4);
 8001640:	4a6c      	ldr	r2, [pc, #432]	; (80017f4 <signal_wire_read_handler+0x30c>)
 8001642:	f8c2 3009 	str.w	r3, [r2, #9]
						memcpy(&cmd_18[13],&can_battery.version_info,8);
 8001646:	2208      	movs	r2, #8
 8001648:	496b      	ldr	r1, [pc, #428]	; (80017f8 <signal_wire_read_handler+0x310>)
 800164a:	486c      	ldr	r0, [pc, #432]	; (80017fc <signal_wire_read_handler+0x314>)
 800164c:	f003 fc04 	bl	8004e58 <memcpy>
						cmd_18[21] = getCheckSum(cmd_18, 21);
 8001650:	2115      	movs	r1, #21
 8001652:	4868      	ldr	r0, [pc, #416]	; (80017f4 <signal_wire_read_handler+0x30c>)
 8001654:	f7ff f954 	bl	8000900 <getCheckSum>
 8001658:	4603      	mov	r3, r0
 800165a:	461a      	mov	r2, r3
 800165c:	4b65      	ldr	r3, [pc, #404]	; (80017f4 <signal_wire_read_handler+0x30c>)
 800165e:	755a      	strb	r2, [r3, #21]
						uart_module_send_hex(cmd_18, sizeof(cmd_18));
 8001660:	2116      	movs	r1, #22
 8001662:	4864      	ldr	r0, [pc, #400]	; (80017f4 <signal_wire_read_handler+0x30c>)
 8001664:	f7ff f9fa 	bl	8000a5c <uart_module_send_hex>
						break;
 8001668:	e0ad      	b.n	80017c6 <signal_wire_read_handler+0x2de>
					case 0x23:  //电池编码
						memcpy(&cmd_23[5],can_battery.battery_code,32);
 800166a:	4a65      	ldr	r2, [pc, #404]	; (8001800 <signal_wire_read_handler+0x318>)
 800166c:	4b5e      	ldr	r3, [pc, #376]	; (80017e8 <signal_wire_read_handler+0x300>)
 800166e:	1d54      	adds	r4, r2, #5
 8001670:	f103 051c 	add.w	r5, r3, #28
 8001674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001676:	6020      	str	r0, [r4, #0]
 8001678:	6061      	str	r1, [r4, #4]
 800167a:	60a2      	str	r2, [r4, #8]
 800167c:	60e3      	str	r3, [r4, #12]
 800167e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001680:	6120      	str	r0, [r4, #16]
 8001682:	6161      	str	r1, [r4, #20]
 8001684:	61a2      	str	r2, [r4, #24]
 8001686:	61e3      	str	r3, [r4, #28]
						cmd_23[37] = getCheckSum(cmd_23, 37);
 8001688:	2125      	movs	r1, #37	; 0x25
 800168a:	485d      	ldr	r0, [pc, #372]	; (8001800 <signal_wire_read_handler+0x318>)
 800168c:	f7ff f938 	bl	8000900 <getCheckSum>
 8001690:	4603      	mov	r3, r0
 8001692:	461a      	mov	r2, r3
 8001694:	4b5a      	ldr	r3, [pc, #360]	; (8001800 <signal_wire_read_handler+0x318>)
 8001696:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
						uart_module_send_hex(cmd_23, sizeof(cmd_23));
 800169a:	2126      	movs	r1, #38	; 0x26
 800169c:	4858      	ldr	r0, [pc, #352]	; (8001800 <signal_wire_read_handler+0x318>)
 800169e:	f7ff f9dd 	bl	8000a5c <uart_module_send_hex>
						break;
 80016a2:	e090      	b.n	80017c6 <signal_wire_read_handler+0x2de>
					case 0x24:  //单体电芯电压
						memcpy(&cmd_24[5],&can_battery.cell_voltage[0],32);
 80016a4:	2220      	movs	r2, #32
 80016a6:	4957      	ldr	r1, [pc, #348]	; (8001804 <signal_wire_read_handler+0x31c>)
 80016a8:	4857      	ldr	r0, [pc, #348]	; (8001808 <signal_wire_read_handler+0x320>)
 80016aa:	f003 fbd5 	bl	8004e58 <memcpy>
						cmd_24[45] = getCheckSum(cmd_24, 45);
 80016ae:	212d      	movs	r1, #45	; 0x2d
 80016b0:	4856      	ldr	r0, [pc, #344]	; (800180c <signal_wire_read_handler+0x324>)
 80016b2:	f7ff f925 	bl	8000900 <getCheckSum>
 80016b6:	4603      	mov	r3, r0
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b54      	ldr	r3, [pc, #336]	; (800180c <signal_wire_read_handler+0x324>)
 80016bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
						uart_module_send_hex(cmd_24, sizeof(cmd_24));
 80016c0:	212e      	movs	r1, #46	; 0x2e
 80016c2:	4852      	ldr	r0, [pc, #328]	; (800180c <signal_wire_read_handler+0x324>)
 80016c4:	f7ff f9ca 	bl	8000a5c <uart_module_send_hex>
						break;
 80016c8:	e07d      	b.n	80017c6 <signal_wire_read_handler+0x2de>
 80016ca:	4b47      	ldr	r3, [pc, #284]	; (80017e8 <signal_wire_read_handler+0x300>)
 80016cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
					case 0x26:  //电池最值记录
						memcpy(&cmd_26[5],&can_battery.max_value.max_discharge_current,4);
 80016ce:	4a50      	ldr	r2, [pc, #320]	; (8001810 <signal_wire_read_handler+0x328>)
 80016d0:	f8c2 3005 	str.w	r3, [r2, #5]
 80016d4:	4b44      	ldr	r3, [pc, #272]	; (80017e8 <signal_wire_read_handler+0x300>)
 80016d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
						memcpy(&cmd_26[9],&can_battery.max_value.max_charge_current,4);
 80016d8:	4a4d      	ldr	r2, [pc, #308]	; (8001810 <signal_wire_read_handler+0x328>)
 80016da:	f8c2 3009 	str.w	r3, [r2, #9]
						cmd_26[19] = getCheckSum(cmd_26, 19);
 80016de:	2113      	movs	r1, #19
 80016e0:	484b      	ldr	r0, [pc, #300]	; (8001810 <signal_wire_read_handler+0x328>)
 80016e2:	f7ff f90d 	bl	8000900 <getCheckSum>
 80016e6:	4603      	mov	r3, r0
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b49      	ldr	r3, [pc, #292]	; (8001810 <signal_wire_read_handler+0x328>)
 80016ec:	74da      	strb	r2, [r3, #19]
						uart_module_send_hex(cmd_26, sizeof(cmd_26));
 80016ee:	2114      	movs	r1, #20
 80016f0:	4847      	ldr	r0, [pc, #284]	; (8001810 <signal_wire_read_handler+0x328>)
 80016f2:	f7ff f9b3 	bl	8000a5c <uart_module_send_hex>
						break;
 80016f6:	e066      	b.n	80017c6 <signal_wire_read_handler+0x2de>
					case 0xA0:  //电池内部状态
						if(P[4] == 0x01)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	3304      	adds	r3, #4
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d104      	bne.n	800170c <signal_wire_read_handler+0x224>
						{
							uart_module_send_hex(cmd_A0_1, sizeof(cmd_A0_1));
 8001702:	2107      	movs	r1, #7
 8001704:	4843      	ldr	r0, [pc, #268]	; (8001814 <signal_wire_read_handler+0x32c>)
 8001706:	f7ff f9a9 	bl	8000a5c <uart_module_send_hex>
							cmd_A0[26] = can_battery.mosfet_tmp;
							memcpy(&cmd_A0[29],&can_battery.cycle_counter,2);
							cmd_A0[31] = getCheckSum(cmd_A0, 31);
							uart_module_send_hex(cmd_A0, sizeof(cmd_A0));
						}
						break;
 800170a:	e05c      	b.n	80017c6 <signal_wire_read_handler+0x2de>
							memcpy(&cmd_A0[7],can_battery.error_info.error,6);
 800170c:	4b42      	ldr	r3, [pc, #264]	; (8001818 <signal_wire_read_handler+0x330>)
 800170e:	4a36      	ldr	r2, [pc, #216]	; (80017e8 <signal_wire_read_handler+0x300>)
 8001710:	3307      	adds	r3, #7
 8001712:	326c      	adds	r2, #108	; 0x6c
 8001714:	6810      	ldr	r0, [r2, #0]
 8001716:	6018      	str	r0, [r3, #0]
 8001718:	8892      	ldrh	r2, [r2, #4]
 800171a:	809a      	strh	r2, [r3, #4]
							cmd_A0[13] = can_battery.battery_soc;
 800171c:	4b32      	ldr	r3, [pc, #200]	; (80017e8 <signal_wire_read_handler+0x300>)
 800171e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8001722:	4b3d      	ldr	r3, [pc, #244]	; (8001818 <signal_wire_read_handler+0x330>)
 8001724:	735a      	strb	r2, [r3, #13]
							cmd_A0[14] = can_battery.battery_soh;
 8001726:	4b30      	ldr	r3, [pc, #192]	; (80017e8 <signal_wire_read_handler+0x300>)
 8001728:	f893 2077 	ldrb.w	r2, [r3, #119]	; 0x77
 800172c:	4b3a      	ldr	r3, [pc, #232]	; (8001818 <signal_wire_read_handler+0x330>)
 800172e:	739a      	strb	r2, [r3, #14]
 8001730:	4b2d      	ldr	r3, [pc, #180]	; (80017e8 <signal_wire_read_handler+0x300>)
 8001732:	6f9b      	ldr	r3, [r3, #120]	; 0x78
							memcpy(&cmd_A0[15],&can_battery.pack_voltage,4);
 8001734:	4a38      	ldr	r2, [pc, #224]	; (8001818 <signal_wire_read_handler+0x330>)
 8001736:	f8c2 300f 	str.w	r3, [r2, #15]
							temp_value = abs(can_battery.real_time_current);
 800173a:	4b2b      	ldr	r3, [pc, #172]	; (80017e8 <signal_wire_read_handler+0x300>)
 800173c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800173e:	2b00      	cmp	r3, #0
 8001740:	bfb8      	it	lt
 8001742:	425b      	neglt	r3, r3
 8001744:	607b      	str	r3, [r7, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
							memcpy(&cmd_A0[19],&temp_value,4);
 8001748:	4a33      	ldr	r2, [pc, #204]	; (8001818 <signal_wire_read_handler+0x330>)
 800174a:	f8c2 3013 	str.w	r3, [r2, #19]
							cmd_A0[23] = can_battery.max_value.max_pack_temperature;  //
 800174e:	4b26      	ldr	r3, [pc, #152]	; (80017e8 <signal_wire_read_handler+0x300>)
 8001750:	f993 3068 	ldrsb.w	r3, [r3, #104]	; 0x68
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4b30      	ldr	r3, [pc, #192]	; (8001818 <signal_wire_read_handler+0x330>)
 8001758:	75da      	strb	r2, [r3, #23]
							cmd_A0[24] = can_battery.max_value.min_pack_temperature;
 800175a:	4b23      	ldr	r3, [pc, #140]	; (80017e8 <signal_wire_read_handler+0x300>)
 800175c:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 8001760:	b2da      	uxtb	r2, r3
 8001762:	4b2d      	ldr	r3, [pc, #180]	; (8001818 <signal_wire_read_handler+0x330>)
 8001764:	761a      	strb	r2, [r3, #24]
							cmd_A0[25] = can_battery.mosfet_tmp;
 8001766:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <signal_wire_read_handler+0x300>)
 8001768:	f993 3082 	ldrsb.w	r3, [r3, #130]	; 0x82
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4b2a      	ldr	r3, [pc, #168]	; (8001818 <signal_wire_read_handler+0x330>)
 8001770:	765a      	strb	r2, [r3, #25]
							cmd_A0[26] = can_battery.mosfet_tmp;
 8001772:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <signal_wire_read_handler+0x300>)
 8001774:	f993 3082 	ldrsb.w	r3, [r3, #130]	; 0x82
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4b27      	ldr	r3, [pc, #156]	; (8001818 <signal_wire_read_handler+0x330>)
 800177c:	769a      	strb	r2, [r3, #26]
 800177e:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <signal_wire_read_handler+0x300>)
 8001780:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
							memcpy(&cmd_A0[29],&can_battery.cycle_counter,2);
 8001784:	4a24      	ldr	r2, [pc, #144]	; (8001818 <signal_wire_read_handler+0x330>)
 8001786:	f8a2 301d 	strh.w	r3, [r2, #29]
							cmd_A0[31] = getCheckSum(cmd_A0, 31);
 800178a:	211f      	movs	r1, #31
 800178c:	4822      	ldr	r0, [pc, #136]	; (8001818 <signal_wire_read_handler+0x330>)
 800178e:	f7ff f8b7 	bl	8000900 <getCheckSum>
 8001792:	4603      	mov	r3, r0
 8001794:	461a      	mov	r2, r3
 8001796:	4b20      	ldr	r3, [pc, #128]	; (8001818 <signal_wire_read_handler+0x330>)
 8001798:	77da      	strb	r2, [r3, #31]
							uart_module_send_hex(cmd_A0, sizeof(cmd_A0));
 800179a:	2120      	movs	r1, #32
 800179c:	481e      	ldr	r0, [pc, #120]	; (8001818 <signal_wire_read_handler+0x330>)
 800179e:	f7ff f95d 	bl	8000a5c <uart_module_send_hex>
						break;
 80017a2:	e010      	b.n	80017c6 <signal_wire_read_handler+0x2de>
					}
				}
				else if(P[2] == 0x00)  //写指令
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	3302      	adds	r3, #2
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10b      	bne.n	80017c6 <signal_wire_read_handler+0x2de>
				{
					if(P[3] == 0x00)   //写00 换电柜充电准备就绪
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	3303      	adds	r3, #3
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d106      	bne.n	80017c6 <signal_wire_read_handler+0x2de>
					{
						chg_flags.cabibet_ready_flag = true;
 80017b8:	4b18      	ldr	r3, [pc, #96]	; (800181c <signal_wire_read_handler+0x334>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	711a      	strb	r2, [r3, #4]
						uart_module_send_hex(cmd_00_w, sizeof(cmd_00_w));
 80017be:	2106      	movs	r1, #6
 80017c0:	4817      	ldr	r0, [pc, #92]	; (8001820 <signal_wire_read_handler+0x338>)
 80017c2:	f7ff f94b 	bl	8000a5c <uart_module_send_hex>
				}
			}
		}

		//	uart_module_send_hex(signal_wire_huart_module.uart_module_receive_buffer,signal_wire_huart_module.rec_lenth);
		uart_module_start_receive(&signal_wire_huart_module);
 80017c6:	4806      	ldr	r0, [pc, #24]	; (80017e0 <signal_wire_read_handler+0x2f8>)
 80017c8:	f7ff f971 	bl	8000aae <uart_module_start_receive>
		memset(signal_wire_huart_module.uart_module_receive_buffer,0,sizeof(signal_wire_huart_module.uart_module_receive_buffer));
 80017cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d0:	2100      	movs	r1, #0
 80017d2:	4804      	ldr	r0, [pc, #16]	; (80017e4 <signal_wire_read_handler+0x2fc>)
 80017d4:	f003 fb4e 	bl	8004e74 <memset>
		//clear flags
	}



}
 80017d8:	bf00      	nop
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bdb0      	pop	{r4, r5, r7, pc}
 80017e0:	20000004 	.word	0x20000004
 80017e4:	20000010 	.word	0x20000010
 80017e8:	20000770 	.word	0x20000770
 80017ec:	20000114 	.word	0x20000114
 80017f0:	20000120 	.word	0x20000120
 80017f4:	20000130 	.word	0x20000130
 80017f8:	20000784 	.word	0x20000784
 80017fc:	2000013d 	.word	0x2000013d
 8001800:	20000148 	.word	0x20000148
 8001804:	200007ac 	.word	0x200007ac
 8001808:	20000175 	.word	0x20000175
 800180c:	20000170 	.word	0x20000170
 8001810:	200001a0 	.word	0x200001a0
 8001814:	200001dc 	.word	0x200001dc
 8001818:	200001b4 	.word	0x200001b4
 800181c:	20000764 	.word	0x20000764
 8001820:	200001d4 	.word	0x200001d4

08001824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <HAL_Init+0x28>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a07      	ldr	r2, [pc, #28]	; (800184c <HAL_Init+0x28>)
 800182e:	f043 0310 	orr.w	r3, r3, #16
 8001832:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001834:	2003      	movs	r0, #3
 8001836:	f000 ff83 	bl	8002740 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800183a:	200f      	movs	r0, #15
 800183c:	f000 f808 	bl	8001850 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001840:	f7fe fe14 	bl	800046c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40022000 	.word	0x40022000

08001850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <HAL_InitTick+0x54>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_InitTick+0x58>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	4619      	mov	r1, r3
 8001862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001866:	fbb3 f3f1 	udiv	r3, r3, r1
 800186a:	fbb2 f3f3 	udiv	r3, r2, r3
 800186e:	4618      	mov	r0, r3
 8001870:	f000 ff9b 	bl	80027aa <HAL_SYSTICK_Config>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e00e      	b.n	800189c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b0f      	cmp	r3, #15
 8001882:	d80a      	bhi.n	800189a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001884:	2200      	movs	r2, #0
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	f04f 30ff 	mov.w	r0, #4294967295
 800188c:	f000 ff63 	bl	8002756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001890:	4a06      	ldr	r2, [pc, #24]	; (80018ac <HAL_InitTick+0x5c>)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	e000      	b.n	800189c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000000 	.word	0x20000000
 80018a8:	200001e8 	.word	0x200001e8
 80018ac:	200001e4 	.word	0x200001e4

080018b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <HAL_IncTick+0x1c>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <HAL_IncTick+0x20>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4413      	add	r3, r2
 80018c0:	4a03      	ldr	r2, [pc, #12]	; (80018d0 <HAL_IncTick+0x20>)
 80018c2:	6013      	str	r3, [r2, #0]
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr
 80018cc:	200001e8 	.word	0x200001e8
 80018d0:	200007f8 	.word	0x200007f8

080018d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return uwTick;
 80018d8:	4b02      	ldr	r3, [pc, #8]	; (80018e4 <HAL_GetTick+0x10>)
 80018da:	681b      	ldr	r3, [r3, #0]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr
 80018e4:	200007f8 	.word	0x200007f8

080018e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018f0:	f7ff fff0 	bl	80018d4 <HAL_GetTick>
 80018f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001900:	d005      	beq.n	800190e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <HAL_Delay+0x44>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4413      	add	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800190e:	bf00      	nop
 8001910:	f7ff ffe0 	bl	80018d4 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	429a      	cmp	r2, r3
 800191e:	d8f7      	bhi.n	8001910 <HAL_Delay+0x28>
  {
  }
}
 8001920:	bf00      	nop
 8001922:	bf00      	nop
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	200001e8 	.word	0x200001e8

08001930 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e0ed      	b.n	8001b1e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d102      	bne.n	8001954 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7fe fc32 	bl	80001b8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f042 0201 	orr.w	r2, r2, #1
 8001962:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001964:	f7ff ffb6 	bl	80018d4 <HAL_GetTick>
 8001968:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800196a:	e012      	b.n	8001992 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800196c:	f7ff ffb2 	bl	80018d4 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b0a      	cmp	r3, #10
 8001978:	d90b      	bls.n	8001992 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2205      	movs	r2, #5
 800198a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e0c5      	b.n	8001b1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0e5      	beq.n	800196c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0202 	bic.w	r2, r2, #2
 80019ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019b0:	f7ff ff90 	bl	80018d4 <HAL_GetTick>
 80019b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019b6:	e012      	b.n	80019de <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019b8:	f7ff ff8c 	bl	80018d4 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b0a      	cmp	r3, #10
 80019c4:	d90b      	bls.n	80019de <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2205      	movs	r2, #5
 80019d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e09f      	b.n	8001b1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1e5      	bne.n	80019b8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	7e1b      	ldrb	r3, [r3, #24]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d108      	bne.n	8001a06 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	e007      	b.n	8001a16 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	7e5b      	ldrb	r3, [r3, #25]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d108      	bne.n	8001a30 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	e007      	b.n	8001a40 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	7e9b      	ldrb	r3, [r3, #26]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d108      	bne.n	8001a5a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f042 0220 	orr.w	r2, r2, #32
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	e007      	b.n	8001a6a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 0220 	bic.w	r2, r2, #32
 8001a68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	7edb      	ldrb	r3, [r3, #27]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d108      	bne.n	8001a84 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 0210 	bic.w	r2, r2, #16
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	e007      	b.n	8001a94 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f042 0210 	orr.w	r2, r2, #16
 8001a92:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	7f1b      	ldrb	r3, [r3, #28]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d108      	bne.n	8001aae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 0208 	orr.w	r2, r2, #8
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	e007      	b.n	8001abe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 0208 	bic.w	r2, r2, #8
 8001abc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	7f5b      	ldrb	r3, [r3, #29]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d108      	bne.n	8001ad8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f042 0204 	orr.w	r2, r2, #4
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	e007      	b.n	8001ae8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 0204 	bic.w	r2, r2, #4
 8001ae6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	431a      	orrs	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	ea42 0103 	orr.w	r1, r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	1e5a      	subs	r2, r3, #1
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b087      	sub	sp, #28
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b3c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001b3e:	7cfb      	ldrb	r3, [r7, #19]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d003      	beq.n	8001b4c <HAL_CAN_ConfigFilter+0x26>
 8001b44:	7cfb      	ldrb	r3, [r7, #19]
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	f040 80aa 	bne.w	8001ca0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b52:	f043 0201 	orr.w	r2, r3, #1
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	f003 031f 	and.w	r3, r3, #31
 8001b64:	2201      	movs	r2, #1
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	401a      	ands	r2, r3
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d123      	bne.n	8001bce <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	401a      	ands	r2, r3
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ba8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	3248      	adds	r2, #72	; 0x48
 8001bae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bc2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bc4:	6979      	ldr	r1, [r7, #20]
 8001bc6:	3348      	adds	r3, #72	; 0x48
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	440b      	add	r3, r1
 8001bcc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d122      	bne.n	8001c1c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	431a      	orrs	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bf6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	3248      	adds	r2, #72	; 0x48
 8001bfc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c10:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c12:	6979      	ldr	r1, [r7, #20]
 8001c14:	3348      	adds	r3, #72	; 0x48
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	440b      	add	r3, r1
 8001c1a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d109      	bne.n	8001c38 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	401a      	ands	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001c36:	e007      	b.n	8001c48 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	431a      	orrs	r2, r3
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d109      	bne.n	8001c64 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001c62:	e007      	b.n	8001c74 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d107      	bne.n	8001c8c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	431a      	orrs	r2, r3
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c92:	f023 0201 	bic.w	r2, r3, #1
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	e006      	b.n	8001cae <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
  }
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	371c      	adds	r7, #28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d12e      	bne.n	8001d2a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2202      	movs	r2, #2
 8001cd0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 0201 	bic.w	r2, r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001ce4:	f7ff fdf6 	bl	80018d4 <HAL_GetTick>
 8001ce8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cea:	e012      	b.n	8001d12 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cec:	f7ff fdf2 	bl	80018d4 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b0a      	cmp	r3, #10
 8001cf8:	d90b      	bls.n	8001d12 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2205      	movs	r2, #5
 8001d0a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e012      	b.n	8001d38 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1e5      	bne.n	8001cec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	e006      	b.n	8001d38 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
  }
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b089      	sub	sp, #36	; 0x24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
 8001d4c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d54:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d5e:	7ffb      	ldrb	r3, [r7, #31]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d003      	beq.n	8001d6c <HAL_CAN_AddTxMessage+0x2c>
 8001d64:	7ffb      	ldrb	r3, [r7, #31]
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	f040 80b8 	bne.w	8001edc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10a      	bne.n	8001d8c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d105      	bne.n	8001d8c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 80a0 	beq.w	8001ecc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	0e1b      	lsrs	r3, r3, #24
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d907      	bls.n	8001dac <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e09e      	b.n	8001eea <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001dac:	2201      	movs	r2, #1
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	409a      	lsls	r2, r3
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10d      	bne.n	8001dda <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001dc8:	68f9      	ldr	r1, [r7, #12]
 8001dca:	6809      	ldr	r1, [r1, #0]
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	3318      	adds	r3, #24
 8001dd2:	011b      	lsls	r3, r3, #4
 8001dd4:	440b      	add	r3, r1
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	e00f      	b.n	8001dfa <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001de4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dea:	68f9      	ldr	r1, [r7, #12]
 8001dec:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001dee:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	3318      	adds	r3, #24
 8001df4:	011b      	lsls	r3, r3, #4
 8001df6:	440b      	add	r3, r1
 8001df8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6819      	ldr	r1, [r3, #0]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	691a      	ldr	r2, [r3, #16]
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	3318      	adds	r3, #24
 8001e06:	011b      	lsls	r3, r3, #4
 8001e08:	440b      	add	r3, r1
 8001e0a:	3304      	adds	r3, #4
 8001e0c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	7d1b      	ldrb	r3, [r3, #20]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d111      	bne.n	8001e3a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	3318      	adds	r3, #24
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	4413      	add	r3, r2
 8001e22:	3304      	adds	r3, #4
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	6811      	ldr	r1, [r2, #0]
 8001e2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	3318      	adds	r3, #24
 8001e32:	011b      	lsls	r3, r3, #4
 8001e34:	440b      	add	r3, r1
 8001e36:	3304      	adds	r3, #4
 8001e38:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3307      	adds	r3, #7
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	061a      	lsls	r2, r3, #24
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3306      	adds	r3, #6
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	041b      	lsls	r3, r3, #16
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3305      	adds	r3, #5
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	021b      	lsls	r3, r3, #8
 8001e54:	4313      	orrs	r3, r2
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	3204      	adds	r2, #4
 8001e5a:	7812      	ldrb	r2, [r2, #0]
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	6811      	ldr	r1, [r2, #0]
 8001e62:	ea43 0200 	orr.w	r2, r3, r0
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	011b      	lsls	r3, r3, #4
 8001e6a:	440b      	add	r3, r1
 8001e6c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001e70:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3303      	adds	r3, #3
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	061a      	lsls	r2, r3, #24
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	3302      	adds	r3, #2
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	041b      	lsls	r3, r3, #16
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3301      	adds	r3, #1
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	021b      	lsls	r3, r3, #8
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	7812      	ldrb	r2, [r2, #0]
 8001e92:	4610      	mov	r0, r2
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	6811      	ldr	r1, [r2, #0]
 8001e98:	ea43 0200 	orr.w	r2, r3, r0
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	011b      	lsls	r3, r3, #4
 8001ea0:	440b      	add	r3, r1
 8001ea2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001ea6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	3318      	adds	r3, #24
 8001eb0:	011b      	lsls	r3, r3, #4
 8001eb2:	4413      	add	r3, r2
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	6811      	ldr	r1, [r2, #0]
 8001eba:	f043 0201 	orr.w	r2, r3, #1
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	3318      	adds	r3, #24
 8001ec2:	011b      	lsls	r3, r3, #4
 8001ec4:	440b      	add	r3, r1
 8001ec6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	e00e      	b.n	8001eea <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e006      	b.n	8001eea <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
  }
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3724      	adds	r7, #36	; 0x24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b087      	sub	sp, #28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
 8001f00:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f08:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f0a:	7dfb      	ldrb	r3, [r7, #23]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d003      	beq.n	8001f18 <HAL_CAN_GetRxMessage+0x24>
 8001f10:	7dfb      	ldrb	r3, [r7, #23]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	f040 80f3 	bne.w	80020fe <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10e      	bne.n	8001f3c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f003 0303 	and.w	r3, r3, #3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d116      	bne.n	8001f5a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0e7      	b.n	800210c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d107      	bne.n	8001f5a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e0d8      	b.n	800210c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	331b      	adds	r3, #27
 8001f62:	011b      	lsls	r3, r3, #4
 8001f64:	4413      	add	r3, r2
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0204 	and.w	r2, r3, #4
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10c      	bne.n	8001f92 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	331b      	adds	r3, #27
 8001f80:	011b      	lsls	r3, r3, #4
 8001f82:	4413      	add	r3, r2
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	0d5b      	lsrs	r3, r3, #21
 8001f88:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	e00b      	b.n	8001faa <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	331b      	adds	r3, #27
 8001f9a:	011b      	lsls	r3, r3, #4
 8001f9c:	4413      	add	r3, r2
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	08db      	lsrs	r3, r3, #3
 8001fa2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	331b      	adds	r3, #27
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	4413      	add	r3, r2
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0202 	and.w	r2, r3, #2
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	331b      	adds	r3, #27
 8001fc8:	011b      	lsls	r3, r3, #4
 8001fca:	4413      	add	r3, r2
 8001fcc:	3304      	adds	r3, #4
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 020f 	and.w	r2, r3, #15
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	331b      	adds	r3, #27
 8001fe0:	011b      	lsls	r3, r3, #4
 8001fe2:	4413      	add	r3, r2
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	0a1b      	lsrs	r3, r3, #8
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	331b      	adds	r3, #27
 8001ff8:	011b      	lsls	r3, r3, #4
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	0c1b      	lsrs	r3, r3, #16
 8002002:	b29a      	uxth	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	011b      	lsls	r3, r3, #4
 8002010:	4413      	add	r3, r2
 8002012:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	b2da      	uxtb	r2, r3
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	011b      	lsls	r3, r3, #4
 8002026:	4413      	add	r3, r2
 8002028:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	0a1a      	lsrs	r2, r3, #8
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	3301      	adds	r3, #1
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	4413      	add	r3, r2
 8002042:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	0c1a      	lsrs	r2, r3, #16
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	3302      	adds	r3, #2
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	011b      	lsls	r3, r3, #4
 800205a:	4413      	add	r3, r2
 800205c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	0e1a      	lsrs	r2, r3, #24
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	3303      	adds	r3, #3
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	011b      	lsls	r3, r3, #4
 8002074:	4413      	add	r3, r2
 8002076:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	3304      	adds	r3, #4
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	011b      	lsls	r3, r3, #4
 800208c:	4413      	add	r3, r2
 800208e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	0a1a      	lsrs	r2, r3, #8
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	3305      	adds	r3, #5
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	011b      	lsls	r3, r3, #4
 80020a6:	4413      	add	r3, r2
 80020a8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	0c1a      	lsrs	r2, r3, #16
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	3306      	adds	r3, #6
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	011b      	lsls	r3, r3, #4
 80020c0:	4413      	add	r3, r2
 80020c2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	0e1a      	lsrs	r2, r3, #24
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	3307      	adds	r3, #7
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d108      	bne.n	80020ea <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0220 	orr.w	r2, r2, #32
 80020e6:	60da      	str	r2, [r3, #12]
 80020e8:	e007      	b.n	80020fa <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	691a      	ldr	r2, [r3, #16]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f042 0220 	orr.w	r2, r2, #32
 80020f8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	e006      	b.n	800210c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
  }
}
 800210c:	4618      	mov	r0, r3
 800210e:	371c      	adds	r7, #28
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr

08002116 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002116:	b480      	push	{r7}
 8002118:	b085      	sub	sp, #20
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002126:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002128:	7bfb      	ldrb	r3, [r7, #15]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d002      	beq.n	8002134 <HAL_CAN_ActivateNotification+0x1e>
 800212e:	7bfb      	ldrb	r3, [r7, #15]
 8002130:	2b02      	cmp	r3, #2
 8002132:	d109      	bne.n	8002148 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6959      	ldr	r1, [r3, #20]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002144:	2300      	movs	r3, #0
 8002146:	e006      	b.n	8002156 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
  }
}
 8002156:	4618      	mov	r0, r3
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr

08002160 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	; 0x28
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002168:	2300      	movs	r3, #0
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800219c:	6a3b      	ldr	r3, [r7, #32]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d07c      	beq.n	80022a0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d023      	beq.n	80021f8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2201      	movs	r2, #1
 80021b6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f983 	bl	80024ce <HAL_CAN_TxMailbox0CompleteCallback>
 80021c8:	e016      	b.n	80021f8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d004      	beq.n	80021de <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
 80021dc:	e00c      	b.n	80021f8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	f003 0308 	and.w	r3, r3, #8
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d004      	beq.n	80021f2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24
 80021f0:	e002      	b.n	80021f8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f986 	bl	8002504 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d024      	beq.n	800224c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f44f 7280 	mov.w	r2, #256	; 0x100
 800220a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f962 	bl	80024e0 <HAL_CAN_TxMailbox1CompleteCallback>
 800221c:	e016      	b.n	800224c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002224:	2b00      	cmp	r3, #0
 8002226:	d004      	beq.n	8002232 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
 8002230:	e00c      	b.n	800224c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002238:	2b00      	cmp	r3, #0
 800223a:	d004      	beq.n	8002246 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
 8002244:	e002      	b.n	800224c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f965 	bl	8002516 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d024      	beq.n	80022a0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800225e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f941 	bl	80024f2 <HAL_CAN_TxMailbox2CompleteCallback>
 8002270:	e016      	b.n	80022a0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d004      	beq.n	8002286 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
 8002284:	e00c      	b.n	80022a0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d004      	beq.n	800229a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
 8002298:	e002      	b.n	80022a0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f944 	bl	8002528 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00c      	beq.n	80022c4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f003 0310 	and.w	r3, r3, #16
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d007      	beq.n	80022c4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2210      	movs	r2, #16
 80022c2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	f003 0304 	and.w	r3, r3, #4
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00b      	beq.n	80022e6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	f003 0308 	and.w	r3, r3, #8
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d006      	beq.n	80022e6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2208      	movs	r2, #8
 80022de:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 f92a 	bl	800253a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d009      	beq.n	8002304 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7fe fab6 	bl	8000870 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00c      	beq.n	8002328 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	f003 0310 	and.w	r3, r3, #16
 8002314:	2b00      	cmp	r3, #0
 8002316:	d007      	beq.n	8002328 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800231e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2210      	movs	r2, #16
 8002326:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	f003 0320 	and.w	r3, r3, #32
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00b      	beq.n	800234a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	f003 0308 	and.w	r3, r3, #8
 8002338:	2b00      	cmp	r3, #0
 800233a:	d006      	beq.n	800234a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2208      	movs	r2, #8
 8002342:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f90a 	bl	800255e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	f003 0310 	and.w	r3, r3, #16
 8002350:	2b00      	cmp	r3, #0
 8002352:	d009      	beq.n	8002368 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d002      	beq.n	8002368 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f8f2 	bl	800254c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00b      	beq.n	800238a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	f003 0310 	and.w	r3, r3, #16
 8002378:	2b00      	cmp	r3, #0
 800237a:	d006      	beq.n	800238a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2210      	movs	r2, #16
 8002382:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 f8f3 	bl	8002570 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00b      	beq.n	80023ac <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b00      	cmp	r3, #0
 800239c:	d006      	beq.n	80023ac <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2208      	movs	r2, #8
 80023a4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f8eb 	bl	8002582 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d07b      	beq.n	80024ae <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d072      	beq.n	80024a6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d008      	beq.n	80023dc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023dc:	6a3b      	ldr	r3, [r7, #32]
 80023de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d008      	beq.n	80023f8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	f043 0302 	orr.w	r3, r3, #2
 80023f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023f8:	6a3b      	ldr	r3, [r7, #32]
 80023fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d008      	beq.n	8002414 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	f043 0304 	orr.w	r3, r3, #4
 8002412:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002414:	6a3b      	ldr	r3, [r7, #32]
 8002416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800241a:	2b00      	cmp	r3, #0
 800241c:	d043      	beq.n	80024a6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002424:	2b00      	cmp	r3, #0
 8002426:	d03e      	beq.n	80024a6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800242e:	2b60      	cmp	r3, #96	; 0x60
 8002430:	d02b      	beq.n	800248a <HAL_CAN_IRQHandler+0x32a>
 8002432:	2b60      	cmp	r3, #96	; 0x60
 8002434:	d82e      	bhi.n	8002494 <HAL_CAN_IRQHandler+0x334>
 8002436:	2b50      	cmp	r3, #80	; 0x50
 8002438:	d022      	beq.n	8002480 <HAL_CAN_IRQHandler+0x320>
 800243a:	2b50      	cmp	r3, #80	; 0x50
 800243c:	d82a      	bhi.n	8002494 <HAL_CAN_IRQHandler+0x334>
 800243e:	2b40      	cmp	r3, #64	; 0x40
 8002440:	d019      	beq.n	8002476 <HAL_CAN_IRQHandler+0x316>
 8002442:	2b40      	cmp	r3, #64	; 0x40
 8002444:	d826      	bhi.n	8002494 <HAL_CAN_IRQHandler+0x334>
 8002446:	2b30      	cmp	r3, #48	; 0x30
 8002448:	d010      	beq.n	800246c <HAL_CAN_IRQHandler+0x30c>
 800244a:	2b30      	cmp	r3, #48	; 0x30
 800244c:	d822      	bhi.n	8002494 <HAL_CAN_IRQHandler+0x334>
 800244e:	2b10      	cmp	r3, #16
 8002450:	d002      	beq.n	8002458 <HAL_CAN_IRQHandler+0x2f8>
 8002452:	2b20      	cmp	r3, #32
 8002454:	d005      	beq.n	8002462 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002456:	e01d      	b.n	8002494 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	f043 0308 	orr.w	r3, r3, #8
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002460:	e019      	b.n	8002496 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	f043 0310 	orr.w	r3, r3, #16
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800246a:	e014      	b.n	8002496 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	f043 0320 	orr.w	r3, r3, #32
 8002472:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002474:	e00f      	b.n	8002496 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800247e:	e00a      	b.n	8002496 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002488:	e005      	b.n	8002496 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002492:	e000      	b.n	8002496 <HAL_CAN_IRQHandler+0x336>
            break;
 8002494:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	699a      	ldr	r2, [r3, #24]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80024a4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2204      	movs	r2, #4
 80024ac:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d008      	beq.n	80024c6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	431a      	orrs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 f867 	bl	8002594 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80024c6:	bf00      	nop
 80024c8:	3728      	adds	r7, #40	; 0x28
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr

080024e0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr

080024f2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr

08002504 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr

08002516 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr

08002528 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr

0800253a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr

0800255e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr

08002570 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr

08002582 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr

08002594 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr
	...

080025a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025b8:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <__NVIC_SetPriorityGrouping+0x44>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025c4:	4013      	ands	r3, r2
 80025c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025da:	4a04      	ldr	r2, [pc, #16]	; (80025ec <__NVIC_SetPriorityGrouping+0x44>)
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	60d3      	str	r3, [r2, #12]
}
 80025e0:	bf00      	nop
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f4:	4b04      	ldr	r3, [pc, #16]	; (8002608 <__NVIC_GetPriorityGrouping+0x18>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	0a1b      	lsrs	r3, r3, #8
 80025fa:	f003 0307 	and.w	r3, r3, #7
}
 80025fe:	4618      	mov	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	e000ed00 	.word	0xe000ed00

0800260c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261a:	2b00      	cmp	r3, #0
 800261c:	db0b      	blt.n	8002636 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	f003 021f 	and.w	r2, r3, #31
 8002624:	4906      	ldr	r1, [pc, #24]	; (8002640 <__NVIC_EnableIRQ+0x34>)
 8002626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262a:	095b      	lsrs	r3, r3, #5
 800262c:	2001      	movs	r0, #1
 800262e:	fa00 f202 	lsl.w	r2, r0, r2
 8002632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr
 8002640:	e000e100 	.word	0xe000e100

08002644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	6039      	str	r1, [r7, #0]
 800264e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002654:	2b00      	cmp	r3, #0
 8002656:	db0a      	blt.n	800266e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	b2da      	uxtb	r2, r3
 800265c:	490c      	ldr	r1, [pc, #48]	; (8002690 <__NVIC_SetPriority+0x4c>)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	0112      	lsls	r2, r2, #4
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	440b      	add	r3, r1
 8002668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800266c:	e00a      	b.n	8002684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	b2da      	uxtb	r2, r3
 8002672:	4908      	ldr	r1, [pc, #32]	; (8002694 <__NVIC_SetPriority+0x50>)
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	3b04      	subs	r3, #4
 800267c:	0112      	lsls	r2, r2, #4
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	440b      	add	r3, r1
 8002682:	761a      	strb	r2, [r3, #24]
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	bc80      	pop	{r7}
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	e000e100 	.word	0xe000e100
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002698:	b480      	push	{r7}
 800269a:	b089      	sub	sp, #36	; 0x24
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f1c3 0307 	rsb	r3, r3, #7
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	bf28      	it	cs
 80026b6:	2304      	movcs	r3, #4
 80026b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3304      	adds	r3, #4
 80026be:	2b06      	cmp	r3, #6
 80026c0:	d902      	bls.n	80026c8 <NVIC_EncodePriority+0x30>
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3b03      	subs	r3, #3
 80026c6:	e000      	b.n	80026ca <NVIC_EncodePriority+0x32>
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026cc:	f04f 32ff 	mov.w	r2, #4294967295
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43da      	mvns	r2, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	401a      	ands	r2, r3
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026e0:	f04f 31ff 	mov.w	r1, #4294967295
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ea:	43d9      	mvns	r1, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f0:	4313      	orrs	r3, r2
         );
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3724      	adds	r7, #36	; 0x24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr

080026fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3b01      	subs	r3, #1
 8002708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800270c:	d301      	bcc.n	8002712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800270e:	2301      	movs	r3, #1
 8002710:	e00f      	b.n	8002732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002712:	4a0a      	ldr	r2, [pc, #40]	; (800273c <SysTick_Config+0x40>)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3b01      	subs	r3, #1
 8002718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800271a:	210f      	movs	r1, #15
 800271c:	f04f 30ff 	mov.w	r0, #4294967295
 8002720:	f7ff ff90 	bl	8002644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002724:	4b05      	ldr	r3, [pc, #20]	; (800273c <SysTick_Config+0x40>)
 8002726:	2200      	movs	r2, #0
 8002728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800272a:	4b04      	ldr	r3, [pc, #16]	; (800273c <SysTick_Config+0x40>)
 800272c:	2207      	movs	r2, #7
 800272e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	e000e010 	.word	0xe000e010

08002740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7ff ff2d 	bl	80025a8 <__NVIC_SetPriorityGrouping>
}
 800274e:	bf00      	nop
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002756:	b580      	push	{r7, lr}
 8002758:	b086      	sub	sp, #24
 800275a:	af00      	add	r7, sp, #0
 800275c:	4603      	mov	r3, r0
 800275e:	60b9      	str	r1, [r7, #8]
 8002760:	607a      	str	r2, [r7, #4]
 8002762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002768:	f7ff ff42 	bl	80025f0 <__NVIC_GetPriorityGrouping>
 800276c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	68b9      	ldr	r1, [r7, #8]
 8002772:	6978      	ldr	r0, [r7, #20]
 8002774:	f7ff ff90 	bl	8002698 <NVIC_EncodePriority>
 8002778:	4602      	mov	r2, r0
 800277a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800277e:	4611      	mov	r1, r2
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff ff5f 	bl	8002644 <__NVIC_SetPriority>
}
 8002786:	bf00      	nop
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	4603      	mov	r3, r0
 8002796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff ff35 	bl	800260c <__NVIC_EnableIRQ>
}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7ff ffa2 	bl	80026fc <SysTick_Config>
 80027b8:	4603      	mov	r3, r0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e043      	b.n	8002862 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	461a      	mov	r2, r3
 80027e0:	4b22      	ldr	r3, [pc, #136]	; (800286c <HAL_DMA_Init+0xa8>)
 80027e2:	4413      	add	r3, r2
 80027e4:	4a22      	ldr	r2, [pc, #136]	; (8002870 <HAL_DMA_Init+0xac>)
 80027e6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ea:	091b      	lsrs	r3, r3, #4
 80027ec:	009a      	lsls	r2, r3, #2
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a1f      	ldr	r2, [pc, #124]	; (8002874 <HAL_DMA_Init+0xb0>)
 80027f6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2202      	movs	r2, #2
 80027fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800280e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002812:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800281c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002828:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002834:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	4313      	orrs	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr
 800286c:	bffdfff8 	.word	0xbffdfff8
 8002870:	cccccccd 	.word	0xcccccccd
 8002874:	40020000 	.word	0x40020000

08002878 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
 8002884:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_DMA_Start_IT+0x20>
 8002894:	2302      	movs	r3, #2
 8002896:	e04a      	b.n	800292e <HAL_DMA_Start_IT+0xb6>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d13a      	bne.n	8002920 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2202      	movs	r2, #2
 80028ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 0201 	bic.w	r2, r2, #1
 80028c6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	68b9      	ldr	r1, [r7, #8]
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 f9e8 	bl	8002ca4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 020e 	orr.w	r2, r2, #14
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	e00f      	b.n	800290e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0204 	bic.w	r2, r2, #4
 80028fc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f042 020a 	orr.w	r2, r2, #10
 800290c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f042 0201 	orr.w	r2, r2, #1
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	e005      	b.n	800292c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002928:	2302      	movs	r3, #2
 800292a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800292c:	7dfb      	ldrb	r3, [r7, #23]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002936:	b480      	push	{r7}
 8002938:	b085      	sub	sp, #20
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002948:	2b02      	cmp	r3, #2
 800294a:	d008      	beq.n	800295e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2204      	movs	r2, #4
 8002950:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e020      	b.n	80029a0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 020e 	bic.w	r2, r2, #14
 800296c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0201 	bic.w	r2, r2, #1
 800297c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002986:	2101      	movs	r1, #1
 8002988:	fa01 f202 	lsl.w	r2, r1, r2
 800298c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800299e:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr
	...

080029ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029b4:	2300      	movs	r3, #0
 80029b6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d005      	beq.n	80029ce <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2204      	movs	r2, #4
 80029c6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	73fb      	strb	r3, [r7, #15]
 80029cc:	e051      	b.n	8002a72 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 020e 	bic.w	r2, r2, #14
 80029dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0201 	bic.w	r2, r2, #1
 80029ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a22      	ldr	r2, [pc, #136]	; (8002a7c <HAL_DMA_Abort_IT+0xd0>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d029      	beq.n	8002a4c <HAL_DMA_Abort_IT+0xa0>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a20      	ldr	r2, [pc, #128]	; (8002a80 <HAL_DMA_Abort_IT+0xd4>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d022      	beq.n	8002a48 <HAL_DMA_Abort_IT+0x9c>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a1f      	ldr	r2, [pc, #124]	; (8002a84 <HAL_DMA_Abort_IT+0xd8>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d01a      	beq.n	8002a42 <HAL_DMA_Abort_IT+0x96>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a1d      	ldr	r2, [pc, #116]	; (8002a88 <HAL_DMA_Abort_IT+0xdc>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d012      	beq.n	8002a3c <HAL_DMA_Abort_IT+0x90>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a1c      	ldr	r2, [pc, #112]	; (8002a8c <HAL_DMA_Abort_IT+0xe0>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d00a      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x8a>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a1a      	ldr	r2, [pc, #104]	; (8002a90 <HAL_DMA_Abort_IT+0xe4>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d102      	bne.n	8002a30 <HAL_DMA_Abort_IT+0x84>
 8002a2a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a2e:	e00e      	b.n	8002a4e <HAL_DMA_Abort_IT+0xa2>
 8002a30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a34:	e00b      	b.n	8002a4e <HAL_DMA_Abort_IT+0xa2>
 8002a36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a3a:	e008      	b.n	8002a4e <HAL_DMA_Abort_IT+0xa2>
 8002a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a40:	e005      	b.n	8002a4e <HAL_DMA_Abort_IT+0xa2>
 8002a42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a46:	e002      	b.n	8002a4e <HAL_DMA_Abort_IT+0xa2>
 8002a48:	2310      	movs	r3, #16
 8002a4a:	e000      	b.n	8002a4e <HAL_DMA_Abort_IT+0xa2>
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	4a11      	ldr	r2, [pc, #68]	; (8002a94 <HAL_DMA_Abort_IT+0xe8>)
 8002a50:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	4798      	blx	r3
    } 
  }
  return status;
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40020008 	.word	0x40020008
 8002a80:	4002001c 	.word	0x4002001c
 8002a84:	40020030 	.word	0x40020030
 8002a88:	40020044 	.word	0x40020044
 8002a8c:	40020058 	.word	0x40020058
 8002a90:	4002006c 	.word	0x4002006c
 8002a94:	40020000 	.word	0x40020000

08002a98 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	2204      	movs	r2, #4
 8002ab6:	409a      	lsls	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4013      	ands	r3, r2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d04f      	beq.n	8002b60 <HAL_DMA_IRQHandler+0xc8>
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f003 0304 	and.w	r3, r3, #4
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d04a      	beq.n	8002b60 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0320 	and.w	r3, r3, #32
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d107      	bne.n	8002ae8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0204 	bic.w	r2, r2, #4
 8002ae6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a66      	ldr	r2, [pc, #408]	; (8002c88 <HAL_DMA_IRQHandler+0x1f0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d029      	beq.n	8002b46 <HAL_DMA_IRQHandler+0xae>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a65      	ldr	r2, [pc, #404]	; (8002c8c <HAL_DMA_IRQHandler+0x1f4>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d022      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xaa>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a63      	ldr	r2, [pc, #396]	; (8002c90 <HAL_DMA_IRQHandler+0x1f8>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d01a      	beq.n	8002b3c <HAL_DMA_IRQHandler+0xa4>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a62      	ldr	r2, [pc, #392]	; (8002c94 <HAL_DMA_IRQHandler+0x1fc>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d012      	beq.n	8002b36 <HAL_DMA_IRQHandler+0x9e>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a60      	ldr	r2, [pc, #384]	; (8002c98 <HAL_DMA_IRQHandler+0x200>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00a      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x98>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a5f      	ldr	r2, [pc, #380]	; (8002c9c <HAL_DMA_IRQHandler+0x204>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d102      	bne.n	8002b2a <HAL_DMA_IRQHandler+0x92>
 8002b24:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b28:	e00e      	b.n	8002b48 <HAL_DMA_IRQHandler+0xb0>
 8002b2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002b2e:	e00b      	b.n	8002b48 <HAL_DMA_IRQHandler+0xb0>
 8002b30:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b34:	e008      	b.n	8002b48 <HAL_DMA_IRQHandler+0xb0>
 8002b36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b3a:	e005      	b.n	8002b48 <HAL_DMA_IRQHandler+0xb0>
 8002b3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b40:	e002      	b.n	8002b48 <HAL_DMA_IRQHandler+0xb0>
 8002b42:	2340      	movs	r3, #64	; 0x40
 8002b44:	e000      	b.n	8002b48 <HAL_DMA_IRQHandler+0xb0>
 8002b46:	2304      	movs	r3, #4
 8002b48:	4a55      	ldr	r2, [pc, #340]	; (8002ca0 <HAL_DMA_IRQHandler+0x208>)
 8002b4a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 8094 	beq.w	8002c7e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002b5e:	e08e      	b.n	8002c7e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	2202      	movs	r2, #2
 8002b66:	409a      	lsls	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d056      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x186>
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d051      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0320 	and.w	r3, r3, #32
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10b      	bne.n	8002ba0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 020a 	bic.w	r2, r2, #10
 8002b96:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a38      	ldr	r2, [pc, #224]	; (8002c88 <HAL_DMA_IRQHandler+0x1f0>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d029      	beq.n	8002bfe <HAL_DMA_IRQHandler+0x166>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a37      	ldr	r2, [pc, #220]	; (8002c8c <HAL_DMA_IRQHandler+0x1f4>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d022      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x162>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a35      	ldr	r2, [pc, #212]	; (8002c90 <HAL_DMA_IRQHandler+0x1f8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d01a      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x15c>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a34      	ldr	r2, [pc, #208]	; (8002c94 <HAL_DMA_IRQHandler+0x1fc>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d012      	beq.n	8002bee <HAL_DMA_IRQHandler+0x156>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a32      	ldr	r2, [pc, #200]	; (8002c98 <HAL_DMA_IRQHandler+0x200>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d00a      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x150>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a31      	ldr	r2, [pc, #196]	; (8002c9c <HAL_DMA_IRQHandler+0x204>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d102      	bne.n	8002be2 <HAL_DMA_IRQHandler+0x14a>
 8002bdc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002be0:	e00e      	b.n	8002c00 <HAL_DMA_IRQHandler+0x168>
 8002be2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002be6:	e00b      	b.n	8002c00 <HAL_DMA_IRQHandler+0x168>
 8002be8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bec:	e008      	b.n	8002c00 <HAL_DMA_IRQHandler+0x168>
 8002bee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bf2:	e005      	b.n	8002c00 <HAL_DMA_IRQHandler+0x168>
 8002bf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bf8:	e002      	b.n	8002c00 <HAL_DMA_IRQHandler+0x168>
 8002bfa:	2320      	movs	r3, #32
 8002bfc:	e000      	b.n	8002c00 <HAL_DMA_IRQHandler+0x168>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	4a27      	ldr	r2, [pc, #156]	; (8002ca0 <HAL_DMA_IRQHandler+0x208>)
 8002c02:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d034      	beq.n	8002c7e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c1c:	e02f      	b.n	8002c7e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	2208      	movs	r2, #8
 8002c24:	409a      	lsls	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d028      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x1e8>
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d023      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 020e 	bic.w	r2, r2, #14
 8002c46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c50:	2101      	movs	r1, #1
 8002c52:	fa01 f202 	lsl.w	r2, r1, r2
 8002c56:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d004      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	4798      	blx	r3
    }
  }
  return;
 8002c7e:	bf00      	nop
 8002c80:	bf00      	nop
}
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40020008 	.word	0x40020008
 8002c8c:	4002001c 	.word	0x4002001c
 8002c90:	40020030 	.word	0x40020030
 8002c94:	40020044 	.word	0x40020044
 8002c98:	40020058 	.word	0x40020058
 8002c9c:	4002006c 	.word	0x4002006c
 8002ca0:	40020000 	.word	0x40020000

08002ca4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
 8002cb0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cba:	2101      	movs	r1, #1
 8002cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b10      	cmp	r3, #16
 8002cd0:	d108      	bne.n	8002ce4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ce2:	e007      	b.n	8002cf4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	60da      	str	r2, [r3, #12]
}
 8002cf4:	bf00      	nop
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr
	...

08002d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b08b      	sub	sp, #44	; 0x2c
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d12:	e148      	b.n	8002fa6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d14:	2201      	movs	r2, #1
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	69fa      	ldr	r2, [r7, #28]
 8002d24:	4013      	ands	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	f040 8137 	bne.w	8002fa0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	4aa3      	ldr	r2, [pc, #652]	; (8002fc4 <HAL_GPIO_Init+0x2c4>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d05e      	beq.n	8002dfa <HAL_GPIO_Init+0xfa>
 8002d3c:	4aa1      	ldr	r2, [pc, #644]	; (8002fc4 <HAL_GPIO_Init+0x2c4>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d875      	bhi.n	8002e2e <HAL_GPIO_Init+0x12e>
 8002d42:	4aa1      	ldr	r2, [pc, #644]	; (8002fc8 <HAL_GPIO_Init+0x2c8>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d058      	beq.n	8002dfa <HAL_GPIO_Init+0xfa>
 8002d48:	4a9f      	ldr	r2, [pc, #636]	; (8002fc8 <HAL_GPIO_Init+0x2c8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d86f      	bhi.n	8002e2e <HAL_GPIO_Init+0x12e>
 8002d4e:	4a9f      	ldr	r2, [pc, #636]	; (8002fcc <HAL_GPIO_Init+0x2cc>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d052      	beq.n	8002dfa <HAL_GPIO_Init+0xfa>
 8002d54:	4a9d      	ldr	r2, [pc, #628]	; (8002fcc <HAL_GPIO_Init+0x2cc>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d869      	bhi.n	8002e2e <HAL_GPIO_Init+0x12e>
 8002d5a:	4a9d      	ldr	r2, [pc, #628]	; (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d04c      	beq.n	8002dfa <HAL_GPIO_Init+0xfa>
 8002d60:	4a9b      	ldr	r2, [pc, #620]	; (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d863      	bhi.n	8002e2e <HAL_GPIO_Init+0x12e>
 8002d66:	4a9b      	ldr	r2, [pc, #620]	; (8002fd4 <HAL_GPIO_Init+0x2d4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d046      	beq.n	8002dfa <HAL_GPIO_Init+0xfa>
 8002d6c:	4a99      	ldr	r2, [pc, #612]	; (8002fd4 <HAL_GPIO_Init+0x2d4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d85d      	bhi.n	8002e2e <HAL_GPIO_Init+0x12e>
 8002d72:	2b12      	cmp	r3, #18
 8002d74:	d82a      	bhi.n	8002dcc <HAL_GPIO_Init+0xcc>
 8002d76:	2b12      	cmp	r3, #18
 8002d78:	d859      	bhi.n	8002e2e <HAL_GPIO_Init+0x12e>
 8002d7a:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <HAL_GPIO_Init+0x80>)
 8002d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d80:	08002dfb 	.word	0x08002dfb
 8002d84:	08002dd5 	.word	0x08002dd5
 8002d88:	08002de7 	.word	0x08002de7
 8002d8c:	08002e29 	.word	0x08002e29
 8002d90:	08002e2f 	.word	0x08002e2f
 8002d94:	08002e2f 	.word	0x08002e2f
 8002d98:	08002e2f 	.word	0x08002e2f
 8002d9c:	08002e2f 	.word	0x08002e2f
 8002da0:	08002e2f 	.word	0x08002e2f
 8002da4:	08002e2f 	.word	0x08002e2f
 8002da8:	08002e2f 	.word	0x08002e2f
 8002dac:	08002e2f 	.word	0x08002e2f
 8002db0:	08002e2f 	.word	0x08002e2f
 8002db4:	08002e2f 	.word	0x08002e2f
 8002db8:	08002e2f 	.word	0x08002e2f
 8002dbc:	08002e2f 	.word	0x08002e2f
 8002dc0:	08002e2f 	.word	0x08002e2f
 8002dc4:	08002ddd 	.word	0x08002ddd
 8002dc8:	08002df1 	.word	0x08002df1
 8002dcc:	4a82      	ldr	r2, [pc, #520]	; (8002fd8 <HAL_GPIO_Init+0x2d8>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d013      	beq.n	8002dfa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002dd2:	e02c      	b.n	8002e2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	623b      	str	r3, [r7, #32]
          break;
 8002dda:	e029      	b.n	8002e30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	3304      	adds	r3, #4
 8002de2:	623b      	str	r3, [r7, #32]
          break;
 8002de4:	e024      	b.n	8002e30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	3308      	adds	r3, #8
 8002dec:	623b      	str	r3, [r7, #32]
          break;
 8002dee:	e01f      	b.n	8002e30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	330c      	adds	r3, #12
 8002df6:	623b      	str	r3, [r7, #32]
          break;
 8002df8:	e01a      	b.n	8002e30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d102      	bne.n	8002e08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e02:	2304      	movs	r3, #4
 8002e04:	623b      	str	r3, [r7, #32]
          break;
 8002e06:	e013      	b.n	8002e30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d105      	bne.n	8002e1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e10:	2308      	movs	r3, #8
 8002e12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69fa      	ldr	r2, [r7, #28]
 8002e18:	611a      	str	r2, [r3, #16]
          break;
 8002e1a:	e009      	b.n	8002e30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e1c:	2308      	movs	r3, #8
 8002e1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69fa      	ldr	r2, [r7, #28]
 8002e24:	615a      	str	r2, [r3, #20]
          break;
 8002e26:	e003      	b.n	8002e30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	623b      	str	r3, [r7, #32]
          break;
 8002e2c:	e000      	b.n	8002e30 <HAL_GPIO_Init+0x130>
          break;
 8002e2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	2bff      	cmp	r3, #255	; 0xff
 8002e34:	d801      	bhi.n	8002e3a <HAL_GPIO_Init+0x13a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	e001      	b.n	8002e3e <HAL_GPIO_Init+0x13e>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	2bff      	cmp	r3, #255	; 0xff
 8002e44:	d802      	bhi.n	8002e4c <HAL_GPIO_Init+0x14c>
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	e002      	b.n	8002e52 <HAL_GPIO_Init+0x152>
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	3b08      	subs	r3, #8
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	210f      	movs	r1, #15
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	401a      	ands	r2, r3
 8002e64:	6a39      	ldr	r1, [r7, #32]
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 8090 	beq.w	8002fa0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e80:	4b56      	ldr	r3, [pc, #344]	; (8002fdc <HAL_GPIO_Init+0x2dc>)
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	4a55      	ldr	r2, [pc, #340]	; (8002fdc <HAL_GPIO_Init+0x2dc>)
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	6193      	str	r3, [r2, #24]
 8002e8c:	4b53      	ldr	r3, [pc, #332]	; (8002fdc <HAL_GPIO_Init+0x2dc>)
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	60bb      	str	r3, [r7, #8]
 8002e96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e98:	4a51      	ldr	r2, [pc, #324]	; (8002fe0 <HAL_GPIO_Init+0x2e0>)
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	089b      	lsrs	r3, r3, #2
 8002e9e:	3302      	adds	r3, #2
 8002ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	f003 0303 	and.w	r3, r3, #3
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	220f      	movs	r2, #15
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a49      	ldr	r2, [pc, #292]	; (8002fe4 <HAL_GPIO_Init+0x2e4>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d00d      	beq.n	8002ee0 <HAL_GPIO_Init+0x1e0>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a48      	ldr	r2, [pc, #288]	; (8002fe8 <HAL_GPIO_Init+0x2e8>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d007      	beq.n	8002edc <HAL_GPIO_Init+0x1dc>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a47      	ldr	r2, [pc, #284]	; (8002fec <HAL_GPIO_Init+0x2ec>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d101      	bne.n	8002ed8 <HAL_GPIO_Init+0x1d8>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e004      	b.n	8002ee2 <HAL_GPIO_Init+0x1e2>
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e002      	b.n	8002ee2 <HAL_GPIO_Init+0x1e2>
 8002edc:	2301      	movs	r3, #1
 8002ede:	e000      	b.n	8002ee2 <HAL_GPIO_Init+0x1e2>
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee4:	f002 0203 	and.w	r2, r2, #3
 8002ee8:	0092      	lsls	r2, r2, #2
 8002eea:	4093      	lsls	r3, r2
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ef2:	493b      	ldr	r1, [pc, #236]	; (8002fe0 <HAL_GPIO_Init+0x2e0>)
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	089b      	lsrs	r3, r3, #2
 8002ef8:	3302      	adds	r3, #2
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d006      	beq.n	8002f1a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f0c:	4b38      	ldr	r3, [pc, #224]	; (8002ff0 <HAL_GPIO_Init+0x2f0>)
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	4937      	ldr	r1, [pc, #220]	; (8002ff0 <HAL_GPIO_Init+0x2f0>)
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	600b      	str	r3, [r1, #0]
 8002f18:	e006      	b.n	8002f28 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f1a:	4b35      	ldr	r3, [pc, #212]	; (8002ff0 <HAL_GPIO_Init+0x2f0>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	43db      	mvns	r3, r3
 8002f22:	4933      	ldr	r1, [pc, #204]	; (8002ff0 <HAL_GPIO_Init+0x2f0>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d006      	beq.n	8002f42 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f34:	4b2e      	ldr	r3, [pc, #184]	; (8002ff0 <HAL_GPIO_Init+0x2f0>)
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	492d      	ldr	r1, [pc, #180]	; (8002ff0 <HAL_GPIO_Init+0x2f0>)
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	604b      	str	r3, [r1, #4]
 8002f40:	e006      	b.n	8002f50 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f42:	4b2b      	ldr	r3, [pc, #172]	; (8002ff0 <HAL_GPIO_Init+0x2f0>)
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	4929      	ldr	r1, [pc, #164]	; (8002ff0 <HAL_GPIO_Init+0x2f0>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d006      	beq.n	8002f6a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f5c:	4b24      	ldr	r3, [pc, #144]	; (8002ff0 <HAL_GPIO_Init+0x2f0>)
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	4923      	ldr	r1, [pc, #140]	; (8002ff0 <HAL_GPIO_Init+0x2f0>)
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	608b      	str	r3, [r1, #8]
 8002f68:	e006      	b.n	8002f78 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f6a:	4b21      	ldr	r3, [pc, #132]	; (8002ff0 <HAL_GPIO_Init+0x2f0>)
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	43db      	mvns	r3, r3
 8002f72:	491f      	ldr	r1, [pc, #124]	; (8002ff0 <HAL_GPIO_Init+0x2f0>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d006      	beq.n	8002f92 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f84:	4b1a      	ldr	r3, [pc, #104]	; (8002ff0 <HAL_GPIO_Init+0x2f0>)
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	4919      	ldr	r1, [pc, #100]	; (8002ff0 <HAL_GPIO_Init+0x2f0>)
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	60cb      	str	r3, [r1, #12]
 8002f90:	e006      	b.n	8002fa0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f92:	4b17      	ldr	r3, [pc, #92]	; (8002ff0 <HAL_GPIO_Init+0x2f0>)
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	4915      	ldr	r1, [pc, #84]	; (8002ff0 <HAL_GPIO_Init+0x2f0>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f47f aeaf 	bne.w	8002d14 <HAL_GPIO_Init+0x14>
  }
}
 8002fb6:	bf00      	nop
 8002fb8:	bf00      	nop
 8002fba:	372c      	adds	r7, #44	; 0x2c
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	10320000 	.word	0x10320000
 8002fc8:	10310000 	.word	0x10310000
 8002fcc:	10220000 	.word	0x10220000
 8002fd0:	10210000 	.word	0x10210000
 8002fd4:	10120000 	.word	0x10120000
 8002fd8:	10110000 	.word	0x10110000
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	40010000 	.word	0x40010000
 8002fe4:	40010800 	.word	0x40010800
 8002fe8:	40010c00 	.word	0x40010c00
 8002fec:	40011000 	.word	0x40011000
 8002ff0:	40010400 	.word	0x40010400

08002ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	807b      	strh	r3, [r7, #2]
 8003000:	4613      	mov	r3, r2
 8003002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003004:	787b      	ldrb	r3, [r7, #1]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800300a:	887a      	ldrh	r2, [r7, #2]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003010:	e003      	b.n	800301a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003012:	887b      	ldrh	r3, [r7, #2]
 8003014:	041a      	lsls	r2, r3, #16
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	611a      	str	r2, [r3, #16]
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr

08003024 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	460b      	mov	r3, r1
 800302e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003036:	887a      	ldrh	r2, [r7, #2]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4013      	ands	r3, r2
 800303c:	041a      	lsls	r2, r3, #16
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	43d9      	mvns	r1, r3
 8003042:	887b      	ldrh	r3, [r7, #2]
 8003044:	400b      	ands	r3, r1
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	611a      	str	r2, [r3, #16]
}
 800304c:	bf00      	nop
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	bc80      	pop	{r7}
 8003054:	4770      	bx	lr

08003056 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b084      	sub	sp, #16
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e034      	b.n	80030d2 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003070:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f245 5255 	movw	r2, #21845	; 0x5555
 800307a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6852      	ldr	r2, [r2, #4]
 8003084:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6892      	ldr	r2, [r2, #8]
 800308e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003090:	f7fe fc20 	bl	80018d4 <HAL_GetTick>
 8003094:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003096:	e00f      	b.n	80030b8 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003098:	f7fe fc1c 	bl	80018d4 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b27      	cmp	r3, #39	; 0x27
 80030a4:	d908      	bls.n	80030b8 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e00c      	b.n	80030d2 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1e8      	bne.n	8003098 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80030ce:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80030ea:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr

080030f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e26c      	b.n	80035e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 8087 	beq.w	8003226 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003118:	4b92      	ldr	r3, [pc, #584]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 030c 	and.w	r3, r3, #12
 8003120:	2b04      	cmp	r3, #4
 8003122:	d00c      	beq.n	800313e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003124:	4b8f      	ldr	r3, [pc, #572]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 030c 	and.w	r3, r3, #12
 800312c:	2b08      	cmp	r3, #8
 800312e:	d112      	bne.n	8003156 <HAL_RCC_OscConfig+0x5e>
 8003130:	4b8c      	ldr	r3, [pc, #560]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800313c:	d10b      	bne.n	8003156 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800313e:	4b89      	ldr	r3, [pc, #548]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d06c      	beq.n	8003224 <HAL_RCC_OscConfig+0x12c>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d168      	bne.n	8003224 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e246      	b.n	80035e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800315e:	d106      	bne.n	800316e <HAL_RCC_OscConfig+0x76>
 8003160:	4b80      	ldr	r3, [pc, #512]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a7f      	ldr	r2, [pc, #508]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	e02e      	b.n	80031cc <HAL_RCC_OscConfig+0xd4>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10c      	bne.n	8003190 <HAL_RCC_OscConfig+0x98>
 8003176:	4b7b      	ldr	r3, [pc, #492]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a7a      	ldr	r2, [pc, #488]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 800317c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	4b78      	ldr	r3, [pc, #480]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a77      	ldr	r2, [pc, #476]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003188:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	e01d      	b.n	80031cc <HAL_RCC_OscConfig+0xd4>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003198:	d10c      	bne.n	80031b4 <HAL_RCC_OscConfig+0xbc>
 800319a:	4b72      	ldr	r3, [pc, #456]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a71      	ldr	r2, [pc, #452]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 80031a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	4b6f      	ldr	r3, [pc, #444]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a6e      	ldr	r2, [pc, #440]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 80031ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	e00b      	b.n	80031cc <HAL_RCC_OscConfig+0xd4>
 80031b4:	4b6b      	ldr	r3, [pc, #428]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a6a      	ldr	r2, [pc, #424]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 80031ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	4b68      	ldr	r3, [pc, #416]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a67      	ldr	r2, [pc, #412]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 80031c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d013      	beq.n	80031fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d4:	f7fe fb7e 	bl	80018d4 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031dc:	f7fe fb7a 	bl	80018d4 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b64      	cmp	r3, #100	; 0x64
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e1fa      	b.n	80035e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ee:	4b5d      	ldr	r3, [pc, #372]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f0      	beq.n	80031dc <HAL_RCC_OscConfig+0xe4>
 80031fa:	e014      	b.n	8003226 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fc:	f7fe fb6a 	bl	80018d4 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003204:	f7fe fb66 	bl	80018d4 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b64      	cmp	r3, #100	; 0x64
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e1e6      	b.n	80035e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003216:	4b53      	ldr	r3, [pc, #332]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f0      	bne.n	8003204 <HAL_RCC_OscConfig+0x10c>
 8003222:	e000      	b.n	8003226 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d063      	beq.n	80032fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003232:	4b4c      	ldr	r3, [pc, #304]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f003 030c 	and.w	r3, r3, #12
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00b      	beq.n	8003256 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800323e:	4b49      	ldr	r3, [pc, #292]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f003 030c 	and.w	r3, r3, #12
 8003246:	2b08      	cmp	r3, #8
 8003248:	d11c      	bne.n	8003284 <HAL_RCC_OscConfig+0x18c>
 800324a:	4b46      	ldr	r3, [pc, #280]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d116      	bne.n	8003284 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003256:	4b43      	ldr	r3, [pc, #268]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d005      	beq.n	800326e <HAL_RCC_OscConfig+0x176>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d001      	beq.n	800326e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e1ba      	b.n	80035e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800326e:	4b3d      	ldr	r3, [pc, #244]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	4939      	ldr	r1, [pc, #228]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 800327e:	4313      	orrs	r3, r2
 8003280:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003282:	e03a      	b.n	80032fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d020      	beq.n	80032ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800328c:	4b36      	ldr	r3, [pc, #216]	; (8003368 <HAL_RCC_OscConfig+0x270>)
 800328e:	2201      	movs	r2, #1
 8003290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003292:	f7fe fb1f 	bl	80018d4 <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800329a:	f7fe fb1b 	bl	80018d4 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e19b      	b.n	80035e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ac:	4b2d      	ldr	r3, [pc, #180]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0f0      	beq.n	800329a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b8:	4b2a      	ldr	r3, [pc, #168]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	4927      	ldr	r1, [pc, #156]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	600b      	str	r3, [r1, #0]
 80032cc:	e015      	b.n	80032fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ce:	4b26      	ldr	r3, [pc, #152]	; (8003368 <HAL_RCC_OscConfig+0x270>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d4:	f7fe fafe 	bl	80018d4 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032dc:	f7fe fafa 	bl	80018d4 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e17a      	b.n	80035e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ee:	4b1d      	ldr	r3, [pc, #116]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f0      	bne.n	80032dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b00      	cmp	r3, #0
 8003304:	d03a      	beq.n	800337c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d019      	beq.n	8003342 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800330e:	4b17      	ldr	r3, [pc, #92]	; (800336c <HAL_RCC_OscConfig+0x274>)
 8003310:	2201      	movs	r2, #1
 8003312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003314:	f7fe fade 	bl	80018d4 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800331c:	f7fe fada 	bl	80018d4 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e15a      	b.n	80035e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800332e:	4b0d      	ldr	r3, [pc, #52]	; (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0f0      	beq.n	800331c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800333a:	2001      	movs	r0, #1
 800333c:	f000 fad8 	bl	80038f0 <RCC_Delay>
 8003340:	e01c      	b.n	800337c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003342:	4b0a      	ldr	r3, [pc, #40]	; (800336c <HAL_RCC_OscConfig+0x274>)
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003348:	f7fe fac4 	bl	80018d4 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800334e:	e00f      	b.n	8003370 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003350:	f7fe fac0 	bl	80018d4 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d908      	bls.n	8003370 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e140      	b.n	80035e4 <HAL_RCC_OscConfig+0x4ec>
 8003362:	bf00      	nop
 8003364:	40021000 	.word	0x40021000
 8003368:	42420000 	.word	0x42420000
 800336c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003370:	4b9e      	ldr	r3, [pc, #632]	; (80035ec <HAL_RCC_OscConfig+0x4f4>)
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1e9      	bne.n	8003350 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 80a6 	beq.w	80034d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800338a:	2300      	movs	r3, #0
 800338c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800338e:	4b97      	ldr	r3, [pc, #604]	; (80035ec <HAL_RCC_OscConfig+0x4f4>)
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10d      	bne.n	80033b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800339a:	4b94      	ldr	r3, [pc, #592]	; (80035ec <HAL_RCC_OscConfig+0x4f4>)
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	4a93      	ldr	r2, [pc, #588]	; (80035ec <HAL_RCC_OscConfig+0x4f4>)
 80033a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a4:	61d3      	str	r3, [r2, #28]
 80033a6:	4b91      	ldr	r3, [pc, #580]	; (80035ec <HAL_RCC_OscConfig+0x4f4>)
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033b2:	2301      	movs	r3, #1
 80033b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b6:	4b8e      	ldr	r3, [pc, #568]	; (80035f0 <HAL_RCC_OscConfig+0x4f8>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d118      	bne.n	80033f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033c2:	4b8b      	ldr	r3, [pc, #556]	; (80035f0 <HAL_RCC_OscConfig+0x4f8>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a8a      	ldr	r2, [pc, #552]	; (80035f0 <HAL_RCC_OscConfig+0x4f8>)
 80033c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ce:	f7fe fa81 	bl	80018d4 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d6:	f7fe fa7d 	bl	80018d4 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b64      	cmp	r3, #100	; 0x64
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e0fd      	b.n	80035e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e8:	4b81      	ldr	r3, [pc, #516]	; (80035f0 <HAL_RCC_OscConfig+0x4f8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0f0      	beq.n	80033d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d106      	bne.n	800340a <HAL_RCC_OscConfig+0x312>
 80033fc:	4b7b      	ldr	r3, [pc, #492]	; (80035ec <HAL_RCC_OscConfig+0x4f4>)
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	4a7a      	ldr	r2, [pc, #488]	; (80035ec <HAL_RCC_OscConfig+0x4f4>)
 8003402:	f043 0301 	orr.w	r3, r3, #1
 8003406:	6213      	str	r3, [r2, #32]
 8003408:	e02d      	b.n	8003466 <HAL_RCC_OscConfig+0x36e>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10c      	bne.n	800342c <HAL_RCC_OscConfig+0x334>
 8003412:	4b76      	ldr	r3, [pc, #472]	; (80035ec <HAL_RCC_OscConfig+0x4f4>)
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	4a75      	ldr	r2, [pc, #468]	; (80035ec <HAL_RCC_OscConfig+0x4f4>)
 8003418:	f023 0301 	bic.w	r3, r3, #1
 800341c:	6213      	str	r3, [r2, #32]
 800341e:	4b73      	ldr	r3, [pc, #460]	; (80035ec <HAL_RCC_OscConfig+0x4f4>)
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	4a72      	ldr	r2, [pc, #456]	; (80035ec <HAL_RCC_OscConfig+0x4f4>)
 8003424:	f023 0304 	bic.w	r3, r3, #4
 8003428:	6213      	str	r3, [r2, #32]
 800342a:	e01c      	b.n	8003466 <HAL_RCC_OscConfig+0x36e>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	2b05      	cmp	r3, #5
 8003432:	d10c      	bne.n	800344e <HAL_RCC_OscConfig+0x356>
 8003434:	4b6d      	ldr	r3, [pc, #436]	; (80035ec <HAL_RCC_OscConfig+0x4f4>)
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	4a6c      	ldr	r2, [pc, #432]	; (80035ec <HAL_RCC_OscConfig+0x4f4>)
 800343a:	f043 0304 	orr.w	r3, r3, #4
 800343e:	6213      	str	r3, [r2, #32]
 8003440:	4b6a      	ldr	r3, [pc, #424]	; (80035ec <HAL_RCC_OscConfig+0x4f4>)
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	4a69      	ldr	r2, [pc, #420]	; (80035ec <HAL_RCC_OscConfig+0x4f4>)
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	6213      	str	r3, [r2, #32]
 800344c:	e00b      	b.n	8003466 <HAL_RCC_OscConfig+0x36e>
 800344e:	4b67      	ldr	r3, [pc, #412]	; (80035ec <HAL_RCC_OscConfig+0x4f4>)
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	4a66      	ldr	r2, [pc, #408]	; (80035ec <HAL_RCC_OscConfig+0x4f4>)
 8003454:	f023 0301 	bic.w	r3, r3, #1
 8003458:	6213      	str	r3, [r2, #32]
 800345a:	4b64      	ldr	r3, [pc, #400]	; (80035ec <HAL_RCC_OscConfig+0x4f4>)
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	4a63      	ldr	r2, [pc, #396]	; (80035ec <HAL_RCC_OscConfig+0x4f4>)
 8003460:	f023 0304 	bic.w	r3, r3, #4
 8003464:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d015      	beq.n	800349a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800346e:	f7fe fa31 	bl	80018d4 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003474:	e00a      	b.n	800348c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003476:	f7fe fa2d 	bl	80018d4 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	f241 3288 	movw	r2, #5000	; 0x1388
 8003484:	4293      	cmp	r3, r2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e0ab      	b.n	80035e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348c:	4b57      	ldr	r3, [pc, #348]	; (80035ec <HAL_RCC_OscConfig+0x4f4>)
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0ee      	beq.n	8003476 <HAL_RCC_OscConfig+0x37e>
 8003498:	e014      	b.n	80034c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800349a:	f7fe fa1b 	bl	80018d4 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a0:	e00a      	b.n	80034b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a2:	f7fe fa17 	bl	80018d4 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e095      	b.n	80035e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b8:	4b4c      	ldr	r3, [pc, #304]	; (80035ec <HAL_RCC_OscConfig+0x4f4>)
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1ee      	bne.n	80034a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034c4:	7dfb      	ldrb	r3, [r7, #23]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d105      	bne.n	80034d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ca:	4b48      	ldr	r3, [pc, #288]	; (80035ec <HAL_RCC_OscConfig+0x4f4>)
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	4a47      	ldr	r2, [pc, #284]	; (80035ec <HAL_RCC_OscConfig+0x4f4>)
 80034d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 8081 	beq.w	80035e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034e0:	4b42      	ldr	r3, [pc, #264]	; (80035ec <HAL_RCC_OscConfig+0x4f4>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 030c 	and.w	r3, r3, #12
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d061      	beq.n	80035b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d146      	bne.n	8003582 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f4:	4b3f      	ldr	r3, [pc, #252]	; (80035f4 <HAL_RCC_OscConfig+0x4fc>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fa:	f7fe f9eb 	bl	80018d4 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003502:	f7fe f9e7 	bl	80018d4 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e067      	b.n	80035e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003514:	4b35      	ldr	r3, [pc, #212]	; (80035ec <HAL_RCC_OscConfig+0x4f4>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1f0      	bne.n	8003502 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003528:	d108      	bne.n	800353c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800352a:	4b30      	ldr	r3, [pc, #192]	; (80035ec <HAL_RCC_OscConfig+0x4f4>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	492d      	ldr	r1, [pc, #180]	; (80035ec <HAL_RCC_OscConfig+0x4f4>)
 8003538:	4313      	orrs	r3, r2
 800353a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800353c:	4b2b      	ldr	r3, [pc, #172]	; (80035ec <HAL_RCC_OscConfig+0x4f4>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a19      	ldr	r1, [r3, #32]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	430b      	orrs	r3, r1
 800354e:	4927      	ldr	r1, [pc, #156]	; (80035ec <HAL_RCC_OscConfig+0x4f4>)
 8003550:	4313      	orrs	r3, r2
 8003552:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003554:	4b27      	ldr	r3, [pc, #156]	; (80035f4 <HAL_RCC_OscConfig+0x4fc>)
 8003556:	2201      	movs	r2, #1
 8003558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355a:	f7fe f9bb 	bl	80018d4 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003562:	f7fe f9b7 	bl	80018d4 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e037      	b.n	80035e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003574:	4b1d      	ldr	r3, [pc, #116]	; (80035ec <HAL_RCC_OscConfig+0x4f4>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0f0      	beq.n	8003562 <HAL_RCC_OscConfig+0x46a>
 8003580:	e02f      	b.n	80035e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003582:	4b1c      	ldr	r3, [pc, #112]	; (80035f4 <HAL_RCC_OscConfig+0x4fc>)
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003588:	f7fe f9a4 	bl	80018d4 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003590:	f7fe f9a0 	bl	80018d4 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e020      	b.n	80035e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035a2:	4b12      	ldr	r3, [pc, #72]	; (80035ec <HAL_RCC_OscConfig+0x4f4>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0x498>
 80035ae:	e018      	b.n	80035e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e013      	b.n	80035e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035bc:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <HAL_RCC_OscConfig+0x4f4>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d106      	bne.n	80035de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035da:	429a      	cmp	r2, r3
 80035dc:	d001      	beq.n	80035e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e000      	b.n	80035e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3718      	adds	r7, #24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40021000 	.word	0x40021000
 80035f0:	40007000 	.word	0x40007000
 80035f4:	42420060 	.word	0x42420060

080035f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e0d0      	b.n	80037ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800360c:	4b6a      	ldr	r3, [pc, #424]	; (80037b8 <HAL_RCC_ClockConfig+0x1c0>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	429a      	cmp	r2, r3
 8003618:	d910      	bls.n	800363c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361a:	4b67      	ldr	r3, [pc, #412]	; (80037b8 <HAL_RCC_ClockConfig+0x1c0>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f023 0207 	bic.w	r2, r3, #7
 8003622:	4965      	ldr	r1, [pc, #404]	; (80037b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	4313      	orrs	r3, r2
 8003628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800362a:	4b63      	ldr	r3, [pc, #396]	; (80037b8 <HAL_RCC_ClockConfig+0x1c0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0307 	and.w	r3, r3, #7
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	429a      	cmp	r2, r3
 8003636:	d001      	beq.n	800363c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e0b8      	b.n	80037ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d020      	beq.n	800368a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d005      	beq.n	8003660 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003654:	4b59      	ldr	r3, [pc, #356]	; (80037bc <HAL_RCC_ClockConfig+0x1c4>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	4a58      	ldr	r2, [pc, #352]	; (80037bc <HAL_RCC_ClockConfig+0x1c4>)
 800365a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800365e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0308 	and.w	r3, r3, #8
 8003668:	2b00      	cmp	r3, #0
 800366a:	d005      	beq.n	8003678 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800366c:	4b53      	ldr	r3, [pc, #332]	; (80037bc <HAL_RCC_ClockConfig+0x1c4>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	4a52      	ldr	r2, [pc, #328]	; (80037bc <HAL_RCC_ClockConfig+0x1c4>)
 8003672:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003676:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003678:	4b50      	ldr	r3, [pc, #320]	; (80037bc <HAL_RCC_ClockConfig+0x1c4>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	494d      	ldr	r1, [pc, #308]	; (80037bc <HAL_RCC_ClockConfig+0x1c4>)
 8003686:	4313      	orrs	r3, r2
 8003688:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d040      	beq.n	8003718 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d107      	bne.n	80036ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800369e:	4b47      	ldr	r3, [pc, #284]	; (80037bc <HAL_RCC_ClockConfig+0x1c4>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d115      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e07f      	b.n	80037ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d107      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b6:	4b41      	ldr	r3, [pc, #260]	; (80037bc <HAL_RCC_ClockConfig+0x1c4>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d109      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e073      	b.n	80037ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c6:	4b3d      	ldr	r3, [pc, #244]	; (80037bc <HAL_RCC_ClockConfig+0x1c4>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e06b      	b.n	80037ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036d6:	4b39      	ldr	r3, [pc, #228]	; (80037bc <HAL_RCC_ClockConfig+0x1c4>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f023 0203 	bic.w	r2, r3, #3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	4936      	ldr	r1, [pc, #216]	; (80037bc <HAL_RCC_ClockConfig+0x1c4>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036e8:	f7fe f8f4 	bl	80018d4 <HAL_GetTick>
 80036ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ee:	e00a      	b.n	8003706 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036f0:	f7fe f8f0 	bl	80018d4 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fe:	4293      	cmp	r3, r2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e053      	b.n	80037ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003706:	4b2d      	ldr	r3, [pc, #180]	; (80037bc <HAL_RCC_ClockConfig+0x1c4>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f003 020c 	and.w	r2, r3, #12
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	429a      	cmp	r2, r3
 8003716:	d1eb      	bne.n	80036f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003718:	4b27      	ldr	r3, [pc, #156]	; (80037b8 <HAL_RCC_ClockConfig+0x1c0>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d210      	bcs.n	8003748 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003726:	4b24      	ldr	r3, [pc, #144]	; (80037b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f023 0207 	bic.w	r2, r3, #7
 800372e:	4922      	ldr	r1, [pc, #136]	; (80037b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	4313      	orrs	r3, r2
 8003734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003736:	4b20      	ldr	r3, [pc, #128]	; (80037b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	429a      	cmp	r2, r3
 8003742:	d001      	beq.n	8003748 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e032      	b.n	80037ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b00      	cmp	r3, #0
 8003752:	d008      	beq.n	8003766 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003754:	4b19      	ldr	r3, [pc, #100]	; (80037bc <HAL_RCC_ClockConfig+0x1c4>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	4916      	ldr	r1, [pc, #88]	; (80037bc <HAL_RCC_ClockConfig+0x1c4>)
 8003762:	4313      	orrs	r3, r2
 8003764:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b00      	cmp	r3, #0
 8003770:	d009      	beq.n	8003786 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003772:	4b12      	ldr	r3, [pc, #72]	; (80037bc <HAL_RCC_ClockConfig+0x1c4>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	490e      	ldr	r1, [pc, #56]	; (80037bc <HAL_RCC_ClockConfig+0x1c4>)
 8003782:	4313      	orrs	r3, r2
 8003784:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003786:	f000 f821 	bl	80037cc <HAL_RCC_GetSysClockFreq>
 800378a:	4602      	mov	r2, r0
 800378c:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <HAL_RCC_ClockConfig+0x1c4>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	091b      	lsrs	r3, r3, #4
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	490a      	ldr	r1, [pc, #40]	; (80037c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003798:	5ccb      	ldrb	r3, [r1, r3]
 800379a:	fa22 f303 	lsr.w	r3, r2, r3
 800379e:	4a09      	ldr	r2, [pc, #36]	; (80037c4 <HAL_RCC_ClockConfig+0x1cc>)
 80037a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037a2:	4b09      	ldr	r3, [pc, #36]	; (80037c8 <HAL_RCC_ClockConfig+0x1d0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fe f852 	bl	8001850 <HAL_InitTick>

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40022000 	.word	0x40022000
 80037bc:	40021000 	.word	0x40021000
 80037c0:	08004eac 	.word	0x08004eac
 80037c4:	20000000 	.word	0x20000000
 80037c8:	200001e4 	.word	0x200001e4

080037cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037cc:	b490      	push	{r4, r7}
 80037ce:	b08a      	sub	sp, #40	; 0x28
 80037d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80037d2:	4b2a      	ldr	r3, [pc, #168]	; (800387c <HAL_RCC_GetSysClockFreq+0xb0>)
 80037d4:	1d3c      	adds	r4, r7, #4
 80037d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80037dc:	f240 2301 	movw	r3, #513	; 0x201
 80037e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	61fb      	str	r3, [r7, #28]
 80037e6:	2300      	movs	r3, #0
 80037e8:	61bb      	str	r3, [r7, #24]
 80037ea:	2300      	movs	r3, #0
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24
 80037ee:	2300      	movs	r3, #0
 80037f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037f6:	4b22      	ldr	r3, [pc, #136]	; (8003880 <HAL_RCC_GetSysClockFreq+0xb4>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f003 030c 	and.w	r3, r3, #12
 8003802:	2b04      	cmp	r3, #4
 8003804:	d002      	beq.n	800380c <HAL_RCC_GetSysClockFreq+0x40>
 8003806:	2b08      	cmp	r3, #8
 8003808:	d003      	beq.n	8003812 <HAL_RCC_GetSysClockFreq+0x46>
 800380a:	e02d      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800380c:	4b1d      	ldr	r3, [pc, #116]	; (8003884 <HAL_RCC_GetSysClockFreq+0xb8>)
 800380e:	623b      	str	r3, [r7, #32]
      break;
 8003810:	e02d      	b.n	800386e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	0c9b      	lsrs	r3, r3, #18
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800381e:	4413      	add	r3, r2
 8003820:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003824:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d013      	beq.n	8003858 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003830:	4b13      	ldr	r3, [pc, #76]	; (8003880 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	0c5b      	lsrs	r3, r3, #17
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800383e:	4413      	add	r3, r2
 8003840:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003844:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	4a0e      	ldr	r2, [pc, #56]	; (8003884 <HAL_RCC_GetSysClockFreq+0xb8>)
 800384a:	fb02 f203 	mul.w	r2, r2, r3
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	fbb2 f3f3 	udiv	r3, r2, r3
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
 8003856:	e004      	b.n	8003862 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	4a0b      	ldr	r2, [pc, #44]	; (8003888 <HAL_RCC_GetSysClockFreq+0xbc>)
 800385c:	fb02 f303 	mul.w	r3, r2, r3
 8003860:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	623b      	str	r3, [r7, #32]
      break;
 8003866:	e002      	b.n	800386e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003868:	4b06      	ldr	r3, [pc, #24]	; (8003884 <HAL_RCC_GetSysClockFreq+0xb8>)
 800386a:	623b      	str	r3, [r7, #32]
      break;
 800386c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800386e:	6a3b      	ldr	r3, [r7, #32]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3728      	adds	r7, #40	; 0x28
 8003874:	46bd      	mov	sp, r7
 8003876:	bc90      	pop	{r4, r7}
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	08004e9c 	.word	0x08004e9c
 8003880:	40021000 	.word	0x40021000
 8003884:	007a1200 	.word	0x007a1200
 8003888:	003d0900 	.word	0x003d0900

0800388c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003890:	4b02      	ldr	r3, [pc, #8]	; (800389c <HAL_RCC_GetHCLKFreq+0x10>)
 8003892:	681b      	ldr	r3, [r3, #0]
}
 8003894:	4618      	mov	r0, r3
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr
 800389c:	20000000 	.word	0x20000000

080038a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038a4:	f7ff fff2 	bl	800388c <HAL_RCC_GetHCLKFreq>
 80038a8:	4602      	mov	r2, r0
 80038aa:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	0a1b      	lsrs	r3, r3, #8
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	4903      	ldr	r1, [pc, #12]	; (80038c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038b6:	5ccb      	ldrb	r3, [r1, r3]
 80038b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038bc:	4618      	mov	r0, r3
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40021000 	.word	0x40021000
 80038c4:	08004ebc 	.word	0x08004ebc

080038c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038cc:	f7ff ffde 	bl	800388c <HAL_RCC_GetHCLKFreq>
 80038d0:	4602      	mov	r2, r0
 80038d2:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	0adb      	lsrs	r3, r3, #11
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	4903      	ldr	r1, [pc, #12]	; (80038ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80038de:	5ccb      	ldrb	r3, [r1, r3]
 80038e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40021000 	.word	0x40021000
 80038ec:	08004ebc 	.word	0x08004ebc

080038f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038f8:	4b0a      	ldr	r3, [pc, #40]	; (8003924 <RCC_Delay+0x34>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a0a      	ldr	r2, [pc, #40]	; (8003928 <RCC_Delay+0x38>)
 80038fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003902:	0a5b      	lsrs	r3, r3, #9
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	fb02 f303 	mul.w	r3, r2, r3
 800390a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800390c:	bf00      	nop
  }
  while (Delay --);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	1e5a      	subs	r2, r3, #1
 8003912:	60fa      	str	r2, [r7, #12]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1f9      	bne.n	800390c <RCC_Delay+0x1c>
}
 8003918:	bf00      	nop
 800391a:	bf00      	nop
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	bc80      	pop	{r7}
 8003922:	4770      	bx	lr
 8003924:	20000000 	.word	0x20000000
 8003928:	10624dd3 	.word	0x10624dd3

0800392c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e041      	b.n	80039c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d106      	bne.n	8003958 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7fc fe64 	bl	8000620 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2202      	movs	r2, #2
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3304      	adds	r3, #4
 8003968:	4619      	mov	r1, r3
 800396a:	4610      	mov	r0, r2
 800396c:	f000 fa62 	bl	8003e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d001      	beq.n	80039e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e02d      	b.n	8003a40 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a16      	ldr	r2, [pc, #88]	; (8003a4c <HAL_TIM_Base_Start+0x80>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d009      	beq.n	8003a0a <HAL_TIM_Base_Start+0x3e>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039fe:	d004      	beq.n	8003a0a <HAL_TIM_Base_Start+0x3e>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a12      	ldr	r2, [pc, #72]	; (8003a50 <HAL_TIM_Base_Start+0x84>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d111      	bne.n	8003a2e <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2b06      	cmp	r3, #6
 8003a1a:	d010      	beq.n	8003a3e <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0201 	orr.w	r2, r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a2c:	e007      	b.n	8003a3e <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f042 0201 	orr.w	r2, r2, #1
 8003a3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3714      	adds	r7, #20
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bc80      	pop	{r7}
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	40012c00 	.word	0x40012c00
 8003a50:	40000400 	.word	0x40000400

08003a54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d122      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d11b      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f06f 0202 	mvn.w	r2, #2
 8003a80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f9b1 	bl	8003dfe <HAL_TIM_IC_CaptureCallback>
 8003a9c:	e005      	b.n	8003aaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f9a4 	bl	8003dec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f9b3 	bl	8003e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f003 0304 	and.w	r3, r3, #4
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	d122      	bne.n	8003b04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	d11b      	bne.n	8003b04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f06f 0204 	mvn.w	r2, #4
 8003ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2202      	movs	r2, #2
 8003ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f987 	bl	8003dfe <HAL_TIM_IC_CaptureCallback>
 8003af0:	e005      	b.n	8003afe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f97a 	bl	8003dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f989 	bl	8003e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d122      	bne.n	8003b58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f003 0308 	and.w	r3, r3, #8
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	d11b      	bne.n	8003b58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f06f 0208 	mvn.w	r2, #8
 8003b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2204      	movs	r2, #4
 8003b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f95d 	bl	8003dfe <HAL_TIM_IC_CaptureCallback>
 8003b44:	e005      	b.n	8003b52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f950 	bl	8003dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f95f 	bl	8003e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f003 0310 	and.w	r3, r3, #16
 8003b62:	2b10      	cmp	r3, #16
 8003b64:	d122      	bne.n	8003bac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f003 0310 	and.w	r3, r3, #16
 8003b70:	2b10      	cmp	r3, #16
 8003b72:	d11b      	bne.n	8003bac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f06f 0210 	mvn.w	r2, #16
 8003b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2208      	movs	r2, #8
 8003b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f933 	bl	8003dfe <HAL_TIM_IC_CaptureCallback>
 8003b98:	e005      	b.n	8003ba6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f926 	bl	8003dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 f935 	bl	8003e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d10e      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d107      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f06f 0201 	mvn.w	r2, #1
 8003bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7fc feb6 	bl	8000944 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be2:	2b80      	cmp	r3, #128	; 0x80
 8003be4:	d10e      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf0:	2b80      	cmp	r3, #128	; 0x80
 8003bf2:	d107      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 fa67 	bl	80040d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0e:	2b40      	cmp	r3, #64	; 0x40
 8003c10:	d10e      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1c:	2b40      	cmp	r3, #64	; 0x40
 8003c1e:	d107      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f8f9 	bl	8003e22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f003 0320 	and.w	r3, r3, #32
 8003c3a:	2b20      	cmp	r3, #32
 8003c3c:	d10e      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f003 0320 	and.w	r3, r3, #32
 8003c48:	2b20      	cmp	r3, #32
 8003c4a:	d107      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f06f 0220 	mvn.w	r2, #32
 8003c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 fa32 	bl	80040c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c5c:	bf00      	nop
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d101      	bne.n	8003c7c <HAL_TIM_ConfigClockSource+0x18>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	e0b3      	b.n	8003de4 <HAL_TIM_ConfigClockSource+0x180>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2202      	movs	r2, #2
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ca2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cb4:	d03e      	beq.n	8003d34 <HAL_TIM_ConfigClockSource+0xd0>
 8003cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cba:	f200 8087 	bhi.w	8003dcc <HAL_TIM_ConfigClockSource+0x168>
 8003cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc2:	f000 8085 	beq.w	8003dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cca:	d87f      	bhi.n	8003dcc <HAL_TIM_ConfigClockSource+0x168>
 8003ccc:	2b70      	cmp	r3, #112	; 0x70
 8003cce:	d01a      	beq.n	8003d06 <HAL_TIM_ConfigClockSource+0xa2>
 8003cd0:	2b70      	cmp	r3, #112	; 0x70
 8003cd2:	d87b      	bhi.n	8003dcc <HAL_TIM_ConfigClockSource+0x168>
 8003cd4:	2b60      	cmp	r3, #96	; 0x60
 8003cd6:	d050      	beq.n	8003d7a <HAL_TIM_ConfigClockSource+0x116>
 8003cd8:	2b60      	cmp	r3, #96	; 0x60
 8003cda:	d877      	bhi.n	8003dcc <HAL_TIM_ConfigClockSource+0x168>
 8003cdc:	2b50      	cmp	r3, #80	; 0x50
 8003cde:	d03c      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0xf6>
 8003ce0:	2b50      	cmp	r3, #80	; 0x50
 8003ce2:	d873      	bhi.n	8003dcc <HAL_TIM_ConfigClockSource+0x168>
 8003ce4:	2b40      	cmp	r3, #64	; 0x40
 8003ce6:	d058      	beq.n	8003d9a <HAL_TIM_ConfigClockSource+0x136>
 8003ce8:	2b40      	cmp	r3, #64	; 0x40
 8003cea:	d86f      	bhi.n	8003dcc <HAL_TIM_ConfigClockSource+0x168>
 8003cec:	2b30      	cmp	r3, #48	; 0x30
 8003cee:	d064      	beq.n	8003dba <HAL_TIM_ConfigClockSource+0x156>
 8003cf0:	2b30      	cmp	r3, #48	; 0x30
 8003cf2:	d86b      	bhi.n	8003dcc <HAL_TIM_ConfigClockSource+0x168>
 8003cf4:	2b20      	cmp	r3, #32
 8003cf6:	d060      	beq.n	8003dba <HAL_TIM_ConfigClockSource+0x156>
 8003cf8:	2b20      	cmp	r3, #32
 8003cfa:	d867      	bhi.n	8003dcc <HAL_TIM_ConfigClockSource+0x168>
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d05c      	beq.n	8003dba <HAL_TIM_ConfigClockSource+0x156>
 8003d00:	2b10      	cmp	r3, #16
 8003d02:	d05a      	beq.n	8003dba <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003d04:	e062      	b.n	8003dcc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6818      	ldr	r0, [r3, #0]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	6899      	ldr	r1, [r3, #8]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f000 f95c 	bl	8003fd2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d28:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	609a      	str	r2, [r3, #8]
      break;
 8003d32:	e04e      	b.n	8003dd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6818      	ldr	r0, [r3, #0]
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	6899      	ldr	r1, [r3, #8]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f000 f945 	bl	8003fd2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689a      	ldr	r2, [r3, #8]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d56:	609a      	str	r2, [r3, #8]
      break;
 8003d58:	e03b      	b.n	8003dd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6818      	ldr	r0, [r3, #0]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	6859      	ldr	r1, [r3, #4]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	461a      	mov	r2, r3
 8003d68:	f000 f8bc 	bl	8003ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2150      	movs	r1, #80	; 0x50
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 f913 	bl	8003f9e <TIM_ITRx_SetConfig>
      break;
 8003d78:	e02b      	b.n	8003dd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6818      	ldr	r0, [r3, #0]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	6859      	ldr	r1, [r3, #4]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	461a      	mov	r2, r3
 8003d88:	f000 f8da 	bl	8003f40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2160      	movs	r1, #96	; 0x60
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 f903 	bl	8003f9e <TIM_ITRx_SetConfig>
      break;
 8003d98:	e01b      	b.n	8003dd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6818      	ldr	r0, [r3, #0]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	6859      	ldr	r1, [r3, #4]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	461a      	mov	r2, r3
 8003da8:	f000 f89c 	bl	8003ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2140      	movs	r1, #64	; 0x40
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 f8f3 	bl	8003f9e <TIM_ITRx_SetConfig>
      break;
 8003db8:	e00b      	b.n	8003dd2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	f000 f8ea 	bl	8003f9e <TIM_ITRx_SetConfig>
        break;
 8003dca:	e002      	b.n	8003dd2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003dcc:	bf00      	nop
 8003dce:	e000      	b.n	8003dd2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003dd0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bc80      	pop	{r7}
 8003dfc:	4770      	bx	lr

08003dfe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	4770      	bx	lr

08003e10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bc80      	pop	{r7}
 8003e20:	4770      	bx	lr

08003e22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bc80      	pop	{r7}
 8003e32:	4770      	bx	lr

08003e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a25      	ldr	r2, [pc, #148]	; (8003edc <TIM_Base_SetConfig+0xa8>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d007      	beq.n	8003e5c <TIM_Base_SetConfig+0x28>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e52:	d003      	beq.n	8003e5c <TIM_Base_SetConfig+0x28>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a22      	ldr	r2, [pc, #136]	; (8003ee0 <TIM_Base_SetConfig+0xac>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d108      	bne.n	8003e6e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a1a      	ldr	r2, [pc, #104]	; (8003edc <TIM_Base_SetConfig+0xa8>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d007      	beq.n	8003e86 <TIM_Base_SetConfig+0x52>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e7c:	d003      	beq.n	8003e86 <TIM_Base_SetConfig+0x52>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a17      	ldr	r2, [pc, #92]	; (8003ee0 <TIM_Base_SetConfig+0xac>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d108      	bne.n	8003e98 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a07      	ldr	r2, [pc, #28]	; (8003edc <TIM_Base_SetConfig+0xa8>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d103      	bne.n	8003ecc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	691a      	ldr	r2, [r3, #16]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	615a      	str	r2, [r3, #20]
}
 8003ed2:	bf00      	nop
 8003ed4:	3714      	adds	r7, #20
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr
 8003edc:	40012c00 	.word	0x40012c00
 8003ee0:	40000400 	.word	0x40000400

08003ee4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	f023 0201 	bic.w	r2, r3, #1
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	011b      	lsls	r3, r3, #4
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f023 030a 	bic.w	r3, r3, #10
 8003f20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	621a      	str	r2, [r3, #32]
}
 8003f36:	bf00      	nop
 8003f38:	371c      	adds	r7, #28
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bc80      	pop	{r7}
 8003f3e:	4770      	bx	lr

08003f40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	f023 0210 	bic.w	r2, r3, #16
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f6a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	031b      	lsls	r3, r3, #12
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f7c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	621a      	str	r2, [r3, #32]
}
 8003f94:	bf00      	nop
 8003f96:	371c      	adds	r7, #28
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr

08003f9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b085      	sub	sp, #20
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
 8003fa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f043 0307 	orr.w	r3, r3, #7
 8003fc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	609a      	str	r2, [r3, #8]
}
 8003fc8:	bf00      	nop
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bc80      	pop	{r7}
 8003fd0:	4770      	bx	lr

08003fd2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b087      	sub	sp, #28
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	60f8      	str	r0, [r7, #12]
 8003fda:	60b9      	str	r1, [r7, #8]
 8003fdc:	607a      	str	r2, [r7, #4]
 8003fde:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	021a      	lsls	r2, r3, #8
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	609a      	str	r2, [r3, #8]
}
 8004006:	bf00      	nop
 8004008:	371c      	adds	r7, #28
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr

08004010 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004024:	2302      	movs	r3, #2
 8004026:	e041      	b.n	80040ac <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2202      	movs	r2, #2
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800404e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	4313      	orrs	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a14      	ldr	r2, [pc, #80]	; (80040b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d009      	beq.n	8004080 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004074:	d004      	beq.n	8004080 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a10      	ldr	r2, [pc, #64]	; (80040bc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d10c      	bne.n	800409a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004086:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	4313      	orrs	r3, r2
 8004090:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bc80      	pop	{r7}
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40012c00 	.word	0x40012c00
 80040bc:	40000400 	.word	0x40000400

080040c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bc80      	pop	{r7}
 80040d0:	4770      	bx	lr

080040d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b083      	sub	sp, #12
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	bc80      	pop	{r7}
 80040e2:	4770      	bx	lr

080040e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e03f      	b.n	8004176 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d106      	bne.n	8004110 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7fc fad6 	bl	80006bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2224      	movs	r2, #36	; 0x24
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68da      	ldr	r2, [r3, #12]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004126:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 fde3 	bl	8004cf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800413c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	695a      	ldr	r2, [r3, #20]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800414c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800415c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2220      	movs	r2, #32
 8004170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b08a      	sub	sp, #40	; 0x28
 8004182:	af02      	add	r7, sp, #8
 8004184:	60f8      	str	r0, [r7, #12]
 8004186:	60b9      	str	r1, [r7, #8]
 8004188:	603b      	str	r3, [r7, #0]
 800418a:	4613      	mov	r3, r2
 800418c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800418e:	2300      	movs	r3, #0
 8004190:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b20      	cmp	r3, #32
 800419c:	d17c      	bne.n	8004298 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d002      	beq.n	80041aa <HAL_UART_Transmit+0x2c>
 80041a4:	88fb      	ldrh	r3, [r7, #6]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e075      	b.n	800429a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d101      	bne.n	80041bc <HAL_UART_Transmit+0x3e>
 80041b8:	2302      	movs	r3, #2
 80041ba:	e06e      	b.n	800429a <HAL_UART_Transmit+0x11c>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2221      	movs	r2, #33	; 0x21
 80041ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041d2:	f7fd fb7f 	bl	80018d4 <HAL_GetTick>
 80041d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	88fa      	ldrh	r2, [r7, #6]
 80041dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	88fa      	ldrh	r2, [r7, #6]
 80041e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ec:	d108      	bne.n	8004200 <HAL_UART_Transmit+0x82>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d104      	bne.n	8004200 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80041f6:	2300      	movs	r3, #0
 80041f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	61bb      	str	r3, [r7, #24]
 80041fe:	e003      	b.n	8004208 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004204:	2300      	movs	r3, #0
 8004206:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004210:	e02a      	b.n	8004268 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	2200      	movs	r2, #0
 800421a:	2180      	movs	r1, #128	; 0x80
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 fb54 	bl	80048ca <UART_WaitOnFlagUntilTimeout>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e036      	b.n	800429a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10b      	bne.n	800424a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	881b      	ldrh	r3, [r3, #0]
 8004236:	461a      	mov	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004240:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	3302      	adds	r3, #2
 8004246:	61bb      	str	r3, [r7, #24]
 8004248:	e007      	b.n	800425a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	781a      	ldrb	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	3301      	adds	r3, #1
 8004258:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800425e:	b29b      	uxth	r3, r3
 8004260:	3b01      	subs	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800426c:	b29b      	uxth	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1cf      	bne.n	8004212 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2200      	movs	r2, #0
 800427a:	2140      	movs	r1, #64	; 0x40
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 fb24 	bl	80048ca <UART_WaitOnFlagUntilTimeout>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e006      	b.n	800429a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2220      	movs	r2, #32
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004294:	2300      	movs	r3, #0
 8004296:	e000      	b.n	800429a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004298:	2302      	movs	r3, #2
  }
}
 800429a:	4618      	mov	r0, r3
 800429c:	3720      	adds	r7, #32
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b084      	sub	sp, #16
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	4613      	mov	r3, r2
 80042ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	d11d      	bne.n	80042f8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d002      	beq.n	80042c8 <HAL_UART_Receive_DMA+0x26>
 80042c2:	88fb      	ldrh	r3, [r7, #6]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e016      	b.n	80042fa <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <HAL_UART_Receive_DMA+0x38>
 80042d6:	2302      	movs	r3, #2
 80042d8:	e00f      	b.n	80042fa <HAL_UART_Receive_DMA+0x58>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80042e8:	88fb      	ldrh	r3, [r7, #6]
 80042ea:	461a      	mov	r2, r3
 80042ec:	68b9      	ldr	r1, [r7, #8]
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f000 fb36 	bl	8004960 <UART_Start_Receive_DMA>
 80042f4:	4603      	mov	r3, r0
 80042f6:	e000      	b.n	80042fa <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80042f8:	2302      	movs	r3, #2
  }
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b084      	sub	sp, #16
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800430a:	2300      	movs	r3, #0
 800430c:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004318:	2b00      	cmp	r3, #0
 800431a:	bf14      	ite	ne
 800431c:	2301      	movne	r3, #1
 800431e:	2300      	moveq	r3, #0
 8004320:	b2db      	uxtb	r3, r3
 8004322:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b21      	cmp	r3, #33	; 0x21
 800432e:	d116      	bne.n	800435e <HAL_UART_DMAStop+0x5c>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d013      	beq.n	800435e <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695a      	ldr	r2, [r3, #20]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004344:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800434a:	2b00      	cmp	r3, #0
 800434c:	d004      	beq.n	8004358 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004352:	4618      	mov	r0, r3
 8004354:	f7fe faef 	bl	8002936 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 fb65 	bl	8004a28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004368:	2b00      	cmp	r3, #0
 800436a:	bf14      	ite	ne
 800436c:	2301      	movne	r3, #1
 800436e:	2300      	moveq	r3, #0
 8004370:	b2db      	uxtb	r3, r3
 8004372:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b22      	cmp	r3, #34	; 0x22
 800437e:	d116      	bne.n	80043ae <HAL_UART_DMAStop+0xac>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d013      	beq.n	80043ae <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	695a      	ldr	r2, [r3, #20]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004394:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439a:	2b00      	cmp	r3, #0
 800439c:	d004      	beq.n	80043a8 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fe fac7 	bl	8002936 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 fb52 	bl	8004a52 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b08a      	sub	sp, #40	; 0x28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80043d8:	2300      	movs	r3, #0
 80043da:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80043dc:	2300      	movs	r3, #0
 80043de:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	f003 030f 	and.w	r3, r3, #15
 80043e6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10d      	bne.n	800440a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	f003 0320 	and.w	r3, r3, #32
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d008      	beq.n	800440a <HAL_UART_IRQHandler+0x52>
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	f003 0320 	and.w	r3, r3, #32
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fbcc 	bl	8004ba0 <UART_Receive_IT>
      return;
 8004408:	e17b      	b.n	8004702 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 80b1 	beq.w	8004574 <HAL_UART_IRQHandler+0x1bc>
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b00      	cmp	r3, #0
 800441a:	d105      	bne.n	8004428 <HAL_UART_IRQHandler+0x70>
 800441c:	6a3b      	ldr	r3, [r7, #32]
 800441e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 80a6 	beq.w	8004574 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <HAL_UART_IRQHandler+0x90>
 8004432:	6a3b      	ldr	r3, [r7, #32]
 8004434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004438:	2b00      	cmp	r3, #0
 800443a:	d005      	beq.n	8004448 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004440:	f043 0201 	orr.w	r2, r3, #1
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	f003 0304 	and.w	r3, r3, #4
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <HAL_UART_IRQHandler+0xb0>
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d005      	beq.n	8004468 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	f043 0202 	orr.w	r2, r3, #2
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <HAL_UART_IRQHandler+0xd0>
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b00      	cmp	r3, #0
 800447a:	d005      	beq.n	8004488 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004480:	f043 0204 	orr.w	r2, r3, #4
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00f      	beq.n	80044b2 <HAL_UART_IRQHandler+0xfa>
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	f003 0320 	and.w	r3, r3, #32
 8004498:	2b00      	cmp	r3, #0
 800449a:	d104      	bne.n	80044a6 <HAL_UART_IRQHandler+0xee>
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d005      	beq.n	80044b2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	f043 0208 	orr.w	r2, r3, #8
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 811e 	beq.w	80046f8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	f003 0320 	and.w	r3, r3, #32
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d007      	beq.n	80044d6 <HAL_UART_IRQHandler+0x11e>
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	f003 0320 	and.w	r3, r3, #32
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d002      	beq.n	80044d6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 fb65 	bl	8004ba0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	bf14      	ite	ne
 80044e4:	2301      	movne	r3, #1
 80044e6:	2300      	moveq	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d102      	bne.n	80044fe <HAL_UART_IRQHandler+0x146>
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d031      	beq.n	8004562 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 faa7 	bl	8004a52 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450e:	2b00      	cmp	r3, #0
 8004510:	d023      	beq.n	800455a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	695a      	ldr	r2, [r3, #20]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004520:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	2b00      	cmp	r3, #0
 8004528:	d013      	beq.n	8004552 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452e:	4a76      	ldr	r2, [pc, #472]	; (8004708 <HAL_UART_IRQHandler+0x350>)
 8004530:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004536:	4618      	mov	r0, r3
 8004538:	f7fe fa38 	bl	80029ac <HAL_DMA_Abort_IT>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d016      	beq.n	8004570 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800454c:	4610      	mov	r0, r2
 800454e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004550:	e00e      	b.n	8004570 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f8f5 	bl	8004742 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004558:	e00a      	b.n	8004570 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f8f1 	bl	8004742 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004560:	e006      	b.n	8004570 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f8ed 	bl	8004742 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800456e:	e0c3      	b.n	80046f8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004570:	bf00      	nop
    return;
 8004572:	e0c1      	b.n	80046f8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004578:	2b01      	cmp	r3, #1
 800457a:	f040 80a1 	bne.w	80046c0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	f003 0310 	and.w	r3, r3, #16
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 809b 	beq.w	80046c0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	f003 0310 	and.w	r3, r3, #16
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 8095 	beq.w	80046c0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004596:	2300      	movs	r3, #0
 8004598:	60fb      	str	r3, [r7, #12]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	60fb      	str	r3, [r7, #12]
 80045aa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d04e      	beq.n	8004658 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80045c4:	8a3b      	ldrh	r3, [r7, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f000 8098 	beq.w	80046fc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045d0:	8a3a      	ldrh	r2, [r7, #16]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	f080 8092 	bcs.w	80046fc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	8a3a      	ldrh	r2, [r7, #16]
 80045dc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	2b20      	cmp	r3, #32
 80045e6:	d02b      	beq.n	8004640 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68da      	ldr	r2, [r3, #12]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045f6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	695a      	ldr	r2, [r3, #20]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0201 	bic.w	r2, r2, #1
 8004606:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695a      	ldr	r2, [r3, #20]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004616:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2220      	movs	r2, #32
 800461c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0210 	bic.w	r2, r2, #16
 8004634:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463a:	4618      	mov	r0, r3
 800463c:	f7fe f97b 	bl	8002936 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004648:	b29b      	uxth	r3, r3
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	b29b      	uxth	r3, r3
 800464e:	4619      	mov	r1, r3
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f87f 	bl	8004754 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004656:	e051      	b.n	80046fc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004660:	b29b      	uxth	r3, r3
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800466a:	b29b      	uxth	r3, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	d047      	beq.n	8004700 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004670:	8a7b      	ldrh	r3, [r7, #18]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d044      	beq.n	8004700 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004684:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	695a      	ldr	r2, [r3, #20]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 0201 	bic.w	r2, r2, #1
 8004694:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2220      	movs	r2, #32
 800469a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f022 0210 	bic.w	r2, r2, #16
 80046b2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046b4:	8a7b      	ldrh	r3, [r7, #18]
 80046b6:	4619      	mov	r1, r3
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f84b 	bl	8004754 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80046be:	e01f      	b.n	8004700 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d008      	beq.n	80046dc <HAL_UART_IRQHandler+0x324>
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d003      	beq.n	80046dc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f9fc 	bl	8004ad2 <UART_Transmit_IT>
    return;
 80046da:	e012      	b.n	8004702 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00d      	beq.n	8004702 <HAL_UART_IRQHandler+0x34a>
 80046e6:	6a3b      	ldr	r3, [r7, #32]
 80046e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d008      	beq.n	8004702 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 fa3d 	bl	8004b70 <UART_EndTransmit_IT>
    return;
 80046f6:	e004      	b.n	8004702 <HAL_UART_IRQHandler+0x34a>
    return;
 80046f8:	bf00      	nop
 80046fa:	e002      	b.n	8004702 <HAL_UART_IRQHandler+0x34a>
      return;
 80046fc:	bf00      	nop
 80046fe:	e000      	b.n	8004702 <HAL_UART_IRQHandler+0x34a>
      return;
 8004700:	bf00      	nop
  }
}
 8004702:	3728      	adds	r7, #40	; 0x28
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	08004aab 	.word	0x08004aab

0800470c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	bc80      	pop	{r7}
 800471c:	4770      	bx	lr

0800471e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800471e:	b480      	push	{r7}
 8004720:	b083      	sub	sp, #12
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004726:	bf00      	nop
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	bc80      	pop	{r7}
 800472e:	4770      	bx	lr

08004730 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	bc80      	pop	{r7}
 8004740:	4770      	bx	lr

08004742 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800474a:	bf00      	nop
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	bc80      	pop	{r7}
 8004752:	4770      	bx	lr

08004754 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	460b      	mov	r3, r1
 800475e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	bc80      	pop	{r7}
 8004768:	4770      	bx	lr

0800476a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b084      	sub	sp, #16
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0320 	and.w	r3, r3, #32
 8004782:	2b00      	cmp	r3, #0
 8004784:	d12a      	bne.n	80047dc <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68da      	ldr	r2, [r3, #12]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800479a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695a      	ldr	r2, [r3, #20]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 0201 	bic.w	r2, r2, #1
 80047aa:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	695a      	ldr	r2, [r3, #20]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ba:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2220      	movs	r2, #32
 80047c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d107      	bne.n	80047dc <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0210 	bic.w	r2, r2, #16
 80047da:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d106      	bne.n	80047f2 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047e8:	4619      	mov	r1, r3
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f7ff ffb2 	bl	8004754 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80047f0:	e002      	b.n	80047f8 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f7ff ff93 	bl	800471e <HAL_UART_RxCpltCallback>
}
 80047f8:	bf00      	nop
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004812:	2b01      	cmp	r3, #1
 8004814:	d108      	bne.n	8004828 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800481a:	085b      	lsrs	r3, r3, #1
 800481c:	b29b      	uxth	r3, r3
 800481e:	4619      	mov	r1, r3
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f7ff ff97 	bl	8004754 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004826:	e002      	b.n	800482e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f7ff ff81 	bl	8004730 <HAL_UART_RxHalfCpltCallback>
}
 800482e:	bf00      	nop
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b084      	sub	sp, #16
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800483e:	2300      	movs	r3, #0
 8004840:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004852:	2b00      	cmp	r3, #0
 8004854:	bf14      	ite	ne
 8004856:	2301      	movne	r3, #1
 8004858:	2300      	moveq	r3, #0
 800485a:	b2db      	uxtb	r3, r3
 800485c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b21      	cmp	r3, #33	; 0x21
 8004868:	d108      	bne.n	800487c <UART_DMAError+0x46>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d005      	beq.n	800487c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	2200      	movs	r2, #0
 8004874:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004876:	68b8      	ldr	r0, [r7, #8]
 8004878:	f000 f8d6 	bl	8004a28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004886:	2b00      	cmp	r3, #0
 8004888:	bf14      	ite	ne
 800488a:	2301      	movne	r3, #1
 800488c:	2300      	moveq	r3, #0
 800488e:	b2db      	uxtb	r3, r3
 8004890:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b22      	cmp	r3, #34	; 0x22
 800489c:	d108      	bne.n	80048b0 <UART_DMAError+0x7a>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d005      	beq.n	80048b0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	2200      	movs	r2, #0
 80048a8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80048aa:	68b8      	ldr	r0, [r7, #8]
 80048ac:	f000 f8d1 	bl	8004a52 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b4:	f043 0210 	orr.w	r2, r3, #16
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048bc:	68b8      	ldr	r0, [r7, #8]
 80048be:	f7ff ff40 	bl	8004742 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048c2:	bf00      	nop
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b084      	sub	sp, #16
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	603b      	str	r3, [r7, #0]
 80048d6:	4613      	mov	r3, r2
 80048d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048da:	e02c      	b.n	8004936 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e2:	d028      	beq.n	8004936 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d007      	beq.n	80048fa <UART_WaitOnFlagUntilTimeout+0x30>
 80048ea:	f7fc fff3 	bl	80018d4 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d21d      	bcs.n	8004936 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004908:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695a      	ldr	r2, [r3, #20]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0201 	bic.w	r2, r2, #1
 8004918:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2220      	movs	r2, #32
 800491e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2220      	movs	r2, #32
 8004926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e00f      	b.n	8004956 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	4013      	ands	r3, r2
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	429a      	cmp	r2, r3
 8004944:	bf0c      	ite	eq
 8004946:	2301      	moveq	r3, #1
 8004948:	2300      	movne	r3, #0
 800494a:	b2db      	uxtb	r3, r3
 800494c:	461a      	mov	r2, r3
 800494e:	79fb      	ldrb	r3, [r7, #7]
 8004950:	429a      	cmp	r2, r3
 8004952:	d0c3      	beq.n	80048dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
	...

08004960 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	4613      	mov	r3, r2
 800496c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	88fa      	ldrh	r2, [r7, #6]
 8004978:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2222      	movs	r2, #34	; 0x22
 8004984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498c:	4a23      	ldr	r2, [pc, #140]	; (8004a1c <UART_Start_Receive_DMA+0xbc>)
 800498e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004994:	4a22      	ldr	r2, [pc, #136]	; (8004a20 <UART_Start_Receive_DMA+0xc0>)
 8004996:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499c:	4a21      	ldr	r2, [pc, #132]	; (8004a24 <UART_Start_Receive_DMA+0xc4>)
 800499e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a4:	2200      	movs	r2, #0
 80049a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80049a8:	f107 0308 	add.w	r3, r7, #8
 80049ac:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	3304      	adds	r3, #4
 80049b8:	4619      	mov	r1, r3
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	88fb      	ldrh	r3, [r7, #6]
 80049c0:	f7fd ff5a 	bl	8002878 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80049c4:	2300      	movs	r3, #0
 80049c6:	613b      	str	r3, [r7, #16]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	613b      	str	r3, [r7, #16]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	613b      	str	r3, [r7, #16]
 80049d8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049f0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	695a      	ldr	r2, [r3, #20]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f042 0201 	orr.w	r2, r2, #1
 8004a00:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	695a      	ldr	r2, [r3, #20]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a10:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3718      	adds	r7, #24
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	0800476b 	.word	0x0800476b
 8004a20:	08004801 	.word	0x08004801
 8004a24:	08004837 	.word	0x08004837

08004a28 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004a3e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2220      	movs	r2, #32
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bc80      	pop	{r7}
 8004a50:	4770      	bx	lr

08004a52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68da      	ldr	r2, [r3, #12]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a68:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	695a      	ldr	r2, [r3, #20]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 0201 	bic.w	r2, r2, #1
 8004a78:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d107      	bne.n	8004a92 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68da      	ldr	r2, [r3, #12]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 0210 	bic.w	r2, r2, #16
 8004a90:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2220      	movs	r2, #32
 8004a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bc80      	pop	{r7}
 8004aa8:	4770      	bx	lr

08004aaa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b084      	sub	sp, #16
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f7ff fe3c 	bl	8004742 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004aca:	bf00      	nop
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b085      	sub	sp, #20
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b21      	cmp	r3, #33	; 0x21
 8004ae4:	d13e      	bne.n	8004b64 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aee:	d114      	bne.n	8004b1a <UART_Transmit_IT+0x48>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d110      	bne.n	8004b1a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	461a      	mov	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b0c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	1c9a      	adds	r2, r3, #2
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	621a      	str	r2, [r3, #32]
 8004b18:	e008      	b.n	8004b2c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	1c59      	adds	r1, r3, #1
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	6211      	str	r1, [r2, #32]
 8004b24:	781a      	ldrb	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	3b01      	subs	r3, #1
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	4619      	mov	r1, r3
 8004b3a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10f      	bne.n	8004b60 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b4e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68da      	ldr	r2, [r3, #12]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b5e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b60:	2300      	movs	r3, #0
 8004b62:	e000      	b.n	8004b66 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b64:	2302      	movs	r3, #2
  }
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bc80      	pop	{r7}
 8004b6e:	4770      	bx	lr

08004b70 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b86:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7ff fdbb 	bl	800470c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b22      	cmp	r3, #34	; 0x22
 8004bb2:	f040 8099 	bne.w	8004ce8 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bbe:	d117      	bne.n	8004bf0 <UART_Receive_IT+0x50>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d113      	bne.n	8004bf0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be8:	1c9a      	adds	r2, r3, #2
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	629a      	str	r2, [r3, #40]	; 0x28
 8004bee:	e026      	b.n	8004c3e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf4:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c02:	d007      	beq.n	8004c14 <UART_Receive_IT+0x74>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10a      	bne.n	8004c22 <UART_Receive_IT+0x82>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d106      	bne.n	8004c22 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	b2da      	uxtb	r2, r3
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	701a      	strb	r2, [r3, #0]
 8004c20:	e008      	b.n	8004c34 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c38:	1c5a      	adds	r2, r3, #1
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	3b01      	subs	r3, #1
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d148      	bne.n	8004ce4 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68da      	ldr	r2, [r3, #12]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0220 	bic.w	r2, r2, #32
 8004c60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68da      	ldr	r2, [r3, #12]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c70:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	695a      	ldr	r2, [r3, #20]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0201 	bic.w	r2, r2, #1
 8004c80:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2220      	movs	r2, #32
 8004c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d123      	bne.n	8004cda <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68da      	ldr	r2, [r3, #12]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0210 	bic.w	r2, r2, #16
 8004ca6:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0310 	and.w	r3, r3, #16
 8004cb2:	2b10      	cmp	r3, #16
 8004cb4:	d10a      	bne.n	8004ccc <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	60fb      	str	r3, [r7, #12]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	60fb      	str	r3, [r7, #12]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	60fb      	str	r3, [r7, #12]
 8004cca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7ff fd3e 	bl	8004754 <HAL_UARTEx_RxEventCallback>
 8004cd8:	e002      	b.n	8004ce0 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7ff fd1f 	bl	800471e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	e002      	b.n	8004cea <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	e000      	b.n	8004cea <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004ce8:	2302      	movs	r3, #2
  }
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3718      	adds	r7, #24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
	...

08004cf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68da      	ldr	r2, [r3, #12]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689a      	ldr	r2, [r3, #8]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004d2e:	f023 030c 	bic.w	r3, r3, #12
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	6812      	ldr	r2, [r2, #0]
 8004d36:	68b9      	ldr	r1, [r7, #8]
 8004d38:	430b      	orrs	r3, r1
 8004d3a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	699a      	ldr	r2, [r3, #24]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a2c      	ldr	r2, [pc, #176]	; (8004e08 <UART_SetConfig+0x114>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d103      	bne.n	8004d64 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d5c:	f7fe fdb4 	bl	80038c8 <HAL_RCC_GetPCLK2Freq>
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	e002      	b.n	8004d6a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d64:	f7fe fd9c 	bl	80038a0 <HAL_RCC_GetPCLK1Freq>
 8004d68:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	4413      	add	r3, r2
 8004d72:	009a      	lsls	r2, r3, #2
 8004d74:	441a      	add	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d80:	4a22      	ldr	r2, [pc, #136]	; (8004e0c <UART_SetConfig+0x118>)
 8004d82:	fba2 2303 	umull	r2, r3, r2, r3
 8004d86:	095b      	lsrs	r3, r3, #5
 8004d88:	0119      	lsls	r1, r3, #4
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	009a      	lsls	r2, r3, #2
 8004d94:	441a      	add	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004da0:	4b1a      	ldr	r3, [pc, #104]	; (8004e0c <UART_SetConfig+0x118>)
 8004da2:	fba3 0302 	umull	r0, r3, r3, r2
 8004da6:	095b      	lsrs	r3, r3, #5
 8004da8:	2064      	movs	r0, #100	; 0x64
 8004daa:	fb00 f303 	mul.w	r3, r0, r3
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	011b      	lsls	r3, r3, #4
 8004db2:	3332      	adds	r3, #50	; 0x32
 8004db4:	4a15      	ldr	r2, [pc, #84]	; (8004e0c <UART_SetConfig+0x118>)
 8004db6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dba:	095b      	lsrs	r3, r3, #5
 8004dbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dc0:	4419      	add	r1, r3
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	009a      	lsls	r2, r3, #2
 8004dcc:	441a      	add	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dd8:	4b0c      	ldr	r3, [pc, #48]	; (8004e0c <UART_SetConfig+0x118>)
 8004dda:	fba3 0302 	umull	r0, r3, r3, r2
 8004dde:	095b      	lsrs	r3, r3, #5
 8004de0:	2064      	movs	r0, #100	; 0x64
 8004de2:	fb00 f303 	mul.w	r3, r0, r3
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	011b      	lsls	r3, r3, #4
 8004dea:	3332      	adds	r3, #50	; 0x32
 8004dec:	4a07      	ldr	r2, [pc, #28]	; (8004e0c <UART_SetConfig+0x118>)
 8004dee:	fba2 2303 	umull	r2, r3, r2, r3
 8004df2:	095b      	lsrs	r3, r3, #5
 8004df4:	f003 020f 	and.w	r2, r3, #15
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	440a      	add	r2, r1
 8004dfe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004e00:	bf00      	nop
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	40013800 	.word	0x40013800
 8004e0c:	51eb851f 	.word	0x51eb851f

08004e10 <__libc_init_array>:
 8004e10:	b570      	push	{r4, r5, r6, lr}
 8004e12:	2600      	movs	r6, #0
 8004e14:	4d0c      	ldr	r5, [pc, #48]	; (8004e48 <__libc_init_array+0x38>)
 8004e16:	4c0d      	ldr	r4, [pc, #52]	; (8004e4c <__libc_init_array+0x3c>)
 8004e18:	1b64      	subs	r4, r4, r5
 8004e1a:	10a4      	asrs	r4, r4, #2
 8004e1c:	42a6      	cmp	r6, r4
 8004e1e:	d109      	bne.n	8004e34 <__libc_init_array+0x24>
 8004e20:	f000 f830 	bl	8004e84 <_init>
 8004e24:	2600      	movs	r6, #0
 8004e26:	4d0a      	ldr	r5, [pc, #40]	; (8004e50 <__libc_init_array+0x40>)
 8004e28:	4c0a      	ldr	r4, [pc, #40]	; (8004e54 <__libc_init_array+0x44>)
 8004e2a:	1b64      	subs	r4, r4, r5
 8004e2c:	10a4      	asrs	r4, r4, #2
 8004e2e:	42a6      	cmp	r6, r4
 8004e30:	d105      	bne.n	8004e3e <__libc_init_array+0x2e>
 8004e32:	bd70      	pop	{r4, r5, r6, pc}
 8004e34:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e38:	4798      	blx	r3
 8004e3a:	3601      	adds	r6, #1
 8004e3c:	e7ee      	b.n	8004e1c <__libc_init_array+0xc>
 8004e3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e42:	4798      	blx	r3
 8004e44:	3601      	adds	r6, #1
 8004e46:	e7f2      	b.n	8004e2e <__libc_init_array+0x1e>
 8004e48:	08004ec4 	.word	0x08004ec4
 8004e4c:	08004ec4 	.word	0x08004ec4
 8004e50:	08004ec4 	.word	0x08004ec4
 8004e54:	08004ec8 	.word	0x08004ec8

08004e58 <memcpy>:
 8004e58:	440a      	add	r2, r1
 8004e5a:	4291      	cmp	r1, r2
 8004e5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e60:	d100      	bne.n	8004e64 <memcpy+0xc>
 8004e62:	4770      	bx	lr
 8004e64:	b510      	push	{r4, lr}
 8004e66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e6a:	4291      	cmp	r1, r2
 8004e6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e70:	d1f9      	bne.n	8004e66 <memcpy+0xe>
 8004e72:	bd10      	pop	{r4, pc}

08004e74 <memset>:
 8004e74:	4603      	mov	r3, r0
 8004e76:	4402      	add	r2, r0
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d100      	bne.n	8004e7e <memset+0xa>
 8004e7c:	4770      	bx	lr
 8004e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e82:	e7f9      	b.n	8004e78 <memset+0x4>

08004e84 <_init>:
 8004e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e86:	bf00      	nop
 8004e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e8a:	bc08      	pop	{r3}
 8004e8c:	469e      	mov	lr, r3
 8004e8e:	4770      	bx	lr

08004e90 <_fini>:
 8004e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e92:	bf00      	nop
 8004e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e96:	bc08      	pop	{r3}
 8004e98:	469e      	mov	lr, r3
 8004e9a:	4770      	bx	lr
