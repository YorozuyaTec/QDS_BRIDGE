
QDS_BRIDGE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005014  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08005120  08005120  00015120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005148  08005148  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  08005148  08005148  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005148  08005148  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005148  08005148  00015148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800514c  0800514c  0001514c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08005150  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000610  200001ec  0800533c  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007fc  0800533c  000207fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000194e1  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000346f  00000000  00000000  000396f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  0003cb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd0  00000000  00000000  0003daa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a170  00000000  00000000  0003e870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c9c  00000000  00000000  000589e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c423  00000000  00000000  0006c67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f8a9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cb0  00000000  00000000  000f8af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001ec 	.word	0x200001ec
 8000128:	00000000 	.word	0x00000000
 800012c:	08005108 	.word	0x08005108

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f0 	.word	0x200001f0
 8000148:	08005108 	.word	0x08005108

0800014c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000150:	4b17      	ldr	r3, [pc, #92]	; (80001b0 <MX_CAN_Init+0x64>)
 8000152:	4a18      	ldr	r2, [pc, #96]	; (80001b4 <MX_CAN_Init+0x68>)
 8000154:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8000156:	4b16      	ldr	r3, [pc, #88]	; (80001b0 <MX_CAN_Init+0x64>)
 8000158:	2208      	movs	r2, #8
 800015a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800015c:	4b14      	ldr	r3, [pc, #80]	; (80001b0 <MX_CAN_Init+0x64>)
 800015e:	2200      	movs	r2, #0
 8000160:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000162:	4b13      	ldr	r3, [pc, #76]	; (80001b0 <MX_CAN_Init+0x64>)
 8000164:	2200      	movs	r2, #0
 8000166:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000168:	4b11      	ldr	r3, [pc, #68]	; (80001b0 <MX_CAN_Init+0x64>)
 800016a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800016e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000170:	4b0f      	ldr	r3, [pc, #60]	; (80001b0 <MX_CAN_Init+0x64>)
 8000172:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8000176:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000178:	4b0d      	ldr	r3, [pc, #52]	; (80001b0 <MX_CAN_Init+0x64>)
 800017a:	2200      	movs	r2, #0
 800017c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800017e:	4b0c      	ldr	r3, [pc, #48]	; (80001b0 <MX_CAN_Init+0x64>)
 8000180:	2200      	movs	r2, #0
 8000182:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8000184:	4b0a      	ldr	r3, [pc, #40]	; (80001b0 <MX_CAN_Init+0x64>)
 8000186:	2201      	movs	r2, #1
 8000188:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800018a:	4b09      	ldr	r3, [pc, #36]	; (80001b0 <MX_CAN_Init+0x64>)
 800018c:	2200      	movs	r2, #0
 800018e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000190:	4b07      	ldr	r3, [pc, #28]	; (80001b0 <MX_CAN_Init+0x64>)
 8000192:	2200      	movs	r2, #0
 8000194:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000196:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <MX_CAN_Init+0x64>)
 8000198:	2200      	movs	r2, #0
 800019a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <MX_CAN_Init+0x64>)
 800019e:	f001 fc23 	bl	80019e8 <HAL_CAN_Init>
 80001a2:	4603      	mov	r3, r0
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d001      	beq.n	80001ac <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80001a8:	f000 f97d 	bl	80004a6 <Error_Handler>
  /* USER CODE BEGIN CAN_Init 2 */


  /* USER CODE END CAN_Init 2 */

}
 80001ac:	bf00      	nop
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	20000218 	.word	0x20000218
 80001b4:	40006400 	.word	0x40006400

080001b8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b088      	sub	sp, #32
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001c0:	f107 0310 	add.w	r3, r7, #16
 80001c4:	2200      	movs	r2, #0
 80001c6:	601a      	str	r2, [r3, #0]
 80001c8:	605a      	str	r2, [r3, #4]
 80001ca:	609a      	str	r2, [r3, #8]
 80001cc:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a20      	ldr	r2, [pc, #128]	; (8000254 <HAL_CAN_MspInit+0x9c>)
 80001d4:	4293      	cmp	r3, r2
 80001d6:	d139      	bne.n	800024c <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80001d8:	4b1f      	ldr	r3, [pc, #124]	; (8000258 <HAL_CAN_MspInit+0xa0>)
 80001da:	69db      	ldr	r3, [r3, #28]
 80001dc:	4a1e      	ldr	r2, [pc, #120]	; (8000258 <HAL_CAN_MspInit+0xa0>)
 80001de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80001e2:	61d3      	str	r3, [r2, #28]
 80001e4:	4b1c      	ldr	r3, [pc, #112]	; (8000258 <HAL_CAN_MspInit+0xa0>)
 80001e6:	69db      	ldr	r3, [r3, #28]
 80001e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80001ec:	60fb      	str	r3, [r7, #12]
 80001ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001f0:	4b19      	ldr	r3, [pc, #100]	; (8000258 <HAL_CAN_MspInit+0xa0>)
 80001f2:	699b      	ldr	r3, [r3, #24]
 80001f4:	4a18      	ldr	r2, [pc, #96]	; (8000258 <HAL_CAN_MspInit+0xa0>)
 80001f6:	f043 0304 	orr.w	r3, r3, #4
 80001fa:	6193      	str	r3, [r2, #24]
 80001fc:	4b16      	ldr	r3, [pc, #88]	; (8000258 <HAL_CAN_MspInit+0xa0>)
 80001fe:	699b      	ldr	r3, [r3, #24]
 8000200:	f003 0304 	and.w	r3, r3, #4
 8000204:	60bb      	str	r3, [r7, #8]
 8000206:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000208:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800020c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800020e:	2300      	movs	r3, #0
 8000210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000212:	2300      	movs	r3, #0
 8000214:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000216:	f107 0310 	add.w	r3, r7, #16
 800021a:	4619      	mov	r1, r3
 800021c:	480f      	ldr	r0, [pc, #60]	; (800025c <HAL_CAN_MspInit+0xa4>)
 800021e:	f002 fdfd 	bl	8002e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000222:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000226:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000228:	2302      	movs	r3, #2
 800022a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800022c:	2303      	movs	r3, #3
 800022e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000230:	f107 0310 	add.w	r3, r7, #16
 8000234:	4619      	mov	r1, r3
 8000236:	4809      	ldr	r0, [pc, #36]	; (800025c <HAL_CAN_MspInit+0xa4>)
 8000238:	f002 fdf0 	bl	8002e1c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800023c:	2200      	movs	r2, #0
 800023e:	2100      	movs	r1, #0
 8000240:	2014      	movs	r0, #20
 8000242:	f002 fb08 	bl	8002856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000246:	2014      	movs	r0, #20
 8000248:	f002 fb21 	bl	800288e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800024c:	bf00      	nop
 800024e:	3720      	adds	r7, #32
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	40006400 	.word	0x40006400
 8000258:	40021000 	.word	0x40021000
 800025c:	40010800 	.word	0x40010800

08000260 <HAL_CAN_MspDeInit>:

void HAL_CAN_MspDeInit(CAN_HandleTypeDef* canHandle)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]

  if(canHandle->Instance==CAN1)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a0a      	ldr	r2, [pc, #40]	; (8000298 <HAL_CAN_MspDeInit+0x38>)
 800026e:	4293      	cmp	r3, r2
 8000270:	d10d      	bne.n	800028e <HAL_CAN_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 8000272:	4b0a      	ldr	r3, [pc, #40]	; (800029c <HAL_CAN_MspDeInit+0x3c>)
 8000274:	69db      	ldr	r3, [r3, #28]
 8000276:	4a09      	ldr	r2, [pc, #36]	; (800029c <HAL_CAN_MspDeInit+0x3c>)
 8000278:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800027c:	61d3      	str	r3, [r2, #28]

    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 800027e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000282:	4807      	ldr	r0, [pc, #28]	; (80002a0 <HAL_CAN_MspDeInit+0x40>)
 8000284:	f002 ff44 	bl	8003110 <HAL_GPIO_DeInit>

    /* CAN1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000288:	2014      	movs	r0, #20
 800028a:	f002 fb0e 	bl	80028aa <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }
}
 800028e:	bf00      	nop
 8000290:	3708      	adds	r7, #8
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40006400 	.word	0x40006400
 800029c:	40021000 	.word	0x40021000
 80002a0:	40010800 	.word	0x40010800

080002a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002aa:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <MX_DMA_Init+0x38>)
 80002ac:	695b      	ldr	r3, [r3, #20]
 80002ae:	4a0b      	ldr	r2, [pc, #44]	; (80002dc <MX_DMA_Init+0x38>)
 80002b0:	f043 0301 	orr.w	r3, r3, #1
 80002b4:	6153      	str	r3, [r2, #20]
 80002b6:	4b09      	ldr	r3, [pc, #36]	; (80002dc <MX_DMA_Init+0x38>)
 80002b8:	695b      	ldr	r3, [r3, #20]
 80002ba:	f003 0301 	and.w	r3, r3, #1
 80002be:	607b      	str	r3, [r7, #4]
 80002c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80002c2:	2200      	movs	r2, #0
 80002c4:	2100      	movs	r1, #0
 80002c6:	2010      	movs	r0, #16
 80002c8:	f002 fac5 	bl	8002856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80002cc:	2010      	movs	r0, #16
 80002ce:	f002 fade 	bl	800288e <HAL_NVIC_EnableIRQ>

}
 80002d2:	bf00      	nop
 80002d4:	3708      	adds	r7, #8
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	40021000 	.word	0x40021000

080002e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b088      	sub	sp, #32
 80002e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e6:	f107 0310 	add.w	r3, r7, #16
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002f4:	4b1e      	ldr	r3, [pc, #120]	; (8000370 <MX_GPIO_Init+0x90>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4a1d      	ldr	r2, [pc, #116]	; (8000370 <MX_GPIO_Init+0x90>)
 80002fa:	f043 0320 	orr.w	r3, r3, #32
 80002fe:	6193      	str	r3, [r2, #24]
 8000300:	4b1b      	ldr	r3, [pc, #108]	; (8000370 <MX_GPIO_Init+0x90>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	f003 0320 	and.w	r3, r3, #32
 8000308:	60fb      	str	r3, [r7, #12]
 800030a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800030c:	4b18      	ldr	r3, [pc, #96]	; (8000370 <MX_GPIO_Init+0x90>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	4a17      	ldr	r2, [pc, #92]	; (8000370 <MX_GPIO_Init+0x90>)
 8000312:	f043 0304 	orr.w	r3, r3, #4
 8000316:	6193      	str	r3, [r2, #24]
 8000318:	4b15      	ldr	r3, [pc, #84]	; (8000370 <MX_GPIO_Init+0x90>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	f003 0304 	and.w	r3, r3, #4
 8000320:	60bb      	str	r3, [r7, #8]
 8000322:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000324:	4b12      	ldr	r3, [pc, #72]	; (8000370 <MX_GPIO_Init+0x90>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	4a11      	ldr	r2, [pc, #68]	; (8000370 <MX_GPIO_Init+0x90>)
 800032a:	f043 0308 	orr.w	r3, r3, #8
 800032e:	6193      	str	r3, [r2, #24]
 8000330:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <MX_GPIO_Init+0x90>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	f003 0308 	and.w	r3, r3, #8
 8000338:	607b      	str	r3, [r7, #4]
 800033a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000342:	480c      	ldr	r0, [pc, #48]	; (8000374 <MX_GPIO_Init+0x94>)
 8000344:	f002 ff98 	bl	8003278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000348:	f44f 7300 	mov.w	r3, #512	; 0x200
 800034c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800034e:	2301      	movs	r3, #1
 8000350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000352:	2300      	movs	r3, #0
 8000354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000356:	2302      	movs	r3, #2
 8000358:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800035a:	f107 0310 	add.w	r3, r7, #16
 800035e:	4619      	mov	r1, r3
 8000360:	4804      	ldr	r0, [pc, #16]	; (8000374 <MX_GPIO_Init+0x94>)
 8000362:	f002 fd5b 	bl	8002e1c <HAL_GPIO_Init>

}
 8000366:	bf00      	nop
 8000368:	3720      	adds	r7, #32
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40021000 	.word	0x40021000
 8000374:	40010c00 	.word	0x40010c00

08000378 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800037c:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <MX_IWDG_Init+0x2c>)
 800037e:	4a0a      	ldr	r2, [pc, #40]	; (80003a8 <MX_IWDG_Init+0x30>)
 8000380:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8000382:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <MX_IWDG_Init+0x2c>)
 8000384:	2204      	movs	r2, #4
 8000386:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000388:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <MX_IWDG_Init+0x2c>)
 800038a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800038e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000390:	4804      	ldr	r0, [pc, #16]	; (80003a4 <MX_IWDG_Init+0x2c>)
 8000392:	f002 ffa2 	bl	80032da <HAL_IWDG_Init>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800039c:	f000 f883 	bl	80004a6 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	20000240 	.word	0x20000240
 80003a8:	40003000 	.word	0x40003000

080003ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003b0:	f001 fa94 	bl	80018dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b4:	f000 f830 	bl	8000418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b8:	f7ff ff92 	bl	80002e0 <MX_GPIO_Init>
  MX_CAN_Init();
 80003bc:	f7ff fec6 	bl	800014c <MX_CAN_Init>
  MX_IWDG_Init();
 80003c0:	f7ff ffda 	bl	8000378 <MX_IWDG_Init>
  MX_TIM2_Init();
 80003c4:	f000 f900 	bl	80005c8 <MX_TIM2_Init>
  MX_DMA_Init();
 80003c8:	f7ff ff6c 	bl	80002a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80003cc:	f000 f96e 	bl	80006ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uart_module_init(&signal_wire_huart_module, &huart2, &hdma_usart2_rx);
 80003d0:	4a0b      	ldr	r2, [pc, #44]	; (8000400 <main+0x54>)
 80003d2:	490c      	ldr	r1, [pc, #48]	; (8000404 <main+0x58>)
 80003d4:	480c      	ldr	r0, [pc, #48]	; (8000408 <main+0x5c>)
 80003d6:	f000 fb07 	bl	80009e8 <uart_module_init>
  HAL_TIM_Base_Start(&htim2);
 80003da:	480c      	ldr	r0, [pc, #48]	; (800040c <main+0x60>)
 80003dc:	f003 fc38 	bl	8003c50 <HAL_TIM_Base_Start>
  CAN1_Config();   //调用过滤器函
 80003e0:	f000 fa30 	bl	8000844 <CAN1_Config>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_IWDG_Refresh(&hiwdg); //iwdg
 80003e4:	480a      	ldr	r0, [pc, #40]	; (8000410 <main+0x64>)
 80003e6:	f002 ffba 	bl	800335e <HAL_IWDG_Refresh>

	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80003ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003ee:	4809      	ldr	r0, [pc, #36]	; (8000414 <main+0x68>)
 80003f0:	f002 ff5a 	bl	80032a8 <HAL_GPIO_TogglePin>
	  //signal_wire_read_handler();
	  HAL_Delay(250);
 80003f4:	20fa      	movs	r0, #250	; 0xfa
 80003f6:	f001 fad3 	bl	80019a0 <HAL_Delay>
	 // CAN_senddata(&hcan);
	  bat_charge_management();
 80003fa:	f000 fe8f 	bl	800111c <bat_charge_management>
	  HAL_IWDG_Refresh(&hiwdg); //iwdg
 80003fe:	e7f1      	b.n	80003e4 <main+0x38>
 8000400:	20000294 	.word	0x20000294
 8000404:	200002d8 	.word	0x200002d8
 8000408:	20000004 	.word	0x20000004
 800040c:	2000024c 	.word	0x2000024c
 8000410:	20000240 	.word	0x20000240
 8000414:	40010c00 	.word	0x40010c00

08000418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b090      	sub	sp, #64	; 0x40
 800041c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041e:	f107 0318 	add.w	r3, r7, #24
 8000422:	2228      	movs	r2, #40	; 0x28
 8000424:	2100      	movs	r1, #0
 8000426:	4618      	mov	r0, r3
 8000428:	f004 fe66 	bl	80050f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	60da      	str	r2, [r3, #12]
 8000438:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800043a:	2309      	movs	r3, #9
 800043c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800043e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000442:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000444:	2300      	movs	r3, #0
 8000446:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000448:	2301      	movs	r3, #1
 800044a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800044c:	2301      	movs	r3, #1
 800044e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000450:	2302      	movs	r3, #2
 8000452:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000454:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000458:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800045a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800045e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000460:	f107 0318 	add.w	r3, r7, #24
 8000464:	4618      	mov	r0, r3
 8000466:	f002 ff89 	bl	800337c <HAL_RCC_OscConfig>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000470:	f000 f819 	bl	80004a6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000474:	230f      	movs	r3, #15
 8000476:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000478:	2302      	movs	r3, #2
 800047a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800047c:	2300      	movs	r3, #0
 800047e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000480:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000484:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	2101      	movs	r1, #1
 800048e:	4618      	mov	r0, r3
 8000490:	f003 f9f4 	bl	800387c <HAL_RCC_ClockConfig>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800049a:	f000 f804 	bl	80004a6 <Error_Handler>
  }
}
 800049e:	bf00      	nop
 80004a0:	3740      	adds	r7, #64	; 0x40
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}

080004a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a6:	b480      	push	{r7}
 80004a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004aa:	b672      	cpsid	i
}
 80004ac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ae:	e7fe      	b.n	80004ae <Error_Handler+0x8>

080004b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004b6:	4b15      	ldr	r3, [pc, #84]	; (800050c <HAL_MspInit+0x5c>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	4a14      	ldr	r2, [pc, #80]	; (800050c <HAL_MspInit+0x5c>)
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	6193      	str	r3, [r2, #24]
 80004c2:	4b12      	ldr	r3, [pc, #72]	; (800050c <HAL_MspInit+0x5c>)
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	60bb      	str	r3, [r7, #8]
 80004cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ce:	4b0f      	ldr	r3, [pc, #60]	; (800050c <HAL_MspInit+0x5c>)
 80004d0:	69db      	ldr	r3, [r3, #28]
 80004d2:	4a0e      	ldr	r2, [pc, #56]	; (800050c <HAL_MspInit+0x5c>)
 80004d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d8:	61d3      	str	r3, [r2, #28]
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <HAL_MspInit+0x5c>)
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004e6:	4b0a      	ldr	r3, [pc, #40]	; (8000510 <HAL_MspInit+0x60>)
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	4a04      	ldr	r2, [pc, #16]	; (8000510 <HAL_MspInit+0x60>)
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr
 800050c:	40021000 	.word	0x40021000
 8000510:	40010000 	.word	0x40010000

08000514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000518:	e7fe      	b.n	8000518 <NMI_Handler+0x4>

0800051a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800051e:	e7fe      	b.n	800051e <HardFault_Handler+0x4>

08000520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000524:	e7fe      	b.n	8000524 <MemManage_Handler+0x4>

08000526 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800052a:	e7fe      	b.n	800052a <BusFault_Handler+0x4>

0800052c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000530:	e7fe      	b.n	8000530 <UsageFault_Handler+0x4>

08000532 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000536:	bf00      	nop
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr

0800053e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800053e:	b480      	push	{r7}
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000542:	bf00      	nop
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr

0800054a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800054a:	b480      	push	{r7}
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800054e:	bf00      	nop
 8000550:	46bd      	mov	sp, r7
 8000552:	bc80      	pop	{r7}
 8000554:	4770      	bx	lr

08000556 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000556:	b580      	push	{r7, lr}
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800055a:	f001 fa05 	bl	8001968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
	...

08000564 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000568:	4802      	ldr	r0, [pc, #8]	; (8000574 <DMA1_Channel6_IRQHandler+0x10>)
 800056a:	f002 fb23 	bl	8002bb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000294 	.word	0x20000294

08000578 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800057c:	4802      	ldr	r0, [pc, #8]	; (8000588 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800057e:	f001 fe4b 	bl	8002218 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	20000218 	.word	0x20000218

0800058c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000590:	4802      	ldr	r0, [pc, #8]	; (800059c <TIM2_IRQHandler+0x10>)
 8000592:	f003 fba1 	bl	8003cd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	2000024c 	.word	0x2000024c

080005a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <USART2_IRQHandler+0x14>)
 80005a6:	f004 f849 	bl	800463c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  uart_module_IRQHandler(&signal_wire_huart_module);
 80005aa:	4803      	ldr	r0, [pc, #12]	; (80005b8 <USART2_IRQHandler+0x18>)
 80005ac:	f000 fa40 	bl	8000a30 <uart_module_IRQHandler>
  /* USER CODE END USART2_IRQn 1 */
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	200002d8 	.word	0x200002d8
 80005b8:	20000004 	.word	0x20000004

080005bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr

080005c8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ce:	f107 0308 	add.w	r3, r7, #8
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005dc:	463b      	mov	r3, r7
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005e4:	4b1e      	ldr	r3, [pc, #120]	; (8000660 <MX_TIM2_Init+0x98>)
 80005e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47999;
 80005ec:	4b1c      	ldr	r3, [pc, #112]	; (8000660 <MX_TIM2_Init+0x98>)
 80005ee:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80005f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f4:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <MX_TIM2_Init+0x98>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80005fa:	4b19      	ldr	r3, [pc, #100]	; (8000660 <MX_TIM2_Init+0x98>)
 80005fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000600:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000602:	4b17      	ldr	r3, [pc, #92]	; (8000660 <MX_TIM2_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000608:	4b15      	ldr	r3, [pc, #84]	; (8000660 <MX_TIM2_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800060e:	4814      	ldr	r0, [pc, #80]	; (8000660 <MX_TIM2_Init+0x98>)
 8000610:	f003 face 	bl	8003bb0 <HAL_TIM_Base_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800061a:	f7ff ff44 	bl	80004a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800061e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000622:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	4619      	mov	r1, r3
 800062a:	480d      	ldr	r0, [pc, #52]	; (8000660 <MX_TIM2_Init+0x98>)
 800062c:	f003 fc5c 	bl	8003ee8 <HAL_TIM_ConfigClockSource>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000636:	f7ff ff36 	bl	80004a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800063a:	2300      	movs	r3, #0
 800063c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000642:	463b      	mov	r3, r7
 8000644:	4619      	mov	r1, r3
 8000646:	4806      	ldr	r0, [pc, #24]	; (8000660 <MX_TIM2_Init+0x98>)
 8000648:	f003 fe24 	bl	8004294 <HAL_TIMEx_MasterConfigSynchronization>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000652:	f7ff ff28 	bl	80004a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000656:	bf00      	nop
 8000658:	3718      	adds	r7, #24
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	2000024c 	.word	0x2000024c

08000664 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000674:	d113      	bne.n	800069e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <HAL_TIM_Base_MspInit+0x44>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	4a0b      	ldr	r2, [pc, #44]	; (80006a8 <HAL_TIM_Base_MspInit+0x44>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	61d3      	str	r3, [r2, #28]
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <HAL_TIM_Base_MspInit+0x44>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	2100      	movs	r1, #0
 8000692:	201c      	movs	r0, #28
 8000694:	f002 f8df 	bl	8002856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000698:	201c      	movs	r0, #28
 800069a:	f002 f8f8 	bl	800288e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800069e:	bf00      	nop
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000

080006ac <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006b2:	4a12      	ldr	r2, [pc, #72]	; (80006fc <MX_USART2_UART_Init+0x50>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 4800;
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006b8:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 80006bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006e4:	f003 fe40 	bl	8004368 <HAL_UART_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ee:	f7ff feda 	bl	80004a6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	200002d8 	.word	0x200002d8
 80006fc:	40004400 	.word	0x40004400

08000700 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b088      	sub	sp, #32
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000708:	f107 0310 	add.w	r3, r7, #16
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a32      	ldr	r2, [pc, #200]	; (80007e4 <HAL_UART_MspInit+0xe4>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d15d      	bne.n	80007dc <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000720:	4b31      	ldr	r3, [pc, #196]	; (80007e8 <HAL_UART_MspInit+0xe8>)
 8000722:	69db      	ldr	r3, [r3, #28]
 8000724:	4a30      	ldr	r2, [pc, #192]	; (80007e8 <HAL_UART_MspInit+0xe8>)
 8000726:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800072a:	61d3      	str	r3, [r2, #28]
 800072c:	4b2e      	ldr	r3, [pc, #184]	; (80007e8 <HAL_UART_MspInit+0xe8>)
 800072e:	69db      	ldr	r3, [r3, #28]
 8000730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000738:	4b2b      	ldr	r3, [pc, #172]	; (80007e8 <HAL_UART_MspInit+0xe8>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4a2a      	ldr	r2, [pc, #168]	; (80007e8 <HAL_UART_MspInit+0xe8>)
 800073e:	f043 0304 	orr.w	r3, r3, #4
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	4b28      	ldr	r3, [pc, #160]	; (80007e8 <HAL_UART_MspInit+0xe8>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f003 0304 	and.w	r3, r3, #4
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000750:	2304      	movs	r3, #4
 8000752:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000754:	2302      	movs	r3, #2
 8000756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000758:	2303      	movs	r3, #3
 800075a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075c:	f107 0310 	add.w	r3, r7, #16
 8000760:	4619      	mov	r1, r3
 8000762:	4822      	ldr	r0, [pc, #136]	; (80007ec <HAL_UART_MspInit+0xec>)
 8000764:	f002 fb5a 	bl	8002e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000768:	2308      	movs	r3, #8
 800076a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000774:	f107 0310 	add.w	r3, r7, #16
 8000778:	4619      	mov	r1, r3
 800077a:	481c      	ldr	r0, [pc, #112]	; (80007ec <HAL_UART_MspInit+0xec>)
 800077c:	f002 fb4e 	bl	8002e1c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000780:	4b1b      	ldr	r3, [pc, #108]	; (80007f0 <HAL_UART_MspInit+0xf0>)
 8000782:	4a1c      	ldr	r2, [pc, #112]	; (80007f4 <HAL_UART_MspInit+0xf4>)
 8000784:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000786:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <HAL_UART_MspInit+0xf0>)
 8000788:	2200      	movs	r2, #0
 800078a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800078c:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <HAL_UART_MspInit+0xf0>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <HAL_UART_MspInit+0xf0>)
 8000794:	2280      	movs	r2, #128	; 0x80
 8000796:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000798:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <HAL_UART_MspInit+0xf0>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800079e:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <HAL_UART_MspInit+0xf0>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <HAL_UART_MspInit+0xf0>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <HAL_UART_MspInit+0xf0>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80007b0:	480f      	ldr	r0, [pc, #60]	; (80007f0 <HAL_UART_MspInit+0xf0>)
 80007b2:	f002 f895 	bl	80028e0 <HAL_DMA_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80007bc:	f7ff fe73 	bl	80004a6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	4a0b      	ldr	r2, [pc, #44]	; (80007f0 <HAL_UART_MspInit+0xf0>)
 80007c4:	639a      	str	r2, [r3, #56]	; 0x38
 80007c6:	4a0a      	ldr	r2, [pc, #40]	; (80007f0 <HAL_UART_MspInit+0xf0>)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2100      	movs	r1, #0
 80007d0:	2026      	movs	r0, #38	; 0x26
 80007d2:	f002 f840 	bl	8002856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007d6:	2026      	movs	r0, #38	; 0x26
 80007d8:	f002 f859 	bl	800288e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80007dc:	bf00      	nop
 80007de:	3720      	adds	r7, #32
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40004400 	.word	0x40004400
 80007e8:	40021000 	.word	0x40021000
 80007ec:	40010800 	.word	0x40010800
 80007f0:	20000294 	.word	0x20000294
 80007f4:	4002006c 	.word	0x4002006c

080007f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f8:	480c      	ldr	r0, [pc, #48]	; (800082c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007fa:	490d      	ldr	r1, [pc, #52]	; (8000830 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007fc:	4a0d      	ldr	r2, [pc, #52]	; (8000834 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000800:	e002      	b.n	8000808 <LoopCopyDataInit>

08000802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000806:	3304      	adds	r3, #4

08000808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800080c:	d3f9      	bcc.n	8000802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080e:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000810:	4c0a      	ldr	r4, [pc, #40]	; (800083c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000814:	e001      	b.n	800081a <LoopFillZerobss>

08000816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000818:	3204      	adds	r2, #4

0800081a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800081c:	d3fb      	bcc.n	8000816 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800081e:	f7ff fecd 	bl	80005bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000822:	f004 fc37 	bl	8005094 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000826:	f7ff fdc1 	bl	80003ac <main>
  bx lr
 800082a:	4770      	bx	lr
  ldr r0, =_sdata
 800082c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000830:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8000834:	08005150 	.word	0x08005150
  ldr r2, =_sbss
 8000838:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 800083c:	200007fc 	.word	0x200007fc

08000840 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000840:	e7fe      	b.n	8000840 <ADC1_2_IRQHandler>
	...

08000844 <CAN1_Config>:
uint32_t pTxMailbox = 0;
uint8_t buffer[1024];

/* USER CODE BEGIN 1 */
  void CAN1_Config(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	; 0x28
 8000848:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef CAN_FilterType;
	CAN_FilterType.FilterBank=0;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
	CAN_FilterType.FilterIdHigh=0x0000;
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
	CAN_FilterType.FilterIdLow=0x0000;
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
	CAN_FilterType.FilterMaskIdHigh=0x0000;
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
	CAN_FilterType.FilterMaskIdLow=0x0000;
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
	CAN_FilterType.FilterFIFOAssignment=CAN_RX_FIFO0;
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
	CAN_FilterType.FilterMode=CAN_FILTERMODE_IDMASK;
 8000862:	2300      	movs	r3, #0
 8000864:	61bb      	str	r3, [r7, #24]
	CAN_FilterType.FilterScale=CAN_FILTERSCALE_32BIT;
 8000866:	2301      	movs	r3, #1
 8000868:	61fb      	str	r3, [r7, #28]
	CAN_FilterType.FilterActivation=ENABLE;
 800086a:	2301      	movs	r3, #1
 800086c:	623b      	str	r3, [r7, #32]
	CAN_FilterType.SlaveStartFilterBank=14;
 800086e:	230e      	movs	r3, #14
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
	if(HAL_CAN_ConfigFilter(&hcan,&CAN_FilterType)!=HAL_OK)
 8000872:	463b      	mov	r3, r7
 8000874:	4619      	mov	r1, r3
 8000876:	480e      	ldr	r0, [pc, #56]	; (80008b0 <CAN1_Config+0x6c>)
 8000878:	f001 f9b1 	bl	8001bde <HAL_CAN_ConfigFilter>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <CAN1_Config+0x42>
	{
		Error_Handler();
 8000882:	f7ff fe10 	bl	80004a6 <Error_Handler>
	}
	if(HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING)!=HAL_OK)
 8000886:	2102      	movs	r1, #2
 8000888:	4809      	ldr	r0, [pc, #36]	; (80008b0 <CAN1_Config+0x6c>)
 800088a:	f001 fca0 	bl	80021ce <HAL_CAN_ActivateNotification>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <CAN1_Config+0x54>
	{
		Error_Handler();
 8000894:	f7ff fe07 	bl	80004a6 <Error_Handler>
	}
	if(HAL_CAN_Start(&hcan)!=HAL_OK)
 8000898:	4805      	ldr	r0, [pc, #20]	; (80008b0 <CAN1_Config+0x6c>)
 800089a:	f001 fa69 	bl	8001d70 <HAL_CAN_Start>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <CAN1_Config+0x64>
	{
		Error_Handler();
 80008a4:	f7ff fdff 	bl	80004a6 <Error_Handler>
	}
}
 80008a8:	bf00      	nop
 80008aa:	3728      	adds	r7, #40	; 0x28
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000218 	.word	0x20000218

080008b4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  }



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)//接受邮箱0挂起中断回调函数
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	//static uint16_t cnt=0;
	if(hcan->Instance==CAN1)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a09      	ldr	r2, [pc, #36]	; (80008e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d10b      	bne.n	80008de <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
	{
		HAL_CAN_GetRxMessage(hcan,CAN_FILTER_FIFO0,&RXHeader,RXmessage);//获取数据
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80008c8:	4a09      	ldr	r2, [pc, #36]	; (80008f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80008ca:	2100      	movs	r1, #0
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f001 fb6d 	bl	8001fac <HAL_CAN_GetRxMessage>

		bat_can_data_handler(RXHeader.ExtId,RXmessage);
 80008d2:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	4905      	ldr	r1, [pc, #20]	; (80008ec <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 f921 	bl	8000b20 <bat_can_data_handler>
//		}


    }

}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40006400 	.word	0x40006400
 80008ec:	20000334 	.word	0x20000334
 80008f0:	20000744 	.word	0x20000744

080008f4 <user_can_send_data>:
	 TXHeader.TransmitGlobalTime = DISABLE;
	 HAL_CAN_AddTxMessage(hcan,&TXHeader,TXmessage,&pTxMailbox);
}

uint8_t user_can_send_data(uint32_t id , uint8_t *data)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
     TXHeader.StdId=0x00000000;
 80008fe:	4b0f      	ldr	r3, [pc, #60]	; (800093c <user_can_send_data+0x48>)
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
	 TXHeader.ExtId=id;
 8000904:	4a0d      	ldr	r2, [pc, #52]	; (800093c <user_can_send_data+0x48>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6053      	str	r3, [r2, #4]
	 TXHeader.DLC=8;
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <user_can_send_data+0x48>)
 800090c:	2208      	movs	r2, #8
 800090e:	611a      	str	r2, [r3, #16]
	 TXHeader.IDE=CAN_ID_EXT;
 8000910:	4b0a      	ldr	r3, [pc, #40]	; (800093c <user_can_send_data+0x48>)
 8000912:	2204      	movs	r2, #4
 8000914:	609a      	str	r2, [r3, #8]
	 TXHeader.RTR=CAN_RTR_DATA;
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <user_can_send_data+0x48>)
 8000918:	2200      	movs	r2, #0
 800091a:	60da      	str	r2, [r3, #12]
	 TXHeader.TransmitGlobalTime = DISABLE;
 800091c:	4b07      	ldr	r3, [pc, #28]	; (800093c <user_can_send_data+0x48>)
 800091e:	2200      	movs	r2, #0
 8000920:	751a      	strb	r2, [r3, #20]
	 status =  HAL_CAN_AddTxMessage(&hcan,&TXHeader,data,&pTxMailbox);
 8000922:	4b07      	ldr	r3, [pc, #28]	; (8000940 <user_can_send_data+0x4c>)
 8000924:	683a      	ldr	r2, [r7, #0]
 8000926:	4905      	ldr	r1, [pc, #20]	; (800093c <user_can_send_data+0x48>)
 8000928:	4806      	ldr	r0, [pc, #24]	; (8000944 <user_can_send_data+0x50>)
 800092a:	f001 fa65 	bl	8001df8 <HAL_CAN_AddTxMessage>
 800092e:	4603      	mov	r3, r0
 8000930:	73fb      	strb	r3, [r7, #15]
	 return status;
 8000932:	7bfb      	ldrb	r3, [r7, #15]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	2000031c 	.word	0x2000031c
 8000940:	20000208 	.word	0x20000208
 8000944:	20000218 	.word	0x20000218

08000948 <getCheckSum>:

}


uint8_t  getCheckSum(uint8_t *data,uint16_t lenth)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	460b      	mov	r3, r1
 8000952:	807b      	strh	r3, [r7, #2]
	uint32_t sum=0;
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
	for(uint16_t i=0;i<lenth;i++)
 8000958:	2300      	movs	r3, #0
 800095a:	817b      	strh	r3, [r7, #10]
 800095c:	e00a      	b.n	8000974 <getCheckSum+0x2c>
	{
		sum+=data[i];
 800095e:	897b      	ldrh	r3, [r7, #10]
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	4413      	add	r3, r2
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	461a      	mov	r2, r3
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	4413      	add	r3, r2
 800096c:	60fb      	str	r3, [r7, #12]
	for(uint16_t i=0;i<lenth;i++)
 800096e:	897b      	ldrh	r3, [r7, #10]
 8000970:	3301      	adds	r3, #1
 8000972:	817b      	strh	r3, [r7, #10]
 8000974:	897a      	ldrh	r2, [r7, #10]
 8000976:	887b      	ldrh	r3, [r7, #2]
 8000978:	429a      	cmp	r2, r3
 800097a:	d3f0      	bcc.n	800095e <getCheckSum+0x16>

	}
	return (uint8_t )sum;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	b2db      	uxtb	r3, r3

}
 8000980:	4618      	mov	r0, r3
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr
	...

0800098c <HAL_TIM_PeriodElapsedCallback>:

#include "includes.h"


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)  //1ms IRQ
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	static uint16_t sec_cnt = 0;
	static uint16_t get_adc_flag=0;
	if (htim == &htim2)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4a10      	ldr	r2, [pc, #64]	; (80009d8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d118      	bne.n	80009ce <HAL_TIM_PeriodElapsedCallback+0x42>
	{
		//uartReceiveTimmerRun(&hrs485);
		//ADS_getAllChannel(30);
		if (++sec_cnt > 1000)
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x50>)
 800099e:	881b      	ldrh	r3, [r3, #0]
 80009a0:	3301      	adds	r3, #1
 80009a2:	b29a      	uxth	r2, r3
 80009a4:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x50>)
 80009a6:	801a      	strh	r2, [r3, #0]
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x50>)
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009b0:	d907      	bls.n	80009c2 <HAL_TIM_PeriodElapsedCallback+0x36>
		{
			sec_cnt=0;
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x50>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	801a      	strh	r2, [r3, #0]
		    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80009b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009bc:	4808      	ldr	r0, [pc, #32]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80009be:	f002 fc73 	bl	80032a8 <HAL_GPIO_TogglePin>
		}
		if(++get_adc_flag > 100)
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	3301      	adds	r3, #1
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80009cc:	801a      	strh	r2, [r3, #0]

		//	ADS_getAllChannel(50);

		}
	}
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	2000024c 	.word	0x2000024c
 80009dc:	2000020c 	.word	0x2000020c
 80009e0:	40010c00 	.word	0x40010c00
 80009e4:	2000020e 	.word	0x2000020e

080009e8 <uart_module_init>:
}



void uart_module_init(uart_module_TypeDef *UART_MODULE,UART_HandleTypeDef *UART,DMA_HandleTypeDef *hdma_usart_rx)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
    UART_MODULE->UART = UART;
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	601a      	str	r2, [r3, #0]
    UART_MODULE->hdma_usart_rx = hdma_usart_rx;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	605a      	str	r2, [r3, #4]
	__HAL_UART_ENABLE_IT(UART_MODULE->UART, UART_IT_IDLE);
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	68da      	ldr	r2, [r3, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f042 0210 	orr.w	r2, r2, #16
 8000a12:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_DMA(UART_MODULE->UART, UART_MODULE->uart_module_receive_buffer, RECEIVE_BUFFER_SIZE);
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	6818      	ldr	r0, [r3, #0]
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	330c      	adds	r3, #12
 8000a1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a20:	4619      	mov	r1, r3
 8000a22:	f003 fd80 	bl	8004526 <HAL_UART_Receive_DMA>

}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <uart_module_IRQHandler>:
//}



void uart_module_IRQHandler(uart_module_TypeDef *UART_MODULE)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	uint16_t data_length;

   if (RESET != __HAL_UART_GET_FLAG(UART_MODULE->UART, UART_FLAG_IDLE) )
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f003 0310 	and.w	r3, r3, #16
 8000a44:	2b10      	cmp	r3, #16
 8000a46:	d126      	bne.n	8000a96 <uart_module_IRQHandler+0x66>
		{
			__HAL_UART_CLEAR_IDLEFLAG(UART_MODULE->UART);
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
			//printf("\r\nUART1 Idle IQR Detected\r\n");
			uart_cnt++;
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <uart_module_IRQHandler+0x70>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	3301      	adds	r3, #1
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <uart_module_IRQHandler+0x70>)
 8000a6c:	701a      	strb	r2, [r3, #0]
			//HAL_UART_DMAStop(huart);
			data_length = RECEIVE_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(UART_MODULE->hdma_usart_rx);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000a7c:	81fb      	strh	r3, [r7, #14]
			//printf("Receive Data_length = %d : ", data_length);
			//HAL_UART_Transmit(huart, UART_MODULE->uart_module_receive_buffer,data_length, 0x200);

			//printf("\r\n");
			//memset(UART_MODULE->uart_module_receive_buffer, 0, data_length);
			UART_MODULE->rec_lenth = data_length;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	89fa      	ldrh	r2, [r7, #14]
 8000a82:	815a      	strh	r2, [r3, #10]
			data_length = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	81fb      	strh	r3, [r7, #14]
			//HAL_UART_Receive_DMA(&huart1,UART_MODULE->uart_module_receive_buffer,RECEIVE_BUFFER_SIZE);
		    UART_MODULE->rec_flag = 1;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	721a      	strb	r2, [r3, #8]

		    UART_MODULE->Handler();
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8000a94:	4798      	blx	r3

		}


}
 8000a96:	bf00      	nop
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000210 	.word	0x20000210

08000aa4 <uart_module_send_hex>:
	HAL_UART_Transmit(usb_huart_module.UART, data, lenth, 1000);

}

void uart_module_send_hex(uint8_t *data,uint8_t lenth)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	460b      	mov	r3, r1
 8000aae:	70fb      	strb	r3, [r7, #3]
	//HAL_GPIO_WritePin(RS485_CTRL_GPIO_Port, RS485_CTRL_Pin, SET);
	uart_module_stop_receive(&signal_wire_huart_module);
 8000ab0:	4809      	ldr	r0, [pc, #36]	; (8000ad8 <uart_module_send_hex+0x34>)
 8000ab2:	f000 f813 	bl	8000adc <uart_module_stop_receive>
	HAL_UART_Transmit(signal_wire_huart_module.UART, data, lenth, 1000);
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <uart_module_send_hex+0x34>)
 8000ab8:	6818      	ldr	r0, [r3, #0]
 8000aba:	78fb      	ldrb	r3, [r7, #3]
 8000abc:	b29a      	uxth	r2, r3
 8000abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac2:	6879      	ldr	r1, [r7, #4]
 8000ac4:	f003 fc9d 	bl	8004402 <HAL_UART_Transmit>
	uart_module_start_receive(&signal_wire_huart_module);
 8000ac8:	4803      	ldr	r0, [pc, #12]	; (8000ad8 <uart_module_send_hex+0x34>)
 8000aca:	f000 f814 	bl	8000af6 <uart_module_start_receive>
	//HAL_GPIO_WritePin(RS485_CTRL_GPIO_Port, RS485_CTRL_Pin, RESET);
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000004 	.word	0x20000004

08000adc <uart_module_stop_receive>:


void uart_module_stop_receive(uart_module_TypeDef *UART_MODULE)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	HAL_UART_DMAStop(UART_MODULE->UART);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f003 fd4c 	bl	8004586 <HAL_UART_DMAStop>


}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <uart_module_start_receive>:

void uart_module_start_receive(uart_module_TypeDef *UART_MODULE)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b082      	sub	sp, #8
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
	UART_MODULE->rec_lenth=0;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2200      	movs	r2, #0
 8000b02:	815a      	strh	r2, [r3, #10]
	HAL_UART_Receive_DMA(UART_MODULE->UART,UART_MODULE->uart_module_receive_buffer,RECEIVE_BUFFER_SIZE);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6818      	ldr	r0, [r3, #0]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	330c      	adds	r3, #12
 8000b0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b10:	4619      	mov	r1, r3
 8000b12:	f003 fd08 	bl	8004526 <HAL_UART_Receive_DMA>

}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <bat_can_data_handler>:
uint8_t chg_fsm = CHG_INIT;
int16_t temp16=0;


void bat_can_data_handler(uint32_t id,uint8_t *data)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
	TIM2->CNT=0;
 8000b2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b2e:	2200      	movs	r2, #0
 8000b30:	625a      	str	r2, [r3, #36]	; 0x24
	switch(id)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a9b      	ldr	r2, [pc, #620]	; (8000da4 <bat_can_data_handler+0x284>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	f000 81a9 	beq.w	8000e8e <bat_can_data_handler+0x36e>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a99      	ldr	r2, [pc, #612]	; (8000da4 <bat_can_data_handler+0x284>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	f200 82e4 	bhi.w	800110e <bat_can_data_handler+0x5ee>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4a97      	ldr	r2, [pc, #604]	; (8000da8 <bat_can_data_handler+0x288>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	f000 82c6 	beq.w	80010dc <bat_can_data_handler+0x5bc>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a95      	ldr	r2, [pc, #596]	; (8000da8 <bat_can_data_handler+0x288>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	f200 82da 	bhi.w	800110e <bat_can_data_handler+0x5ee>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a93      	ldr	r2, [pc, #588]	; (8000dac <bat_can_data_handler+0x28c>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	f000 825d 	beq.w	800101e <bat_can_data_handler+0x4fe>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a91      	ldr	r2, [pc, #580]	; (8000dac <bat_can_data_handler+0x28c>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	f200 82d0 	bhi.w	800110e <bat_can_data_handler+0x5ee>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a8f      	ldr	r2, [pc, #572]	; (8000db0 <bat_can_data_handler+0x290>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	f000 8210 	beq.w	8000f98 <bat_can_data_handler+0x478>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a8d      	ldr	r2, [pc, #564]	; (8000db0 <bat_can_data_handler+0x290>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	f200 82c6 	bhi.w	800110e <bat_can_data_handler+0x5ee>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a8b      	ldr	r2, [pc, #556]	; (8000db4 <bat_can_data_handler+0x294>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	f000 8200 	beq.w	8000f8c <bat_can_data_handler+0x46c>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a89      	ldr	r2, [pc, #548]	; (8000db4 <bat_can_data_handler+0x294>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	f200 82bc 	bhi.w	800110e <bat_can_data_handler+0x5ee>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a87      	ldr	r2, [pc, #540]	; (8000db8 <bat_can_data_handler+0x298>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	f000 81f0 	beq.w	8000f80 <bat_can_data_handler+0x460>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a85      	ldr	r2, [pc, #532]	; (8000db8 <bat_can_data_handler+0x298>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	f200 82b2 	bhi.w	800110e <bat_can_data_handler+0x5ee>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a83      	ldr	r2, [pc, #524]	; (8000dbc <bat_can_data_handler+0x29c>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	f000 81e0 	beq.w	8000f74 <bat_can_data_handler+0x454>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a81      	ldr	r2, [pc, #516]	; (8000dbc <bat_can_data_handler+0x29c>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	f200 82a8 	bhi.w	800110e <bat_can_data_handler+0x5ee>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a7f      	ldr	r2, [pc, #508]	; (8000dc0 <bat_can_data_handler+0x2a0>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	f000 817d 	beq.w	8000ec2 <bat_can_data_handler+0x3a2>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a7d      	ldr	r2, [pc, #500]	; (8000dc0 <bat_can_data_handler+0x2a0>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	f200 829e 	bhi.w	800110e <bat_can_data_handler+0x5ee>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a7b      	ldr	r2, [pc, #492]	; (8000dc4 <bat_can_data_handler+0x2a4>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d07b      	beq.n	8000cd2 <bat_can_data_handler+0x1b2>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a79      	ldr	r2, [pc, #484]	; (8000dc4 <bat_can_data_handler+0x2a4>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	f200 8295 	bhi.w	800110e <bat_can_data_handler+0x5ee>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a78      	ldr	r2, [pc, #480]	; (8000dc8 <bat_can_data_handler+0x2a8>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	f000 810f 	beq.w	8000e0c <bat_can_data_handler+0x2ec>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a75      	ldr	r2, [pc, #468]	; (8000dc8 <bat_can_data_handler+0x2a8>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	f200 828b 	bhi.w	800110e <bat_can_data_handler+0x5ee>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a74      	ldr	r2, [pc, #464]	; (8000dcc <bat_can_data_handler+0x2ac>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	f000 80c2 	beq.w	8000d86 <bat_can_data_handler+0x266>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4a71      	ldr	r2, [pc, #452]	; (8000dcc <bat_can_data_handler+0x2ac>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	f200 8281 	bhi.w	800110e <bat_can_data_handler+0x5ee>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a70      	ldr	r2, [pc, #448]	; (8000dd0 <bat_can_data_handler+0x2b0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	f000 809d 	beq.w	8000d50 <bat_can_data_handler+0x230>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a6d      	ldr	r2, [pc, #436]	; (8000dd0 <bat_can_data_handler+0x2b0>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	f200 8277 	bhi.w	800110e <bat_can_data_handler+0x5ee>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a6c      	ldr	r2, [pc, #432]	; (8000dd4 <bat_can_data_handler+0x2b4>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d078      	beq.n	8000d1a <bat_can_data_handler+0x1fa>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a6a      	ldr	r2, [pc, #424]	; (8000dd4 <bat_can_data_handler+0x2b4>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	f200 826e 	bhi.w	800110e <bat_can_data_handler+0x5ee>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a68      	ldr	r2, [pc, #416]	; (8000dd8 <bat_can_data_handler+0x2b8>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d054      	beq.n	8000ce4 <bat_can_data_handler+0x1c4>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a66      	ldr	r2, [pc, #408]	; (8000dd8 <bat_can_data_handler+0x2b8>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	f200 8265 	bhi.w	800110e <bat_can_data_handler+0x5ee>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a65      	ldr	r2, [pc, #404]	; (8000ddc <bat_can_data_handler+0x2bc>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	f000 8215 	beq.w	8001078 <bat_can_data_handler+0x558>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a62      	ldr	r2, [pc, #392]	; (8000ddc <bat_can_data_handler+0x2bc>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	f200 825b 	bhi.w	800110e <bat_can_data_handler+0x5ee>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a61      	ldr	r2, [pc, #388]	; (8000de0 <bat_can_data_handler+0x2c0>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	f000 81f9 	beq.w	8001054 <bat_can_data_handler+0x534>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a5e      	ldr	r2, [pc, #376]	; (8000de0 <bat_can_data_handler+0x2c0>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	f200 8251 	bhi.w	800110e <bat_can_data_handler+0x5ee>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a5d      	ldr	r2, [pc, #372]	; (8000de4 <bat_can_data_handler+0x2c4>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	f000 8247 	beq.w	8001104 <bat_can_data_handler+0x5e4>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a5a      	ldr	r2, [pc, #360]	; (8000de4 <bat_can_data_handler+0x2c4>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	f200 8247 	bhi.w	800110e <bat_can_data_handler+0x5ee>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a59      	ldr	r2, [pc, #356]	; (8000de8 <bat_can_data_handler+0x2c8>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	f000 8235 	beq.w	80010f4 <bat_can_data_handler+0x5d4>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a56      	ldr	r2, [pc, #344]	; (8000de8 <bat_can_data_handler+0x2c8>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	f200 823d 	bhi.w	800110e <bat_can_data_handler+0x5ee>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a55      	ldr	r2, [pc, #340]	; (8000dec <bat_can_data_handler+0x2cc>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	f000 821b 	beq.w	80010d4 <bat_can_data_handler+0x5b4>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a52      	ldr	r2, [pc, #328]	; (8000dec <bat_can_data_handler+0x2cc>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	f200 8233 	bhi.w	800110e <bat_can_data_handler+0x5ee>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4a51      	ldr	r2, [pc, #324]	; (8000df0 <bat_can_data_handler+0x2d0>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	f000 820d 	beq.w	80010cc <bat_can_data_handler+0x5ac>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a4e      	ldr	r2, [pc, #312]	; (8000df0 <bat_can_data_handler+0x2d0>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	f200 8229 	bhi.w	800110e <bat_can_data_handler+0x5ee>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a4d      	ldr	r2, [pc, #308]	; (8000df4 <bat_can_data_handler+0x2d4>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	f000 820f 	beq.w	80010e4 <bat_can_data_handler+0x5c4>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a4b      	ldr	r2, [pc, #300]	; (8000df8 <bat_can_data_handler+0x2d8>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	f000 8216 	beq.w	80010fc <bat_can_data_handler+0x5dc>
	case BSD:
		chg_flags.chg_bms_cnt_flag = true;
		break;
	}

}
 8000cd0:	e21d      	b.n	800110e <bat_can_data_handler+0x5ee>
		can_battery.ntc_num = data[0];
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	781a      	ldrb	r2, [r3, #0]
 8000cd6:	4b49      	ldr	r3, [pc, #292]	; (8000dfc <bat_can_data_handler+0x2dc>)
 8000cd8:	701a      	strb	r2, [r3, #0]
		can_battery.series_num = data[2];
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	789a      	ldrb	r2, [r3, #2]
 8000cde:	4b47      	ldr	r3, [pc, #284]	; (8000dfc <bat_can_data_handler+0x2dc>)
 8000ce0:	705a      	strb	r2, [r3, #1]
		break;
 8000ce2:	e214      	b.n	800110e <bat_can_data_handler+0x5ee>
		for(uint8_t i=0;i<8;i++)
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	73fb      	strb	r3, [r7, #15]
 8000ce8:	e00e      	b.n	8000d08 <bat_can_data_handler+0x1e8>
			if(data[i]>127) //not ascii
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	683a      	ldr	r2, [r7, #0]
 8000cee:	4413      	add	r3, r2
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	b25b      	sxtb	r3, r3
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	da04      	bge.n	8000d02 <bat_can_data_handler+0x1e2>
				data[i]=0;
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
 8000cfa:	683a      	ldr	r2, [r7, #0]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	2200      	movs	r2, #0
 8000d00:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0;i<8;i++)
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
 8000d04:	3301      	adds	r3, #1
 8000d06:	73fb      	strb	r3, [r7, #15]
 8000d08:	7bfb      	ldrb	r3, [r7, #15]
 8000d0a:	2b07      	cmp	r3, #7
 8000d0c:	d9ed      	bls.n	8000cea <bat_can_data_handler+0x1ca>
		memcpy(&can_battery.battery_code[0],data,8);
 8000d0e:	2208      	movs	r2, #8
 8000d10:	6839      	ldr	r1, [r7, #0]
 8000d12:	483b      	ldr	r0, [pc, #236]	; (8000e00 <bat_can_data_handler+0x2e0>)
 8000d14:	f004 f9e2 	bl	80050dc <memcpy>
		break;
 8000d18:	e1f9      	b.n	800110e <bat_can_data_handler+0x5ee>
		for(uint8_t i=0;i<8;i++)
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	73bb      	strb	r3, [r7, #14]
 8000d1e:	e00e      	b.n	8000d3e <bat_can_data_handler+0x21e>
			if(data[i]>127) //not ascii
 8000d20:	7bbb      	ldrb	r3, [r7, #14]
 8000d22:	683a      	ldr	r2, [r7, #0]
 8000d24:	4413      	add	r3, r2
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	b25b      	sxtb	r3, r3
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	da04      	bge.n	8000d38 <bat_can_data_handler+0x218>
				data[i]=0;
 8000d2e:	7bbb      	ldrb	r3, [r7, #14]
 8000d30:	683a      	ldr	r2, [r7, #0]
 8000d32:	4413      	add	r3, r2
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0;i<8;i++)
 8000d38:	7bbb      	ldrb	r3, [r7, #14]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	73bb      	strb	r3, [r7, #14]
 8000d3e:	7bbb      	ldrb	r3, [r7, #14]
 8000d40:	2b07      	cmp	r3, #7
 8000d42:	d9ed      	bls.n	8000d20 <bat_can_data_handler+0x200>
		memcpy(&can_battery.battery_code[8],data,8);
 8000d44:	2208      	movs	r2, #8
 8000d46:	6839      	ldr	r1, [r7, #0]
 8000d48:	482e      	ldr	r0, [pc, #184]	; (8000e04 <bat_can_data_handler+0x2e4>)
 8000d4a:	f004 f9c7 	bl	80050dc <memcpy>
		break;
 8000d4e:	e1de      	b.n	800110e <bat_can_data_handler+0x5ee>
		for(uint8_t i=0;i<8;i++)
 8000d50:	2300      	movs	r3, #0
 8000d52:	737b      	strb	r3, [r7, #13]
 8000d54:	e00e      	b.n	8000d74 <bat_can_data_handler+0x254>
			if(data[i]>127) //not ascii
 8000d56:	7b7b      	ldrb	r3, [r7, #13]
 8000d58:	683a      	ldr	r2, [r7, #0]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	b25b      	sxtb	r3, r3
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	da04      	bge.n	8000d6e <bat_can_data_handler+0x24e>
				data[i]=0;
 8000d64:	7b7b      	ldrb	r3, [r7, #13]
 8000d66:	683a      	ldr	r2, [r7, #0]
 8000d68:	4413      	add	r3, r2
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0;i<8;i++)
 8000d6e:	7b7b      	ldrb	r3, [r7, #13]
 8000d70:	3301      	adds	r3, #1
 8000d72:	737b      	strb	r3, [r7, #13]
 8000d74:	7b7b      	ldrb	r3, [r7, #13]
 8000d76:	2b07      	cmp	r3, #7
 8000d78:	d9ed      	bls.n	8000d56 <bat_can_data_handler+0x236>
		memcpy(&can_battery.battery_code[16],data,8);
 8000d7a:	2208      	movs	r2, #8
 8000d7c:	6839      	ldr	r1, [r7, #0]
 8000d7e:	4822      	ldr	r0, [pc, #136]	; (8000e08 <bat_can_data_handler+0x2e8>)
 8000d80:	f004 f9ac 	bl	80050dc <memcpy>
		break;
 8000d84:	e1c3      	b.n	800110e <bat_can_data_handler+0x5ee>
		can_battery.max_value.max_charge_current = (data[1]*256+data[0])*10;
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	021b      	lsls	r3, r3, #8
 8000d8e:	683a      	ldr	r2, [r7, #0]
 8000d90:	7812      	ldrb	r2, [r2, #0]
 8000d92:	441a      	add	r2, r3
 8000d94:	4613      	mov	r3, r2
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	4413      	add	r3, r2
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <bat_can_data_handler+0x2dc>)
 8000da0:	661a      	str	r2, [r3, #96]	; 0x60
		break;
 8000da2:	e1b4      	b.n	800110e <bat_can_data_handler+0x5ee>
 8000da4:	1c3a0809 	.word	0x1c3a0809
 8000da8:	1c350809 	.word	0x1c350809
 8000dac:	18fd0809 	.word	0x18fd0809
 8000db0:	18f90809 	.word	0x18f90809
 8000db4:	18f80809 	.word	0x18f80809
 8000db8:	18f70809 	.word	0x18f70809
 8000dbc:	18f60809 	.word	0x18f60809
 8000dc0:	18f50809 	.word	0x18f50809
 8000dc4:	18f10809 	.word	0x18f10809
 8000dc8:	18e10809 	.word	0x18e10809
 8000dcc:	18e00809 	.word	0x18e00809
 8000dd0:	18650809 	.word	0x18650809
 8000dd4:	18640809 	.word	0x18640809
 8000dd8:	18630809 	.word	0x18630809
 8000ddc:	18620809 	.word	0x18620809
 8000de0:	18610809 	.word	0x18610809
 8000de4:	183e0908 	.word	0x183e0908
 8000de8:	18390809 	.word	0x18390809
 8000dec:	18340809 	.word	0x18340809
 8000df0:	18320809 	.word	0x18320809
 8000df4:	10370809 	.word	0x10370809
 8000df8:	103c0908 	.word	0x103c0908
 8000dfc:	20000770 	.word	0x20000770
 8000e00:	2000078c 	.word	0x2000078c
 8000e04:	20000794 	.word	0x20000794
 8000e08:	2000079c 	.word	0x2000079c
		can_battery.battery_soc = data[0];
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	781a      	ldrb	r2, [r3, #0]
 8000e10:	4ba6      	ldr	r3, [pc, #664]	; (80010ac <bat_can_data_handler+0x58c>)
 8000e12:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		can_battery.battery_soh = data[1];
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	785a      	ldrb	r2, [r3, #1]
 8000e1a:	4ba4      	ldr	r3, [pc, #656]	; (80010ac <bat_can_data_handler+0x58c>)
 8000e1c:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		can_battery.pack_voltage = ((data[3]*256)+data[2])*10;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	3303      	adds	r3, #3
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	021b      	lsls	r3, r3, #8
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	3202      	adds	r2, #2
 8000e2c:	7812      	ldrb	r2, [r2, #0]
 8000e2e:	441a      	add	r2, r3
 8000e30:	4613      	mov	r3, r2
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	4413      	add	r3, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b9c      	ldr	r3, [pc, #624]	; (80010ac <bat_can_data_handler+0x58c>)
 8000e3c:	679a      	str	r2, [r3, #120]	; 0x78
		memcpy(&can_battery.cycle_counter,&data[4],2);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	3304      	adds	r3, #4
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	4b99      	ldr	r3, [pc, #612]	; (80010ac <bat_can_data_handler+0x58c>)
 8000e48:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		can_battery.full_capacity = (data[7]*256+data[6])*10;
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	3307      	adds	r3, #7
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	021b      	lsls	r3, r3, #8
 8000e54:	683a      	ldr	r2, [r7, #0]
 8000e56:	3206      	adds	r2, #6
 8000e58:	7812      	ldrb	r2, [r2, #0]
 8000e5a:	441a      	add	r2, r3
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	4413      	add	r3, r2
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b91      	ldr	r3, [pc, #580]	; (80010ac <bat_can_data_handler+0x58c>)
 8000e68:	609a      	str	r2, [r3, #8]
		can_battery.design_capacity = can_battery.full_capacity;
 8000e6a:	4b90      	ldr	r3, [pc, #576]	; (80010ac <bat_can_data_handler+0x58c>)
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	4a8f      	ldr	r2, [pc, #572]	; (80010ac <bat_can_data_handler+0x58c>)
 8000e70:	60d3      	str	r3, [r2, #12]
		can_battery.current_capacity = can_battery.full_capacity*can_battery.battery_soc/100;
 8000e72:	4b8e      	ldr	r3, [pc, #568]	; (80010ac <bat_can_data_handler+0x58c>)
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	4a8d      	ldr	r2, [pc, #564]	; (80010ac <bat_can_data_handler+0x58c>)
 8000e78:	f892 2076 	ldrb.w	r2, [r2, #118]	; 0x76
 8000e7c:	fb02 f303 	mul.w	r3, r2, r3
 8000e80:	4a8b      	ldr	r2, [pc, #556]	; (80010b0 <bat_can_data_handler+0x590>)
 8000e82:	fba2 2303 	umull	r2, r3, r2, r3
 8000e86:	095b      	lsrs	r3, r3, #5
 8000e88:	4a88      	ldr	r2, [pc, #544]	; (80010ac <bat_can_data_handler+0x58c>)
 8000e8a:	6053      	str	r3, [r2, #4]
		break;
 8000e8c:	e13f      	b.n	800110e <bat_can_data_handler+0x5ee>
		chg_flags.chg_status_flag = true;
 8000e8e:	4b89      	ldr	r3, [pc, #548]	; (80010b4 <bat_can_data_handler+0x594>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	719a      	strb	r2, [r3, #6]
		memcpy(&temp16,&data[2],2);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	3302      	adds	r3, #2
 8000e98:	881b      	ldrh	r3, [r3, #0]
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	4b86      	ldr	r3, [pc, #536]	; (80010b8 <bat_can_data_handler+0x598>)
 8000e9e:	801a      	strh	r2, [r3, #0]
		can_battery.real_time_current = temp16*10;
 8000ea0:	4b85      	ldr	r3, [pc, #532]	; (80010b8 <bat_can_data_handler+0x598>)
 8000ea2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4413      	add	r3, r2
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b7e      	ldr	r3, [pc, #504]	; (80010ac <bat_can_data_handler+0x58c>)
 8000eb4:	67da      	str	r2, [r3, #124]	; 0x7c
		can_battery.battery_soc = data[4];
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	791a      	ldrb	r2, [r3, #4]
 8000eba:	4b7c      	ldr	r3, [pc, #496]	; (80010ac <bat_can_data_handler+0x58c>)
 8000ebc:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		break;
 8000ec0:	e125      	b.n	800110e <bat_can_data_handler+0x5ee>
		can_battery.mosfet_tmp = data[7]-40;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	3307      	adds	r3, #7
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	3b28      	subs	r3, #40	; 0x28
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	b25a      	sxtb	r2, r3
 8000ece:	4b77      	ldr	r3, [pc, #476]	; (80010ac <bat_can_data_handler+0x58c>)
 8000ed0:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		can_battery.highest_cell_tmp = data[0];
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	b25a      	sxtb	r2, r3
 8000eda:	4b74      	ldr	r3, [pc, #464]	; (80010ac <bat_can_data_handler+0x58c>)
 8000edc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		can_battery.lowest_cell_tmp = data[0];
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	b25a      	sxtb	r2, r3
 8000ee6:	4b71      	ldr	r3, [pc, #452]	; (80010ac <bat_can_data_handler+0x58c>)
 8000ee8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		for(uint8_t i=0;i<can_battery.ntc_num;i++)
 8000eec:	2300      	movs	r3, #0
 8000eee:	733b      	strb	r3, [r7, #12]
 8000ef0:	e026      	b.n	8000f40 <bat_can_data_handler+0x420>
			if(data[i]>can_battery.highest_cell_tmp)
 8000ef2:	7b3b      	ldrb	r3, [r7, #12]
 8000ef4:	683a      	ldr	r2, [r7, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b6b      	ldr	r3, [pc, #428]	; (80010ac <bat_can_data_handler+0x58c>)
 8000efe:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8000f02:	429a      	cmp	r2, r3
 8000f04:	dd07      	ble.n	8000f16 <bat_can_data_handler+0x3f6>
				can_battery.highest_cell_tmp = data[i];
 8000f06:	7b3b      	ldrb	r3, [r7, #12]
 8000f08:	683a      	ldr	r2, [r7, #0]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	b25a      	sxtb	r2, r3
 8000f10:	4b66      	ldr	r3, [pc, #408]	; (80010ac <bat_can_data_handler+0x58c>)
 8000f12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
			if(data[i]<can_battery.lowest_cell_tmp)
 8000f16:	7b3b      	ldrb	r3, [r7, #12]
 8000f18:	683a      	ldr	r2, [r7, #0]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	4b62      	ldr	r3, [pc, #392]	; (80010ac <bat_can_data_handler+0x58c>)
 8000f22:	f993 3081 	ldrsb.w	r3, [r3, #129]	; 0x81
 8000f26:	429a      	cmp	r2, r3
 8000f28:	da07      	bge.n	8000f3a <bat_can_data_handler+0x41a>
				can_battery.lowest_cell_tmp = data[i];
 8000f2a:	7b3b      	ldrb	r3, [r7, #12]
 8000f2c:	683a      	ldr	r2, [r7, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	b25a      	sxtb	r2, r3
 8000f34:	4b5d      	ldr	r3, [pc, #372]	; (80010ac <bat_can_data_handler+0x58c>)
 8000f36:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		for(uint8_t i=0;i<can_battery.ntc_num;i++)
 8000f3a:	7b3b      	ldrb	r3, [r7, #12]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	733b      	strb	r3, [r7, #12]
 8000f40:	4b5a      	ldr	r3, [pc, #360]	; (80010ac <bat_can_data_handler+0x58c>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	7b3a      	ldrb	r2, [r7, #12]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d3d3      	bcc.n	8000ef2 <bat_can_data_handler+0x3d2>
		can_battery.highest_cell_tmp -= 40;
 8000f4a:	4b58      	ldr	r3, [pc, #352]	; (80010ac <bat_can_data_handler+0x58c>)
 8000f4c:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	3b28      	subs	r3, #40	; 0x28
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	b25a      	sxtb	r2, r3
 8000f58:	4b54      	ldr	r3, [pc, #336]	; (80010ac <bat_can_data_handler+0x58c>)
 8000f5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		can_battery.lowest_cell_tmp -= 40;
 8000f5e:	4b53      	ldr	r3, [pc, #332]	; (80010ac <bat_can_data_handler+0x58c>)
 8000f60:	f993 3081 	ldrsb.w	r3, [r3, #129]	; 0x81
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	3b28      	subs	r3, #40	; 0x28
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	b25a      	sxtb	r2, r3
 8000f6c:	4b4f      	ldr	r3, [pc, #316]	; (80010ac <bat_can_data_handler+0x58c>)
 8000f6e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		break;
 8000f72:	e0cc      	b.n	800110e <bat_can_data_handler+0x5ee>
		memcpy(&can_battery.cell_voltage[0], data,8);
 8000f74:	2208      	movs	r2, #8
 8000f76:	6839      	ldr	r1, [r7, #0]
 8000f78:	4850      	ldr	r0, [pc, #320]	; (80010bc <bat_can_data_handler+0x59c>)
 8000f7a:	f004 f8af 	bl	80050dc <memcpy>
		break;
 8000f7e:	e0c6      	b.n	800110e <bat_can_data_handler+0x5ee>
		memcpy(&can_battery.cell_voltage[4], data,8);
 8000f80:	2208      	movs	r2, #8
 8000f82:	6839      	ldr	r1, [r7, #0]
 8000f84:	484e      	ldr	r0, [pc, #312]	; (80010c0 <bat_can_data_handler+0x5a0>)
 8000f86:	f004 f8a9 	bl	80050dc <memcpy>
		break;
 8000f8a:	e0c0      	b.n	800110e <bat_can_data_handler+0x5ee>
		memcpy(&can_battery.cell_voltage[8], data,8);
 8000f8c:	2208      	movs	r2, #8
 8000f8e:	6839      	ldr	r1, [r7, #0]
 8000f90:	484c      	ldr	r0, [pc, #304]	; (80010c4 <bat_can_data_handler+0x5a4>)
 8000f92:	f004 f8a3 	bl	80050dc <memcpy>
		break;
 8000f96:	e0ba      	b.n	800110e <bat_can_data_handler+0x5ee>
		memcpy(&can_battery.cell_voltage[12], data,8);
 8000f98:	2208      	movs	r2, #8
 8000f9a:	6839      	ldr	r1, [r7, #0]
 8000f9c:	484a      	ldr	r0, [pc, #296]	; (80010c8 <bat_can_data_handler+0x5a8>)
 8000f9e:	f004 f89d 	bl	80050dc <memcpy>
		can_battery.max_value.max_cell_voltage = can_battery.cell_voltage[0];
 8000fa2:	4b42      	ldr	r3, [pc, #264]	; (80010ac <bat_can_data_handler+0x58c>)
 8000fa4:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8000fa6:	4b41      	ldr	r3, [pc, #260]	; (80010ac <bat_can_data_handler+0x58c>)
 8000fa8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		can_battery.max_value.min_cell_voltage = can_battery.cell_voltage[0];
 8000fac:	4b3f      	ldr	r3, [pc, #252]	; (80010ac <bat_can_data_handler+0x58c>)
 8000fae:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8000fb0:	4b3e      	ldr	r3, [pc, #248]	; (80010ac <bat_can_data_handler+0x58c>)
 8000fb2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
		for(uint8_t i=0;i<can_battery.series_num;i++)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	72fb      	strb	r3, [r7, #11]
 8000fba:	e02a      	b.n	8001012 <bat_can_data_handler+0x4f2>
			if(can_battery.cell_voltage[i]>can_battery.max_value.max_cell_voltage)
 8000fbc:	7afb      	ldrb	r3, [r7, #11]
 8000fbe:	4a3b      	ldr	r2, [pc, #236]	; (80010ac <bat_can_data_handler+0x58c>)
 8000fc0:	331c      	adds	r3, #28
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	4413      	add	r3, r2
 8000fc6:	889a      	ldrh	r2, [r3, #4]
 8000fc8:	4b38      	ldr	r3, [pc, #224]	; (80010ac <bat_can_data_handler+0x58c>)
 8000fca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d908      	bls.n	8000fe4 <bat_can_data_handler+0x4c4>
				can_battery.max_value.max_cell_voltage = can_battery.cell_voltage[i];
 8000fd2:	7afb      	ldrb	r3, [r7, #11]
 8000fd4:	4a35      	ldr	r2, [pc, #212]	; (80010ac <bat_can_data_handler+0x58c>)
 8000fd6:	331c      	adds	r3, #28
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	4413      	add	r3, r2
 8000fdc:	889a      	ldrh	r2, [r3, #4]
 8000fde:	4b33      	ldr	r3, [pc, #204]	; (80010ac <bat_can_data_handler+0x58c>)
 8000fe0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
			if(can_battery.cell_voltage[i]<can_battery.max_value.min_cell_voltage)
 8000fe4:	7afb      	ldrb	r3, [r7, #11]
 8000fe6:	4a31      	ldr	r2, [pc, #196]	; (80010ac <bat_can_data_handler+0x58c>)
 8000fe8:	331c      	adds	r3, #28
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	4413      	add	r3, r2
 8000fee:	889a      	ldrh	r2, [r3, #4]
 8000ff0:	4b2e      	ldr	r3, [pc, #184]	; (80010ac <bat_can_data_handler+0x58c>)
 8000ff2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d208      	bcs.n	800100c <bat_can_data_handler+0x4ec>
				can_battery.max_value.min_cell_voltage = can_battery.cell_voltage[i];
 8000ffa:	7afb      	ldrb	r3, [r7, #11]
 8000ffc:	4a2b      	ldr	r2, [pc, #172]	; (80010ac <bat_can_data_handler+0x58c>)
 8000ffe:	331c      	adds	r3, #28
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	4413      	add	r3, r2
 8001004:	889a      	ldrh	r2, [r3, #4]
 8001006:	4b29      	ldr	r3, [pc, #164]	; (80010ac <bat_can_data_handler+0x58c>)
 8001008:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
		for(uint8_t i=0;i<can_battery.series_num;i++)
 800100c:	7afb      	ldrb	r3, [r7, #11]
 800100e:	3301      	adds	r3, #1
 8001010:	72fb      	strb	r3, [r7, #11]
 8001012:	4b26      	ldr	r3, [pc, #152]	; (80010ac <bat_can_data_handler+0x58c>)
 8001014:	785b      	ldrb	r3, [r3, #1]
 8001016:	7afa      	ldrb	r2, [r7, #11]
 8001018:	429a      	cmp	r2, r3
 800101a:	d3cf      	bcc.n	8000fbc <bat_can_data_handler+0x49c>
		break;
 800101c:	e077      	b.n	800110e <bat_can_data_handler+0x5ee>
		can_battery.max_value.max_pack_temperature = data[0]-40;
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	3b28      	subs	r3, #40	; 0x28
 8001024:	b2db      	uxtb	r3, r3
 8001026:	b25a      	sxtb	r2, r3
 8001028:	4b20      	ldr	r3, [pc, #128]	; (80010ac <bat_can_data_handler+0x58c>)
 800102a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		can_battery.max_value.min_pack_temperature = data[1]-40;
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	3301      	adds	r3, #1
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	3b28      	subs	r3, #40	; 0x28
 8001036:	b2db      	uxtb	r3, r3
 8001038:	b25a      	sxtb	r2, r3
 800103a:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <bat_can_data_handler+0x58c>)
 800103c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
		can_battery.mosfet_tmp = data[4]-40;
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	3304      	adds	r3, #4
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	3b28      	subs	r3, #40	; 0x28
 8001048:	b2db      	uxtb	r3, r3
 800104a:	b25a      	sxtb	r2, r3
 800104c:	4b17      	ldr	r3, [pc, #92]	; (80010ac <bat_can_data_handler+0x58c>)
 800104e:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		break;
 8001052:	e05c      	b.n	800110e <bat_can_data_handler+0x5ee>
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	b29a      	uxth	r2, r3
		memcpy(&can_battery.version_info.hw_version,&data[0],2);
 800105a:	4b14      	ldr	r3, [pc, #80]	; (80010ac <bat_can_data_handler+0x58c>)
 800105c:	82da      	strh	r2, [r3, #22]
		memcpy(&can_battery.version_info.fw_version,&data[2],2);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	3302      	adds	r3, #2
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	b29a      	uxth	r2, r3
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <bat_can_data_handler+0x58c>)
 8001068:	829a      	strh	r2, [r3, #20]
		memcpy(can_battery.version_info.fw_index,&data[4],4);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	3304      	adds	r3, #4
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <bat_can_data_handler+0x58c>)
 8001074:	619a      	str	r2, [r3, #24]
		break;
 8001076:	e04a      	b.n	800110e <bat_can_data_handler+0x5ee>
		memcpy(can_battery.error_info.error,&data[0],6);
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <bat_can_data_handler+0x58c>)
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	336c      	adds	r3, #108	; 0x6c
 800107e:	6810      	ldr	r0, [r2, #0]
 8001080:	6018      	str	r0, [r3, #0]
 8001082:	8892      	ldrh	r2, [r2, #4]
 8001084:	809a      	strh	r2, [r3, #4]
		can_battery.status_info.pre_charge_circuit = (data[6]&0x02);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	3306      	adds	r3, #6
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <bat_can_data_handler+0x58c>)
 8001094:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		can_battery.status_info.charge_mosfet = (data[6]&0x02);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	3306      	adds	r3, #6
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	4b01      	ldr	r3, [pc, #4]	; (80010ac <bat_can_data_handler+0x58c>)
 80010a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		break;
 80010aa:	e030      	b.n	800110e <bat_can_data_handler+0x5ee>
 80010ac:	20000770 	.word	0x20000770
 80010b0:	51eb851f 	.word	0x51eb851f
 80010b4:	20000764 	.word	0x20000764
 80010b8:	20000212 	.word	0x20000212
 80010bc:	200007ac 	.word	0x200007ac
 80010c0:	200007b4 	.word	0x200007b4
 80010c4:	200007bc 	.word	0x200007bc
 80010c8:	200007c4 	.word	0x200007c4
		chg_flags.handshake_flag = true;
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <bat_can_data_handler+0x5f8>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	701a      	strb	r2, [r3, #0]
		break;
 80010d2:	e01c      	b.n	800110e <bat_can_data_handler+0x5ee>
		chg_flags.identification_flag = true;
 80010d4:	4b10      	ldr	r3, [pc, #64]	; (8001118 <bat_can_data_handler+0x5f8>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	705a      	strb	r2, [r3, #1]
		break;
 80010da:	e018      	b.n	800110e <bat_can_data_handler+0x5ee>
		chg_flags.bat_chg_parameter = true;
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <bat_can_data_handler+0x5f8>)
 80010de:	2201      	movs	r2, #1
 80010e0:	709a      	strb	r2, [r3, #2]
		break;
 80010e2:	e014      	b.n	800110e <bat_can_data_handler+0x5ee>
		if(data[0] == 0xAA)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2baa      	cmp	r3, #170	; 0xaa
 80010ea:	d10f      	bne.n	800110c <bat_can_data_handler+0x5ec>
			chg_flags.bat_ready_flag = true;
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <bat_can_data_handler+0x5f8>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	70da      	strb	r2, [r3, #3]
		break;
 80010f2:	e00b      	b.n	800110c <bat_can_data_handler+0x5ec>
		chg_flags.chg_demand_flag = true;
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <bat_can_data_handler+0x5f8>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	715a      	strb	r2, [r3, #5]
		break;
 80010fa:	e008      	b.n	800110e <bat_can_data_handler+0x5ee>
		chg_flags.chg_bms_stop_flag = true;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <bat_can_data_handler+0x5f8>)
 80010fe:	2201      	movs	r2, #1
 8001100:	71da      	strb	r2, [r3, #7]
		break;
 8001102:	e004      	b.n	800110e <bat_can_data_handler+0x5ee>
		chg_flags.chg_bms_cnt_flag = true;
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <bat_can_data_handler+0x5f8>)
 8001106:	2201      	movs	r2, #1
 8001108:	721a      	strb	r2, [r3, #8]
		break;
 800110a:	e000      	b.n	800110e <bat_can_data_handler+0x5ee>
		break;
 800110c:	bf00      	nop
}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000764 	.word	0x20000764

0800111c <bat_charge_management>:

void bat_charge_management()
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
	uint8_t tx_data[8];
	memset(tx_data,0,8);
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	2208      	movs	r2, #8
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f003 ffe4 	bl	80050f8 <memset>
	uint32_t errors;
	static uint16_t retry_cnt=0;

	if(TIM2->CNT > 2000)  //2S未接收到超时
 8001130:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001136:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800113a:	d914      	bls.n	8001166 <bat_charge_management+0x4a>
	{
		TIM2->CNT=0;
 800113c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001140:	2200      	movs	r2, #0
 8001142:	625a      	str	r2, [r3, #36]	; 0x24
		chg_fsm = CHG_INIT;  //error
 8001144:	4bb6      	ldr	r3, [pc, #728]	; (8001420 <bat_charge_management+0x304>)
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
		memset(&can_battery,0,sizeof(BatInfoTypeDef));
 800114a:	2288      	movs	r2, #136	; 0x88
 800114c:	2100      	movs	r1, #0
 800114e:	48b5      	ldr	r0, [pc, #724]	; (8001424 <bat_charge_management+0x308>)
 8001150:	f003 ffd2 	bl	80050f8 <memset>
		memset(&chg_flags,0,sizeof(ChargeFlagsTypeDef));
 8001154:	2209      	movs	r2, #9
 8001156:	2100      	movs	r1, #0
 8001158:	48b3      	ldr	r0, [pc, #716]	; (8001428 <bat_charge_management+0x30c>)
 800115a:	f003 ffcd 	bl	80050f8 <memset>
		can_battery.connected_flag = false;
 800115e:	4bb1      	ldr	r3, [pc, #708]	; (8001424 <bat_charge_management+0x308>)
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
	}

	switch(chg_fsm)
 8001166:	4bae      	ldr	r3, [pc, #696]	; (8001420 <bat_charge_management+0x304>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b0e      	cmp	r3, #14
 800116c:	f200 81d3 	bhi.w	8001516 <bat_charge_management+0x3fa>
 8001170:	a201      	add	r2, pc, #4	; (adr r2, 8001178 <bat_charge_management+0x5c>)
 8001172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001176:	bf00      	nop
 8001178:	080011b5 	.word	0x080011b5
 800117c:	08001207 	.word	0x08001207
 8001180:	08001233 	.word	0x08001233
 8001184:	080012bb 	.word	0x080012bb
 8001188:	080012dd 	.word	0x080012dd
 800118c:	08001317 	.word	0x08001317
 8001190:	08001349 	.word	0x08001349
 8001194:	0800138b 	.word	0x0800138b
 8001198:	080013bf 	.word	0x080013bf
 800119c:	080013f9 	.word	0x080013f9
 80011a0:	08001449 	.word	0x08001449
 80011a4:	0800146f 	.word	0x0800146f
 80011a8:	080014cf 	.word	0x080014cf
 80011ac:	08001517 	.word	0x08001517
 80011b0:	080014d7 	.word	0x080014d7
	{
	case CHG_INIT:

		memset(tx_data,0xFF,8);
 80011b4:	f107 0308 	add.w	r3, r7, #8
 80011b8:	2208      	movs	r2, #8
 80011ba:	21ff      	movs	r1, #255	; 0xff
 80011bc:	4618      	mov	r0, r3
 80011be:	f003 ff9b 	bl	80050f8 <memset>
		if(user_can_send_data(CBV, tx_data) == HAL_OK)  //发送CBV轮询电池成功  正常通信或者无电池
 80011c2:	f107 0308 	add.w	r3, r7, #8
 80011c6:	4619      	mov	r1, r3
 80011c8:	4898      	ldr	r0, [pc, #608]	; (800142c <bat_charge_management+0x310>)
 80011ca:	f7ff fb93 	bl	80008f4 <user_can_send_data>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d103      	bne.n	80011dc <bat_charge_management+0xc0>
		{
			 chg_fsm = CHG_CHECK_PAR;
 80011d4:	4b92      	ldr	r3, [pc, #584]	; (8001420 <bat_charge_management+0x304>)
 80011d6:	2202      	movs	r2, #2
 80011d8:	701a      	strb	r2, [r3, #0]
				chg_fsm = CHG_ACTIVE;
			}

		}

		break;
 80011da:	e18d      	b.n	80014f8 <bat_charge_management+0x3dc>
			retry_cnt++;
 80011dc:	4b94      	ldr	r3, [pc, #592]	; (8001430 <bat_charge_management+0x314>)
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	3301      	adds	r3, #1
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	4b92      	ldr	r3, [pc, #584]	; (8001430 <bat_charge_management+0x314>)
 80011e6:	801a      	strh	r2, [r3, #0]
			if(retry_cnt>10)  //2.5S
 80011e8:	4b91      	ldr	r3, [pc, #580]	; (8001430 <bat_charge_management+0x314>)
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	2b0a      	cmp	r3, #10
 80011ee:	f240 8183 	bls.w	80014f8 <bat_charge_management+0x3dc>
				retry_cnt=0;
 80011f2:	4b8f      	ldr	r3, [pc, #572]	; (8001430 <bat_charge_management+0x314>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	801a      	strh	r2, [r3, #0]
				HAL_CAN_MspDeInit(&hcan); //重置CAN总线
 80011f8:	488e      	ldr	r0, [pc, #568]	; (8001434 <bat_charge_management+0x318>)
 80011fa:	f7ff f831 	bl	8000260 <HAL_CAN_MspDeInit>
				chg_fsm = CHG_ACTIVE;
 80011fe:	4b88      	ldr	r3, [pc, #544]	; (8001420 <bat_charge_management+0x304>)
 8001200:	2201      	movs	r2, #1
 8001202:	701a      	strb	r2, [r3, #0]
		break;
 8001204:	e178      	b.n	80014f8 <bat_charge_management+0x3dc>
	case CHG_ACTIVE:
		retry_cnt++;
 8001206:	4b8a      	ldr	r3, [pc, #552]	; (8001430 <bat_charge_management+0x314>)
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	3301      	adds	r3, #1
 800120c:	b29a      	uxth	r2, r3
 800120e:	4b88      	ldr	r3, [pc, #544]	; (8001430 <bat_charge_management+0x314>)
 8001210:	801a      	strh	r2, [r3, #0]
		if(retry_cnt>50) //12.5S
 8001212:	4b87      	ldr	r3, [pc, #540]	; (8001430 <bat_charge_management+0x314>)
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	2b32      	cmp	r3, #50	; 0x32
 8001218:	f240 8170 	bls.w	80014fc <bat_charge_management+0x3e0>
		{
			retry_cnt=0;
 800121c:	4b84      	ldr	r3, [pc, #528]	; (8001430 <bat_charge_management+0x314>)
 800121e:	2200      	movs	r2, #0
 8001220:	801a      	strh	r2, [r3, #0]
			MX_CAN_Init();  //启动CAN总线
 8001222:	f7fe ff93 	bl	800014c <MX_CAN_Init>
		    CAN1_Config();
 8001226:	f7ff fb0d 	bl	8000844 <CAN1_Config>
			chg_fsm = CHG_INIT;
 800122a:	4b7d      	ldr	r3, [pc, #500]	; (8001420 <bat_charge_management+0x304>)
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
		}


		break;
 8001230:	e164      	b.n	80014fc <bat_charge_management+0x3e0>
	case CHG_CHECK_PAR:
		if(can_battery.battery_code[0]>0 && can_battery.battery_soc<100)  //读到编码且未满电  can_battery.battery_soc>=0
 8001232:	4b7c      	ldr	r3, [pc, #496]	; (8001424 <bat_charge_management+0x308>)
 8001234:	7f1b      	ldrb	r3, [r3, #28]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d019      	beq.n	800126e <bat_charge_management+0x152>
 800123a:	4b7a      	ldr	r3, [pc, #488]	; (8001424 <bat_charge_management+0x308>)
 800123c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001240:	2b63      	cmp	r3, #99	; 0x63
 8001242:	d814      	bhi.n	800126e <bat_charge_management+0x152>
		{
			can_battery.connected_flag = true;
 8001244:	4b77      	ldr	r3, [pc, #476]	; (8001424 <bat_charge_management+0x308>)
 8001246:	2201      	movs	r2, #1
 8001248:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 800124c:	4b75      	ldr	r3, [pc, #468]	; (8001424 <bat_charge_management+0x308>)
 800124e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
			memcpy(&errors,can_battery.error_info.error,4);
 8001250:	607b      	str	r3, [r7, #4]
			if(errors>0)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <bat_charge_management+0x144>
			{
				chg_fsm = CHG_INIT;  //error
 8001258:	4b71      	ldr	r3, [pc, #452]	; (8001420 <bat_charge_management+0x304>)
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]
 800125e:	e002      	b.n	8001266 <bat_charge_management+0x14a>
			}
			else
			{

				chg_fsm = CHG_HANDSHAKE;
 8001260:	4b6f      	ldr	r3, [pc, #444]	; (8001420 <bat_charge_management+0x304>)
 8001262:	2203      	movs	r2, #3
 8001264:	701a      	strb	r2, [r3, #0]
			}
			retry_cnt=0;
 8001266:	4b72      	ldr	r3, [pc, #456]	; (8001430 <bat_charge_management+0x314>)
 8001268:	2200      	movs	r2, #0
 800126a:	801a      	strh	r2, [r3, #0]
				chg_fsm = CHG_INIT;
					}
		}
		//memset(tx_data,)

		break;
 800126c:	e148      	b.n	8001500 <bat_charge_management+0x3e4>
		else if(can_battery.battery_soc == 100)  //满电
 800126e:	4b6d      	ldr	r3, [pc, #436]	; (8001424 <bat_charge_management+0x308>)
 8001270:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001274:	2b64      	cmp	r3, #100	; 0x64
 8001276:	d107      	bne.n	8001288 <bat_charge_management+0x16c>
			can_battery.connected_flag = true;
 8001278:	4b6a      	ldr	r3, [pc, #424]	; (8001424 <bat_charge_management+0x308>)
 800127a:	2201      	movs	r2, #1
 800127c:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
			chg_fsm = CHG_FINISH;
 8001280:	4b67      	ldr	r3, [pc, #412]	; (8001420 <bat_charge_management+0x304>)
 8001282:	220e      	movs	r2, #14
 8001284:	701a      	strb	r2, [r3, #0]
		break;
 8001286:	e13b      	b.n	8001500 <bat_charge_management+0x3e4>
			chg_fsm = CHG_INIT;
 8001288:	4b65      	ldr	r3, [pc, #404]	; (8001420 <bat_charge_management+0x304>)
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
			retry_cnt++;
 800128e:	4b68      	ldr	r3, [pc, #416]	; (8001430 <bat_charge_management+0x314>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	3301      	adds	r3, #1
 8001294:	b29a      	uxth	r2, r3
 8001296:	4b66      	ldr	r3, [pc, #408]	; (8001430 <bat_charge_management+0x314>)
 8001298:	801a      	strh	r2, [r3, #0]
			if(retry_cnt>10)  //电池未连接
 800129a:	4b65      	ldr	r3, [pc, #404]	; (8001430 <bat_charge_management+0x314>)
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	2b0a      	cmp	r3, #10
 80012a0:	f240 812e 	bls.w	8001500 <bat_charge_management+0x3e4>
				retry_cnt = 10;
 80012a4:	4b62      	ldr	r3, [pc, #392]	; (8001430 <bat_charge_management+0x314>)
 80012a6:	220a      	movs	r2, #10
 80012a8:	801a      	strh	r2, [r3, #0]
				can_battery.connected_flag = false;
 80012aa:	4b5e      	ldr	r3, [pc, #376]	; (8001424 <bat_charge_management+0x308>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
				chg_fsm = CHG_INIT;
 80012b2:	4b5b      	ldr	r3, [pc, #364]	; (8001420 <bat_charge_management+0x304>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
		break;
 80012b8:	e122      	b.n	8001500 <bat_charge_management+0x3e4>
	case CHG_HANDSHAKE:
		memset(tx_data,0,8);
 80012ba:	f107 0308 	add.w	r3, r7, #8
 80012be:	2208      	movs	r2, #8
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f003 ff18 	bl	80050f8 <memset>
		user_can_send_data(CHM, tx_data);
 80012c8:	f107 0308 	add.w	r3, r7, #8
 80012cc:	4619      	mov	r1, r3
 80012ce:	485a      	ldr	r0, [pc, #360]	; (8001438 <bat_charge_management+0x31c>)
 80012d0:	f7ff fb10 	bl	80008f4 <user_can_send_data>
		chg_fsm = CHG_WAIT_HANDSHAKE;
 80012d4:	4b52      	ldr	r3, [pc, #328]	; (8001420 <bat_charge_management+0x304>)
 80012d6:	2204      	movs	r2, #4
 80012d8:	701a      	strb	r2, [r3, #0]
		break;
 80012da:	e11c      	b.n	8001516 <bat_charge_management+0x3fa>
	case CHG_WAIT_HANDSHAKE:
		if(chg_flags.handshake_flag)
 80012dc:	4b52      	ldr	r3, [pc, #328]	; (8001428 <bat_charge_management+0x30c>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <bat_charge_management+0x1d0>
		{
			chg_fsm = CHG_IDENTIFICATION;
 80012e4:	4b4e      	ldr	r3, [pc, #312]	; (8001420 <bat_charge_management+0x304>)
 80012e6:	2205      	movs	r2, #5
 80012e8:	701a      	strb	r2, [r3, #0]
				retry_cnt = 0;
				chg_fsm = CHG_INIT;
			}
		}

		break;
 80012ea:	e10b      	b.n	8001504 <bat_charge_management+0x3e8>
			chg_fsm  = CHG_HANDSHAKE;
 80012ec:	4b4c      	ldr	r3, [pc, #304]	; (8001420 <bat_charge_management+0x304>)
 80012ee:	2203      	movs	r2, #3
 80012f0:	701a      	strb	r2, [r3, #0]
			retry_cnt++;
 80012f2:	4b4f      	ldr	r3, [pc, #316]	; (8001430 <bat_charge_management+0x314>)
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	3301      	adds	r3, #1
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	4b4d      	ldr	r3, [pc, #308]	; (8001430 <bat_charge_management+0x314>)
 80012fc:	801a      	strh	r2, [r3, #0]
			if(retry_cnt>50)
 80012fe:	4b4c      	ldr	r3, [pc, #304]	; (8001430 <bat_charge_management+0x314>)
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	2b32      	cmp	r3, #50	; 0x32
 8001304:	f240 80fe 	bls.w	8001504 <bat_charge_management+0x3e8>
				retry_cnt = 0;
 8001308:	4b49      	ldr	r3, [pc, #292]	; (8001430 <bat_charge_management+0x314>)
 800130a:	2200      	movs	r2, #0
 800130c:	801a      	strh	r2, [r3, #0]
				chg_fsm = CHG_INIT;
 800130e:	4b44      	ldr	r3, [pc, #272]	; (8001420 <bat_charge_management+0x304>)
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
		break;
 8001314:	e0f6      	b.n	8001504 <bat_charge_management+0x3e8>
	case CHG_IDENTIFICATION:
		memset(tx_data,0xFF,8);
 8001316:	f107 0308 	add.w	r3, r7, #8
 800131a:	2208      	movs	r2, #8
 800131c:	21ff      	movs	r1, #255	; 0xff
 800131e:	4618      	mov	r0, r3
 8001320:	f003 feea 	bl	80050f8 <memset>
		//tx_data[0] =0;
		//user_can_send_data(CRM, tx_data);
		//HAL_Delay(250);
		tx_data[0] =0xAA;
 8001324:	23aa      	movs	r3, #170	; 0xaa
 8001326:	723b      	strb	r3, [r7, #8]
		user_can_send_data(CRM, tx_data);
 8001328:	f107 0308 	add.w	r3, r7, #8
 800132c:	4619      	mov	r1, r3
 800132e:	4843      	ldr	r0, [pc, #268]	; (800143c <bat_charge_management+0x320>)
 8001330:	f7ff fae0 	bl	80008f4 <user_can_send_data>
		user_can_send_data(CRM, tx_data);
 8001334:	f107 0308 	add.w	r3, r7, #8
 8001338:	4619      	mov	r1, r3
 800133a:	4840      	ldr	r0, [pc, #256]	; (800143c <bat_charge_management+0x320>)
 800133c:	f7ff fada 	bl	80008f4 <user_can_send_data>

		chg_fsm = CHG_WAIT_IDENTIFICATION;
 8001340:	4b37      	ldr	r3, [pc, #220]	; (8001420 <bat_charge_management+0x304>)
 8001342:	2206      	movs	r2, #6
 8001344:	701a      	strb	r2, [r3, #0]
		break;
 8001346:	e0e6      	b.n	8001516 <bat_charge_management+0x3fa>
	case CHG_WAIT_IDENTIFICATION:
		if(chg_flags.identification_flag && chg_flags.bat_chg_parameter)
 8001348:	4b37      	ldr	r3, [pc, #220]	; (8001428 <bat_charge_management+0x30c>)
 800134a:	785b      	ldrb	r3, [r3, #1]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d007      	beq.n	8001360 <bat_charge_management+0x244>
 8001350:	4b35      	ldr	r3, [pc, #212]	; (8001428 <bat_charge_management+0x30c>)
 8001352:	789b      	ldrb	r3, [r3, #2]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d003      	beq.n	8001360 <bat_charge_management+0x244>
		{
			chg_fsm = CHG_MAX_OUTPUT;
 8001358:	4b31      	ldr	r3, [pc, #196]	; (8001420 <bat_charge_management+0x304>)
 800135a:	2207      	movs	r2, #7
 800135c:	701a      	strb	r2, [r3, #0]
			{
				retry_cnt = 0;
				chg_fsm = CHG_INIT;
			}
		}
		break;
 800135e:	e0d3      	b.n	8001508 <bat_charge_management+0x3ec>
			chg_fsm = CHG_IDENTIFICATION;
 8001360:	4b2f      	ldr	r3, [pc, #188]	; (8001420 <bat_charge_management+0x304>)
 8001362:	2205      	movs	r2, #5
 8001364:	701a      	strb	r2, [r3, #0]
			retry_cnt++;
 8001366:	4b32      	ldr	r3, [pc, #200]	; (8001430 <bat_charge_management+0x314>)
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	3301      	adds	r3, #1
 800136c:	b29a      	uxth	r2, r3
 800136e:	4b30      	ldr	r3, [pc, #192]	; (8001430 <bat_charge_management+0x314>)
 8001370:	801a      	strh	r2, [r3, #0]
			if(retry_cnt>10)
 8001372:	4b2f      	ldr	r3, [pc, #188]	; (8001430 <bat_charge_management+0x314>)
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	2b0a      	cmp	r3, #10
 8001378:	f240 80c6 	bls.w	8001508 <bat_charge_management+0x3ec>
				retry_cnt = 0;
 800137c:	4b2c      	ldr	r3, [pc, #176]	; (8001430 <bat_charge_management+0x314>)
 800137e:	2200      	movs	r2, #0
 8001380:	801a      	strh	r2, [r3, #0]
				chg_fsm = CHG_INIT;
 8001382:	4b27      	ldr	r3, [pc, #156]	; (8001420 <bat_charge_management+0x304>)
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
		break;
 8001388:	e0be      	b.n	8001508 <bat_charge_management+0x3ec>
	case CHG_MAX_OUTPUT:
		tx_data[0] = 0x70;tx_data[1] = 0x17;
 800138a:	2370      	movs	r3, #112	; 0x70
 800138c:	723b      	strb	r3, [r7, #8]
 800138e:	2317      	movs	r3, #23
 8001390:	727b      	strb	r3, [r7, #9]
		tx_data[2] = 0xC0;tx_data[3] = 0x12;
 8001392:	23c0      	movs	r3, #192	; 0xc0
 8001394:	72bb      	strb	r3, [r7, #10]
 8001396:	2312      	movs	r3, #18
 8001398:	72fb      	strb	r3, [r7, #11]
		tx_data[4] = 0x08;tx_data[5] = 0x3E;
 800139a:	2308      	movs	r3, #8
 800139c:	733b      	strb	r3, [r7, #12]
 800139e:	233e      	movs	r3, #62	; 0x3e
 80013a0:	737b      	strb	r3, [r7, #13]
		tx_data[6] = 0x0;tx_data[7] = 0x0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	73bb      	strb	r3, [r7, #14]
 80013a6:	2300      	movs	r3, #0
 80013a8:	73fb      	strb	r3, [r7, #15]
		//memset(tx_data,0x00,8);
		user_can_send_data(CML, tx_data);
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	4619      	mov	r1, r3
 80013b0:	4823      	ldr	r0, [pc, #140]	; (8001440 <bat_charge_management+0x324>)
 80013b2:	f7ff fa9f 	bl	80008f4 <user_can_send_data>
		chg_fsm = CHG_WAIT_MAX_OUTPUT;
 80013b6:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <bat_charge_management+0x304>)
 80013b8:	2208      	movs	r2, #8
 80013ba:	701a      	strb	r2, [r3, #0]
		break;
 80013bc:	e0ab      	b.n	8001516 <bat_charge_management+0x3fa>
	case CHG_WAIT_MAX_OUTPUT:
		if(chg_flags.bat_ready_flag)
 80013be:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <bat_charge_management+0x30c>)
 80013c0:	78db      	ldrb	r3, [r3, #3]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <bat_charge_management+0x2b2>
			//if(1)
		{
			chg_fsm = CHG_READY;
 80013c6:	4b16      	ldr	r3, [pc, #88]	; (8001420 <bat_charge_management+0x304>)
 80013c8:	2209      	movs	r2, #9
 80013ca:	701a      	strb	r2, [r3, #0]
			{
				retry_cnt = 0;
				chg_fsm = CHG_INIT;
			}
		}
		break;
 80013cc:	e09e      	b.n	800150c <bat_charge_management+0x3f0>
			chg_fsm = CHG_MAX_OUTPUT;
 80013ce:	4b14      	ldr	r3, [pc, #80]	; (8001420 <bat_charge_management+0x304>)
 80013d0:	2207      	movs	r2, #7
 80013d2:	701a      	strb	r2, [r3, #0]
			retry_cnt++;
 80013d4:	4b16      	ldr	r3, [pc, #88]	; (8001430 <bat_charge_management+0x314>)
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	3301      	adds	r3, #1
 80013da:	b29a      	uxth	r2, r3
 80013dc:	4b14      	ldr	r3, [pc, #80]	; (8001430 <bat_charge_management+0x314>)
 80013de:	801a      	strh	r2, [r3, #0]
			if(retry_cnt>10)
 80013e0:	4b13      	ldr	r3, [pc, #76]	; (8001430 <bat_charge_management+0x314>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	2b0a      	cmp	r3, #10
 80013e6:	f240 8091 	bls.w	800150c <bat_charge_management+0x3f0>
				retry_cnt = 0;
 80013ea:	4b11      	ldr	r3, [pc, #68]	; (8001430 <bat_charge_management+0x314>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	801a      	strh	r2, [r3, #0]
				chg_fsm = CHG_INIT;
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <bat_charge_management+0x304>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	701a      	strb	r2, [r3, #0]
		break;
 80013f6:	e089      	b.n	800150c <bat_charge_management+0x3f0>
	case CHG_READY:
		//if(chg_flags.cabibet_ready_flag)
		if(1)
		{
			memset(tx_data,0xFF,8);
 80013f8:	f107 0308 	add.w	r3, r7, #8
 80013fc:	2208      	movs	r2, #8
 80013fe:	21ff      	movs	r1, #255	; 0xff
 8001400:	4618      	mov	r0, r3
 8001402:	f003 fe79 	bl	80050f8 <memset>
			tx_data[0] = 0xAA;
 8001406:	23aa      	movs	r3, #170	; 0xaa
 8001408:	723b      	strb	r3, [r7, #8]
			user_can_send_data(CRO, tx_data);
 800140a:	f107 0308 	add.w	r3, r7, #8
 800140e:	4619      	mov	r1, r3
 8001410:	480c      	ldr	r0, [pc, #48]	; (8001444 <bat_charge_management+0x328>)
 8001412:	f7ff fa6f 	bl	80008f4 <user_can_send_data>
			chg_fsm = CHG_WAIT_READY;
 8001416:	4b02      	ldr	r3, [pc, #8]	; (8001420 <bat_charge_management+0x304>)
 8001418:	220a      	movs	r2, #10
 800141a:	701a      	strb	r2, [r3, #0]
			{
				retry_cnt = 0;
				chg_fsm = CHG_INIT;
			}
		}
		break;
 800141c:	e07b      	b.n	8001516 <bat_charge_management+0x3fa>
 800141e:	bf00      	nop
 8001420:	20000211 	.word	0x20000211
 8001424:	20000770 	.word	0x20000770
 8001428:	20000764 	.word	0x20000764
 800142c:	18fc0908 	.word	0x18fc0908
 8001430:	20000214 	.word	0x20000214
 8001434:	20000218 	.word	0x20000218
 8001438:	18310908 	.word	0x18310908
 800143c:	18330908 	.word	0x18330908
 8001440:	18360908 	.word	0x18360908
 8001444:	10380908 	.word	0x10380908
	case CHG_WAIT_READY:
		if(chg_flags.chg_demand_flag && chg_flags.chg_status_flag)
 8001448:	4b35      	ldr	r3, [pc, #212]	; (8001520 <bat_charge_management+0x404>)
 800144a:	795b      	ldrb	r3, [r3, #5]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d006      	beq.n	800145e <bat_charge_management+0x342>
 8001450:	4b33      	ldr	r3, [pc, #204]	; (8001520 <bat_charge_management+0x404>)
 8001452:	799b      	ldrb	r3, [r3, #6]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d002      	beq.n	800145e <bat_charge_management+0x342>
		{
			chg_fsm = CHG_ING;
 8001458:	4b32      	ldr	r3, [pc, #200]	; (8001524 <bat_charge_management+0x408>)
 800145a:	220b      	movs	r2, #11
 800145c:	701a      	strb	r2, [r3, #0]
		}
		if(chg_flags.chg_bms_stop_flag)
 800145e:	4b30      	ldr	r3, [pc, #192]	; (8001520 <bat_charge_management+0x404>)
 8001460:	79db      	ldrb	r3, [r3, #7]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d054      	beq.n	8001510 <bat_charge_management+0x3f4>
		{
			chg_fsm = CHG_INIT;
 8001466:	4b2f      	ldr	r3, [pc, #188]	; (8001524 <bat_charge_management+0x408>)
 8001468:	2200      	movs	r2, #0
 800146a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800146c:	e050      	b.n	8001510 <bat_charge_management+0x3f4>
	case CHG_ING:
		//    	tx_data[0] = 0x38;tx_data[1] = 0x15;
		//    	tx_data[2] = 0xE8;tx_data[3] = 0x03;
		memset(tx_data,0,8);
 800146e:	f107 0308 	add.w	r3, r7, #8
 8001472:	2208      	movs	r2, #8
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f003 fe3e 	bl	80050f8 <memset>
		user_can_send_data(CCS, tx_data);
 800147c:	f107 0308 	add.w	r3, r7, #8
 8001480:	4619      	mov	r1, r3
 8001482:	4829      	ldr	r0, [pc, #164]	; (8001528 <bat_charge_management+0x40c>)
 8001484:	f7ff fa36 	bl	80008f4 <user_can_send_data>
		user_can_send_data(CCS, tx_data);
 8001488:	f107 0308 	add.w	r3, r7, #8
 800148c:	4619      	mov	r1, r3
 800148e:	4826      	ldr	r0, [pc, #152]	; (8001528 <bat_charge_management+0x40c>)
 8001490:	f7ff fa30 	bl	80008f4 <user_can_send_data>
		user_can_send_data(CBV, tx_data);
 8001494:	f107 0308 	add.w	r3, r7, #8
 8001498:	4619      	mov	r1, r3
 800149a:	4824      	ldr	r0, [pc, #144]	; (800152c <bat_charge_management+0x410>)
 800149c:	f7ff fa2a 	bl	80008f4 <user_can_send_data>
		user_can_send_data(CCS, tx_data);
 80014a0:	f107 0308 	add.w	r3, r7, #8
 80014a4:	4619      	mov	r1, r3
 80014a6:	4820      	ldr	r0, [pc, #128]	; (8001528 <bat_charge_management+0x40c>)
 80014a8:	f7ff fa24 	bl	80008f4 <user_can_send_data>
		//user_can_send_data(CCS, tx_data);
		//user_can_send_data(CCS, tx_data);
	//	user_can_send_data(CBV, tx_data);
		user_can_send_data(CBV, tx_data);
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	4619      	mov	r1, r3
 80014b2:	481e      	ldr	r0, [pc, #120]	; (800152c <bat_charge_management+0x410>)
 80014b4:	f7ff fa1e 	bl	80008f4 <user_can_send_data>
		chg_fsm = CHG_WAIT_READY;
 80014b8:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <bat_charge_management+0x408>)
 80014ba:	220a      	movs	r2, #10
 80014bc:	701a      	strb	r2, [r3, #0]
		if(chg_flags.chg_bms_stop_flag)
 80014be:	4b18      	ldr	r3, [pc, #96]	; (8001520 <bat_charge_management+0x404>)
 80014c0:	79db      	ldrb	r3, [r3, #7]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d026      	beq.n	8001514 <bat_charge_management+0x3f8>
		{
			chg_fsm = CHG_STOP;
 80014c6:	4b17      	ldr	r3, [pc, #92]	; (8001524 <bat_charge_management+0x408>)
 80014c8:	220c      	movs	r2, #12
 80014ca:	701a      	strb	r2, [r3, #0]
		}
		break;
 80014cc:	e022      	b.n	8001514 <bat_charge_management+0x3f8>
	case CHG_STOP:
		chg_fsm = CHG_FINISH;
 80014ce:	4b15      	ldr	r3, [pc, #84]	; (8001524 <bat_charge_management+0x408>)
 80014d0:	220e      	movs	r2, #14
 80014d2:	701a      	strb	r2, [r3, #0]

		break;
 80014d4:	e01f      	b.n	8001516 <bat_charge_management+0x3fa>
	case CHG_FINISH:
		memset(tx_data,0xFF,8);
 80014d6:	f107 0308 	add.w	r3, r7, #8
 80014da:	2208      	movs	r2, #8
 80014dc:	21ff      	movs	r1, #255	; 0xff
 80014de:	4618      	mov	r0, r3
 80014e0:	f003 fe0a 	bl	80050f8 <memset>
		user_can_send_data(CBV, tx_data);
 80014e4:	f107 0308 	add.w	r3, r7, #8
 80014e8:	4619      	mov	r1, r3
 80014ea:	4810      	ldr	r0, [pc, #64]	; (800152c <bat_charge_management+0x410>)
 80014ec:	f7ff fa02 	bl	80008f4 <user_can_send_data>
		chg_fsm = CHG_CHECK_PAR;
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <bat_charge_management+0x408>)
 80014f2:	2202      	movs	r2, #2
 80014f4:	701a      	strb	r2, [r3, #0]
		break;
 80014f6:	e00e      	b.n	8001516 <bat_charge_management+0x3fa>
		break;
 80014f8:	bf00      	nop
 80014fa:	e00c      	b.n	8001516 <bat_charge_management+0x3fa>
		break;
 80014fc:	bf00      	nop
 80014fe:	e00a      	b.n	8001516 <bat_charge_management+0x3fa>
		break;
 8001500:	bf00      	nop
 8001502:	e008      	b.n	8001516 <bat_charge_management+0x3fa>
		break;
 8001504:	bf00      	nop
 8001506:	e006      	b.n	8001516 <bat_charge_management+0x3fa>
		break;
 8001508:	bf00      	nop
 800150a:	e004      	b.n	8001516 <bat_charge_management+0x3fa>
		break;
 800150c:	bf00      	nop
 800150e:	e002      	b.n	8001516 <bat_charge_management+0x3fa>
		break;
 8001510:	bf00      	nop
 8001512:	e000      	b.n	8001516 <bat_charge_management+0x3fa>
		break;
 8001514:	bf00      	nop
	//	{
	//
	//	}


}
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000764 	.word	0x20000764
 8001524:	20000211 	.word	0x20000211
 8001528:	183b0908 	.word	0x183b0908
 800152c:	18fc0908 	.word	0x18fc0908

08001530 <check_sum_head>:

	return 0;
}

int8_t check_sum_head(uint8_t  *data , uint8_t lenth)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	70fb      	strb	r3, [r7, #3]
	uint16_t sum=0;
 800153c:	2300      	movs	r3, #0
 800153e:	81fb      	strh	r3, [r7, #14]
	if(data[0] != 0x46 || data[1] != 0x16 )
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b46      	cmp	r3, #70	; 0x46
 8001546:	d104      	bne.n	8001552 <check_sum_head+0x22>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3301      	adds	r3, #1
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b16      	cmp	r3, #22
 8001550:	d001      	beq.n	8001556 <check_sum_head+0x26>
	{
		return 0;
 8001552:	2300      	movs	r3, #0
 8001554:	e01e      	b.n	8001594 <check_sum_head+0x64>
	}
	for(uint8_t  i=0;i<lenth-1;i++)
 8001556:	2300      	movs	r3, #0
 8001558:	737b      	strb	r3, [r7, #13]
 800155a:	e00a      	b.n	8001572 <check_sum_head+0x42>
	{
		sum+=data[i];
 800155c:	7b7b      	ldrb	r3, [r7, #13]
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	b29a      	uxth	r2, r3
 8001566:	89fb      	ldrh	r3, [r7, #14]
 8001568:	4413      	add	r3, r2
 800156a:	81fb      	strh	r3, [r7, #14]
	for(uint8_t  i=0;i<lenth-1;i++)
 800156c:	7b7b      	ldrb	r3, [r7, #13]
 800156e:	3301      	adds	r3, #1
 8001570:	737b      	strb	r3, [r7, #13]
 8001572:	7b7a      	ldrb	r2, [r7, #13]
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	3b01      	subs	r3, #1
 8001578:	429a      	cmp	r2, r3
 800157a:	dbef      	blt.n	800155c <check_sum_head+0x2c>

	}
	if((uint8_t)sum == data[lenth-1])
 800157c:	89fb      	ldrh	r3, [r7, #14]
 800157e:	b2da      	uxtb	r2, r3
 8001580:	78fb      	ldrb	r3, [r7, #3]
 8001582:	3b01      	subs	r3, #1
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	440b      	add	r3, r1
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	429a      	cmp	r2, r3
 800158c:	d101      	bne.n	8001592 <check_sum_head+0x62>
	{
		return 1;
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <check_sum_head+0x64>
	}

	return 0;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr
	...

080015a0 <signal_wire_read_handler>:
	return (uint8_t)sum;
}


void signal_wire_read_handler()
{
 80015a0:	b5b0      	push	{r4, r5, r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
	uint8_t *P;
	uint16_t lenth;
	int32_t temp_value;
	if(signal_wire_huart_module.rec_flag)
 80015a6:	4bbc      	ldr	r3, [pc, #752]	; (8001898 <signal_wire_read_handler+0x2f8>)
 80015a8:	7a1b      	ldrb	r3, [r3, #8]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f000 8170 	beq.w	8001890 <signal_wire_read_handler+0x2f0>
	{
		uart_module_stop_receive(&signal_wire_huart_module);
 80015b0:	48b9      	ldr	r0, [pc, #740]	; (8001898 <signal_wire_read_handler+0x2f8>)
 80015b2:	f7ff fa93 	bl	8000adc <uart_module_stop_receive>
		signal_wire_huart_module.rec_flag = 0;
 80015b6:	4bb8      	ldr	r3, [pc, #736]	; (8001898 <signal_wire_read_handler+0x2f8>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	721a      	strb	r2, [r3, #8]
		//process
		P = signal_wire_huart_module.uart_module_receive_buffer;
 80015bc:	4bb7      	ldr	r3, [pc, #732]	; (800189c <signal_wire_read_handler+0x2fc>)
 80015be:	60fb      	str	r3, [r7, #12]
		lenth = signal_wire_huart_module.rec_lenth;
 80015c0:	4bb5      	ldr	r3, [pc, #724]	; (8001898 <signal_wire_read_handler+0x2f8>)
 80015c2:	895b      	ldrh	r3, [r3, #10]
 80015c4:	817b      	strh	r3, [r7, #10]

		if(can_battery.connected_flag)
 80015c6:	4bb6      	ldr	r3, [pc, #728]	; (80018a0 <signal_wire_read_handler+0x300>)
 80015c8:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 8156 	beq.w	800187e <signal_wire_read_handler+0x2de>
		{
			if(check_sum_head(P, lenth))  //
 80015d2:	897b      	ldrh	r3, [r7, #10]
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	4619      	mov	r1, r3
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f7ff ffa9 	bl	8001530 <check_sum_head>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f000 814c 	beq.w	800187e <signal_wire_read_handler+0x2de>
			{
				//uart_module_send_hex(P, lenth);
				if(P[2] == 0x01)  //读取指令
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	3302      	adds	r3, #2
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	f040 8135 	bne.w	800185c <signal_wire_read_handler+0x2bc>
				{
					switch(P[3])
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	3303      	adds	r3, #3
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b26      	cmp	r3, #38	; 0x26
 80015fa:	dc57      	bgt.n	80016ac <signal_wire_read_handler+0x10c>
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f2c0 813e 	blt.w	800187e <signal_wire_read_handler+0x2de>
 8001602:	2b26      	cmp	r3, #38	; 0x26
 8001604:	f200 813b 	bhi.w	800187e <signal_wire_read_handler+0x2de>
 8001608:	a201      	add	r2, pc, #4	; (adr r2, 8001610 <signal_wire_read_handler+0x70>)
 800160a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800160e:	bf00      	nop
 8001610:	080016b3 	.word	0x080016b3
 8001614:	0800187f 	.word	0x0800187f
 8001618:	0800187f 	.word	0x0800187f
 800161c:	0800187f 	.word	0x0800187f
 8001620:	0800187f 	.word	0x0800187f
 8001624:	0800187f 	.word	0x0800187f
 8001628:	0800187f 	.word	0x0800187f
 800162c:	0800187f 	.word	0x0800187f
 8001630:	0800187f 	.word	0x0800187f
 8001634:	0800187f 	.word	0x0800187f
 8001638:	0800187f 	.word	0x0800187f
 800163c:	0800187f 	.word	0x0800187f
 8001640:	0800187f 	.word	0x0800187f
 8001644:	0800187f 	.word	0x0800187f
 8001648:	0800187f 	.word	0x0800187f
 800164c:	080016bd 	.word	0x080016bd
 8001650:	0800187f 	.word	0x0800187f
 8001654:	0800187f 	.word	0x0800187f
 8001658:	0800187f 	.word	0x0800187f
 800165c:	0800187f 	.word	0x0800187f
 8001660:	0800187f 	.word	0x0800187f
 8001664:	0800187f 	.word	0x0800187f
 8001668:	0800187f 	.word	0x0800187f
 800166c:	0800187f 	.word	0x0800187f
 8001670:	080016eb 	.word	0x080016eb
 8001674:	0800187f 	.word	0x0800187f
 8001678:	0800187f 	.word	0x0800187f
 800167c:	0800187f 	.word	0x0800187f
 8001680:	0800187f 	.word	0x0800187f
 8001684:	0800187f 	.word	0x0800187f
 8001688:	0800187f 	.word	0x0800187f
 800168c:	0800187f 	.word	0x0800187f
 8001690:	0800187f 	.word	0x0800187f
 8001694:	0800187f 	.word	0x0800187f
 8001698:	0800187f 	.word	0x0800187f
 800169c:	08001723 	.word	0x08001723
 80016a0:	0800175d 	.word	0x0800175d
 80016a4:	0800187f 	.word	0x0800187f
 80016a8:	08001783 	.word	0x08001783
 80016ac:	2ba0      	cmp	r3, #160	; 0xa0
 80016ae:	d07f      	beq.n	80017b0 <signal_wire_read_handler+0x210>
 80016b0:	e0e5      	b.n	800187e <signal_wire_read_handler+0x2de>
					{
					case 0x00:  //综合信息
						uart_module_send_hex(cmd_00, sizeof(cmd_00));
 80016b2:	210a      	movs	r1, #10
 80016b4:	487b      	ldr	r0, [pc, #492]	; (80018a4 <signal_wire_read_handler+0x304>)
 80016b6:	f7ff f9f5 	bl	8000aa4 <uart_module_send_hex>
						break;
 80016ba:	e0e0      	b.n	800187e <signal_wire_read_handler+0x2de>
 80016bc:	4b78      	ldr	r3, [pc, #480]	; (80018a0 <signal_wire_read_handler+0x300>)
 80016be:	685b      	ldr	r3, [r3, #4]
					case 0x0F:
						memcpy(&cmd_0F[5],&can_battery.current_capacity,4);
 80016c0:	4a79      	ldr	r2, [pc, #484]	; (80018a8 <signal_wire_read_handler+0x308>)
 80016c2:	f8c2 3005 	str.w	r3, [r2, #5]
 80016c6:	4b76      	ldr	r3, [pc, #472]	; (80018a0 <signal_wire_read_handler+0x300>)
 80016c8:	689b      	ldr	r3, [r3, #8]
						memcpy(&cmd_0F[9],&can_battery.full_capacity,4);
 80016ca:	4a77      	ldr	r2, [pc, #476]	; (80018a8 <signal_wire_read_handler+0x308>)
 80016cc:	f8c2 3009 	str.w	r3, [r2, #9]
						cmd_0F[13] = getCheckSum(cmd_0F, 13);
 80016d0:	210d      	movs	r1, #13
 80016d2:	4875      	ldr	r0, [pc, #468]	; (80018a8 <signal_wire_read_handler+0x308>)
 80016d4:	f7ff f938 	bl	8000948 <getCheckSum>
 80016d8:	4603      	mov	r3, r0
 80016da:	461a      	mov	r2, r3
 80016dc:	4b72      	ldr	r3, [pc, #456]	; (80018a8 <signal_wire_read_handler+0x308>)
 80016de:	735a      	strb	r2, [r3, #13]
						uart_module_send_hex(cmd_0F, sizeof(cmd_0F));
 80016e0:	210e      	movs	r1, #14
 80016e2:	4871      	ldr	r0, [pc, #452]	; (80018a8 <signal_wire_read_handler+0x308>)
 80016e4:	f7ff f9de 	bl	8000aa4 <uart_module_send_hex>
						break;
 80016e8:	e0c9      	b.n	800187e <signal_wire_read_handler+0x2de>
 80016ea:	4b6d      	ldr	r3, [pc, #436]	; (80018a0 <signal_wire_read_handler+0x300>)
 80016ec:	68db      	ldr	r3, [r3, #12]
					case 0x18:  //设计容量 设计电压 版本
						memcpy(&cmd_18[5],&can_battery.design_capacity,4);
 80016ee:	4a6f      	ldr	r2, [pc, #444]	; (80018ac <signal_wire_read_handler+0x30c>)
 80016f0:	f8c2 3005 	str.w	r3, [r2, #5]
 80016f4:	4b6a      	ldr	r3, [pc, #424]	; (80018a0 <signal_wire_read_handler+0x300>)
 80016f6:	691b      	ldr	r3, [r3, #16]
						memcpy(&cmd_18[9],&can_battery.design_voltage,4);
 80016f8:	4a6c      	ldr	r2, [pc, #432]	; (80018ac <signal_wire_read_handler+0x30c>)
 80016fa:	f8c2 3009 	str.w	r3, [r2, #9]
						memcpy(&cmd_18[13],&can_battery.version_info,8);
 80016fe:	2208      	movs	r2, #8
 8001700:	496b      	ldr	r1, [pc, #428]	; (80018b0 <signal_wire_read_handler+0x310>)
 8001702:	486c      	ldr	r0, [pc, #432]	; (80018b4 <signal_wire_read_handler+0x314>)
 8001704:	f003 fcea 	bl	80050dc <memcpy>
						cmd_18[21] = getCheckSum(cmd_18, 21);
 8001708:	2115      	movs	r1, #21
 800170a:	4868      	ldr	r0, [pc, #416]	; (80018ac <signal_wire_read_handler+0x30c>)
 800170c:	f7ff f91c 	bl	8000948 <getCheckSum>
 8001710:	4603      	mov	r3, r0
 8001712:	461a      	mov	r2, r3
 8001714:	4b65      	ldr	r3, [pc, #404]	; (80018ac <signal_wire_read_handler+0x30c>)
 8001716:	755a      	strb	r2, [r3, #21]
						uart_module_send_hex(cmd_18, sizeof(cmd_18));
 8001718:	2116      	movs	r1, #22
 800171a:	4864      	ldr	r0, [pc, #400]	; (80018ac <signal_wire_read_handler+0x30c>)
 800171c:	f7ff f9c2 	bl	8000aa4 <uart_module_send_hex>
						break;
 8001720:	e0ad      	b.n	800187e <signal_wire_read_handler+0x2de>
					case 0x23:  //电池编码
						memcpy(&cmd_23[5],can_battery.battery_code,32);
 8001722:	4a65      	ldr	r2, [pc, #404]	; (80018b8 <signal_wire_read_handler+0x318>)
 8001724:	4b5e      	ldr	r3, [pc, #376]	; (80018a0 <signal_wire_read_handler+0x300>)
 8001726:	1d54      	adds	r4, r2, #5
 8001728:	f103 051c 	add.w	r5, r3, #28
 800172c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800172e:	6020      	str	r0, [r4, #0]
 8001730:	6061      	str	r1, [r4, #4]
 8001732:	60a2      	str	r2, [r4, #8]
 8001734:	60e3      	str	r3, [r4, #12]
 8001736:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001738:	6120      	str	r0, [r4, #16]
 800173a:	6161      	str	r1, [r4, #20]
 800173c:	61a2      	str	r2, [r4, #24]
 800173e:	61e3      	str	r3, [r4, #28]
						cmd_23[37] = getCheckSum(cmd_23, 37);
 8001740:	2125      	movs	r1, #37	; 0x25
 8001742:	485d      	ldr	r0, [pc, #372]	; (80018b8 <signal_wire_read_handler+0x318>)
 8001744:	f7ff f900 	bl	8000948 <getCheckSum>
 8001748:	4603      	mov	r3, r0
 800174a:	461a      	mov	r2, r3
 800174c:	4b5a      	ldr	r3, [pc, #360]	; (80018b8 <signal_wire_read_handler+0x318>)
 800174e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
						uart_module_send_hex(cmd_23, sizeof(cmd_23));
 8001752:	2126      	movs	r1, #38	; 0x26
 8001754:	4858      	ldr	r0, [pc, #352]	; (80018b8 <signal_wire_read_handler+0x318>)
 8001756:	f7ff f9a5 	bl	8000aa4 <uart_module_send_hex>
						break;
 800175a:	e090      	b.n	800187e <signal_wire_read_handler+0x2de>
					case 0x24:  //单体电芯电压
						memcpy(&cmd_24[5],&can_battery.cell_voltage[0],32);
 800175c:	2220      	movs	r2, #32
 800175e:	4957      	ldr	r1, [pc, #348]	; (80018bc <signal_wire_read_handler+0x31c>)
 8001760:	4857      	ldr	r0, [pc, #348]	; (80018c0 <signal_wire_read_handler+0x320>)
 8001762:	f003 fcbb 	bl	80050dc <memcpy>
						cmd_24[45] = getCheckSum(cmd_24, 45);
 8001766:	212d      	movs	r1, #45	; 0x2d
 8001768:	4856      	ldr	r0, [pc, #344]	; (80018c4 <signal_wire_read_handler+0x324>)
 800176a:	f7ff f8ed 	bl	8000948 <getCheckSum>
 800176e:	4603      	mov	r3, r0
 8001770:	461a      	mov	r2, r3
 8001772:	4b54      	ldr	r3, [pc, #336]	; (80018c4 <signal_wire_read_handler+0x324>)
 8001774:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
						uart_module_send_hex(cmd_24, sizeof(cmd_24));
 8001778:	212e      	movs	r1, #46	; 0x2e
 800177a:	4852      	ldr	r0, [pc, #328]	; (80018c4 <signal_wire_read_handler+0x324>)
 800177c:	f7ff f992 	bl	8000aa4 <uart_module_send_hex>
						break;
 8001780:	e07d      	b.n	800187e <signal_wire_read_handler+0x2de>
 8001782:	4b47      	ldr	r3, [pc, #284]	; (80018a0 <signal_wire_read_handler+0x300>)
 8001784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
					case 0x26:  //电池最值记录
						memcpy(&cmd_26[5],&can_battery.max_value.max_discharge_current,4);
 8001786:	4a50      	ldr	r2, [pc, #320]	; (80018c8 <signal_wire_read_handler+0x328>)
 8001788:	f8c2 3005 	str.w	r3, [r2, #5]
 800178c:	4b44      	ldr	r3, [pc, #272]	; (80018a0 <signal_wire_read_handler+0x300>)
 800178e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
						memcpy(&cmd_26[9],&can_battery.max_value.max_charge_current,4);
 8001790:	4a4d      	ldr	r2, [pc, #308]	; (80018c8 <signal_wire_read_handler+0x328>)
 8001792:	f8c2 3009 	str.w	r3, [r2, #9]
						cmd_26[19] = getCheckSum(cmd_26, 19);
 8001796:	2113      	movs	r1, #19
 8001798:	484b      	ldr	r0, [pc, #300]	; (80018c8 <signal_wire_read_handler+0x328>)
 800179a:	f7ff f8d5 	bl	8000948 <getCheckSum>
 800179e:	4603      	mov	r3, r0
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b49      	ldr	r3, [pc, #292]	; (80018c8 <signal_wire_read_handler+0x328>)
 80017a4:	74da      	strb	r2, [r3, #19]
						uart_module_send_hex(cmd_26, sizeof(cmd_26));
 80017a6:	2114      	movs	r1, #20
 80017a8:	4847      	ldr	r0, [pc, #284]	; (80018c8 <signal_wire_read_handler+0x328>)
 80017aa:	f7ff f97b 	bl	8000aa4 <uart_module_send_hex>
						break;
 80017ae:	e066      	b.n	800187e <signal_wire_read_handler+0x2de>
					case 0xA0:  //电池内部状态
						if(P[4] == 0x01)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	3304      	adds	r3, #4
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d104      	bne.n	80017c4 <signal_wire_read_handler+0x224>
						{
							uart_module_send_hex(cmd_A0_1, sizeof(cmd_A0_1));
 80017ba:	2107      	movs	r1, #7
 80017bc:	4843      	ldr	r0, [pc, #268]	; (80018cc <signal_wire_read_handler+0x32c>)
 80017be:	f7ff f971 	bl	8000aa4 <uart_module_send_hex>
							cmd_A0[26] = can_battery.mosfet_tmp;
							memcpy(&cmd_A0[29],&can_battery.cycle_counter,2);
							cmd_A0[31] = getCheckSum(cmd_A0, 31);
							uart_module_send_hex(cmd_A0, sizeof(cmd_A0));
						}
						break;
 80017c2:	e05c      	b.n	800187e <signal_wire_read_handler+0x2de>
							memcpy(&cmd_A0[7],can_battery.error_info.error,6);
 80017c4:	4b42      	ldr	r3, [pc, #264]	; (80018d0 <signal_wire_read_handler+0x330>)
 80017c6:	4a36      	ldr	r2, [pc, #216]	; (80018a0 <signal_wire_read_handler+0x300>)
 80017c8:	3307      	adds	r3, #7
 80017ca:	326c      	adds	r2, #108	; 0x6c
 80017cc:	6810      	ldr	r0, [r2, #0]
 80017ce:	6018      	str	r0, [r3, #0]
 80017d0:	8892      	ldrh	r2, [r2, #4]
 80017d2:	809a      	strh	r2, [r3, #4]
							cmd_A0[13] = can_battery.battery_soc;
 80017d4:	4b32      	ldr	r3, [pc, #200]	; (80018a0 <signal_wire_read_handler+0x300>)
 80017d6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80017da:	4b3d      	ldr	r3, [pc, #244]	; (80018d0 <signal_wire_read_handler+0x330>)
 80017dc:	735a      	strb	r2, [r3, #13]
							cmd_A0[14] = can_battery.battery_soh;
 80017de:	4b30      	ldr	r3, [pc, #192]	; (80018a0 <signal_wire_read_handler+0x300>)
 80017e0:	f893 2077 	ldrb.w	r2, [r3, #119]	; 0x77
 80017e4:	4b3a      	ldr	r3, [pc, #232]	; (80018d0 <signal_wire_read_handler+0x330>)
 80017e6:	739a      	strb	r2, [r3, #14]
 80017e8:	4b2d      	ldr	r3, [pc, #180]	; (80018a0 <signal_wire_read_handler+0x300>)
 80017ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
							memcpy(&cmd_A0[15],&can_battery.pack_voltage,4);
 80017ec:	4a38      	ldr	r2, [pc, #224]	; (80018d0 <signal_wire_read_handler+0x330>)
 80017ee:	f8c2 300f 	str.w	r3, [r2, #15]
							temp_value = abs(can_battery.real_time_current);
 80017f2:	4b2b      	ldr	r3, [pc, #172]	; (80018a0 <signal_wire_read_handler+0x300>)
 80017f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	bfb8      	it	lt
 80017fa:	425b      	neglt	r3, r3
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	687b      	ldr	r3, [r7, #4]
							memcpy(&cmd_A0[19],&temp_value,4);
 8001800:	4a33      	ldr	r2, [pc, #204]	; (80018d0 <signal_wire_read_handler+0x330>)
 8001802:	f8c2 3013 	str.w	r3, [r2, #19]
							cmd_A0[23] = can_battery.max_value.max_pack_temperature;  //
 8001806:	4b26      	ldr	r3, [pc, #152]	; (80018a0 <signal_wire_read_handler+0x300>)
 8001808:	f993 3068 	ldrsb.w	r3, [r3, #104]	; 0x68
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4b30      	ldr	r3, [pc, #192]	; (80018d0 <signal_wire_read_handler+0x330>)
 8001810:	75da      	strb	r2, [r3, #23]
							cmd_A0[24] = can_battery.max_value.min_pack_temperature;
 8001812:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <signal_wire_read_handler+0x300>)
 8001814:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4b2d      	ldr	r3, [pc, #180]	; (80018d0 <signal_wire_read_handler+0x330>)
 800181c:	761a      	strb	r2, [r3, #24]
							cmd_A0[25] = can_battery.mosfet_tmp;
 800181e:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <signal_wire_read_handler+0x300>)
 8001820:	f993 3082 	ldrsb.w	r3, [r3, #130]	; 0x82
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4b2a      	ldr	r3, [pc, #168]	; (80018d0 <signal_wire_read_handler+0x330>)
 8001828:	765a      	strb	r2, [r3, #25]
							cmd_A0[26] = can_battery.mosfet_tmp;
 800182a:	4b1d      	ldr	r3, [pc, #116]	; (80018a0 <signal_wire_read_handler+0x300>)
 800182c:	f993 3082 	ldrsb.w	r3, [r3, #130]	; 0x82
 8001830:	b2da      	uxtb	r2, r3
 8001832:	4b27      	ldr	r3, [pc, #156]	; (80018d0 <signal_wire_read_handler+0x330>)
 8001834:	769a      	strb	r2, [r3, #26]
 8001836:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <signal_wire_read_handler+0x300>)
 8001838:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
							memcpy(&cmd_A0[29],&can_battery.cycle_counter,2);
 800183c:	4a24      	ldr	r2, [pc, #144]	; (80018d0 <signal_wire_read_handler+0x330>)
 800183e:	f8a2 301d 	strh.w	r3, [r2, #29]
							cmd_A0[31] = getCheckSum(cmd_A0, 31);
 8001842:	211f      	movs	r1, #31
 8001844:	4822      	ldr	r0, [pc, #136]	; (80018d0 <signal_wire_read_handler+0x330>)
 8001846:	f7ff f87f 	bl	8000948 <getCheckSum>
 800184a:	4603      	mov	r3, r0
 800184c:	461a      	mov	r2, r3
 800184e:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <signal_wire_read_handler+0x330>)
 8001850:	77da      	strb	r2, [r3, #31]
							uart_module_send_hex(cmd_A0, sizeof(cmd_A0));
 8001852:	2120      	movs	r1, #32
 8001854:	481e      	ldr	r0, [pc, #120]	; (80018d0 <signal_wire_read_handler+0x330>)
 8001856:	f7ff f925 	bl	8000aa4 <uart_module_send_hex>
						break;
 800185a:	e010      	b.n	800187e <signal_wire_read_handler+0x2de>
					}
				}
				else if(P[2] == 0x00)  //写指令
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	3302      	adds	r3, #2
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10b      	bne.n	800187e <signal_wire_read_handler+0x2de>
				{
					if(P[3] == 0x00)   //写00 换电柜充电准备就绪
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	3303      	adds	r3, #3
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d106      	bne.n	800187e <signal_wire_read_handler+0x2de>
					{
						chg_flags.cabibet_ready_flag = true;
 8001870:	4b18      	ldr	r3, [pc, #96]	; (80018d4 <signal_wire_read_handler+0x334>)
 8001872:	2201      	movs	r2, #1
 8001874:	711a      	strb	r2, [r3, #4]
						uart_module_send_hex(cmd_00_w, sizeof(cmd_00_w));
 8001876:	2106      	movs	r1, #6
 8001878:	4817      	ldr	r0, [pc, #92]	; (80018d8 <signal_wire_read_handler+0x338>)
 800187a:	f7ff f913 	bl	8000aa4 <uart_module_send_hex>
				}
			}
		}

		//	uart_module_send_hex(signal_wire_huart_module.uart_module_receive_buffer,signal_wire_huart_module.rec_lenth);
		uart_module_start_receive(&signal_wire_huart_module);
 800187e:	4806      	ldr	r0, [pc, #24]	; (8001898 <signal_wire_read_handler+0x2f8>)
 8001880:	f7ff f939 	bl	8000af6 <uart_module_start_receive>
		memset(signal_wire_huart_module.uart_module_receive_buffer,0,sizeof(signal_wire_huart_module.uart_module_receive_buffer));
 8001884:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001888:	2100      	movs	r1, #0
 800188a:	4804      	ldr	r0, [pc, #16]	; (800189c <signal_wire_read_handler+0x2fc>)
 800188c:	f003 fc34 	bl	80050f8 <memset>
		//clear flags
	}



}
 8001890:	bf00      	nop
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bdb0      	pop	{r4, r5, r7, pc}
 8001898:	20000004 	.word	0x20000004
 800189c:	20000010 	.word	0x20000010
 80018a0:	20000770 	.word	0x20000770
 80018a4:	20000114 	.word	0x20000114
 80018a8:	20000120 	.word	0x20000120
 80018ac:	20000130 	.word	0x20000130
 80018b0:	20000784 	.word	0x20000784
 80018b4:	2000013d 	.word	0x2000013d
 80018b8:	20000148 	.word	0x20000148
 80018bc:	200007ac 	.word	0x200007ac
 80018c0:	20000175 	.word	0x20000175
 80018c4:	20000170 	.word	0x20000170
 80018c8:	200001a0 	.word	0x200001a0
 80018cc:	200001dc 	.word	0x200001dc
 80018d0:	200001b4 	.word	0x200001b4
 80018d4:	20000764 	.word	0x20000764
 80018d8:	200001d4 	.word	0x200001d4

080018dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <HAL_Init+0x28>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a07      	ldr	r2, [pc, #28]	; (8001904 <HAL_Init+0x28>)
 80018e6:	f043 0310 	orr.w	r3, r3, #16
 80018ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ec:	2003      	movs	r0, #3
 80018ee:	f000 ffa7 	bl	8002840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018f2:	200f      	movs	r0, #15
 80018f4:	f000 f808 	bl	8001908 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018f8:	f7fe fdda 	bl	80004b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40022000 	.word	0x40022000

08001908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001910:	4b12      	ldr	r3, [pc, #72]	; (800195c <HAL_InitTick+0x54>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4b12      	ldr	r3, [pc, #72]	; (8001960 <HAL_InitTick+0x58>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	4619      	mov	r1, r3
 800191a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800191e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001922:	fbb2 f3f3 	udiv	r3, r2, r3
 8001926:	4618      	mov	r0, r3
 8001928:	f000 ffcd 	bl	80028c6 <HAL_SYSTICK_Config>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e00e      	b.n	8001954 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b0f      	cmp	r3, #15
 800193a:	d80a      	bhi.n	8001952 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800193c:	2200      	movs	r2, #0
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	f04f 30ff 	mov.w	r0, #4294967295
 8001944:	f000 ff87 	bl	8002856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001948:	4a06      	ldr	r2, [pc, #24]	; (8001964 <HAL_InitTick+0x5c>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
 8001950:	e000      	b.n	8001954 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
}
 8001954:	4618      	mov	r0, r3
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000000 	.word	0x20000000
 8001960:	200001e8 	.word	0x200001e8
 8001964:	200001e4 	.word	0x200001e4

08001968 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <HAL_IncTick+0x1c>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	4b05      	ldr	r3, [pc, #20]	; (8001988 <HAL_IncTick+0x20>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4413      	add	r3, r2
 8001978:	4a03      	ldr	r2, [pc, #12]	; (8001988 <HAL_IncTick+0x20>)
 800197a:	6013      	str	r3, [r2, #0]
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr
 8001984:	200001e8 	.word	0x200001e8
 8001988:	200007f8 	.word	0x200007f8

0800198c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return uwTick;
 8001990:	4b02      	ldr	r3, [pc, #8]	; (800199c <HAL_GetTick+0x10>)
 8001992:	681b      	ldr	r3, [r3, #0]
}
 8001994:	4618      	mov	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr
 800199c:	200007f8 	.word	0x200007f8

080019a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019a8:	f7ff fff0 	bl	800198c <HAL_GetTick>
 80019ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b8:	d005      	beq.n	80019c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ba:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <HAL_Delay+0x44>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	461a      	mov	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4413      	add	r3, r2
 80019c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019c6:	bf00      	nop
 80019c8:	f7ff ffe0 	bl	800198c <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d8f7      	bhi.n	80019c8 <HAL_Delay+0x28>
  {
  }
}
 80019d8:	bf00      	nop
 80019da:	bf00      	nop
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200001e8 	.word	0x200001e8

080019e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e0ed      	b.n	8001bd6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d102      	bne.n	8001a0c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7fe fbd6 	bl	80001b8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f042 0201 	orr.w	r2, r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a1c:	f7ff ffb6 	bl	800198c <HAL_GetTick>
 8001a20:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a22:	e012      	b.n	8001a4a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a24:	f7ff ffb2 	bl	800198c <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b0a      	cmp	r3, #10
 8001a30:	d90b      	bls.n	8001a4a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2205      	movs	r2, #5
 8001a42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e0c5      	b.n	8001bd6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0e5      	beq.n	8001a24 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 0202 	bic.w	r2, r2, #2
 8001a66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a68:	f7ff ff90 	bl	800198c <HAL_GetTick>
 8001a6c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a6e:	e012      	b.n	8001a96 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a70:	f7ff ff8c 	bl	800198c <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b0a      	cmp	r3, #10
 8001a7c:	d90b      	bls.n	8001a96 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2205      	movs	r2, #5
 8001a8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e09f      	b.n	8001bd6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1e5      	bne.n	8001a70 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	7e1b      	ldrb	r3, [r3, #24]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d108      	bne.n	8001abe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	e007      	b.n	8001ace <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001acc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	7e5b      	ldrb	r3, [r3, #25]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d108      	bne.n	8001ae8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	e007      	b.n	8001af8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001af6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	7e9b      	ldrb	r3, [r3, #26]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d108      	bne.n	8001b12 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0220 	orr.w	r2, r2, #32
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	e007      	b.n	8001b22 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 0220 	bic.w	r2, r2, #32
 8001b20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	7edb      	ldrb	r3, [r3, #27]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d108      	bne.n	8001b3c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 0210 	bic.w	r2, r2, #16
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	e007      	b.n	8001b4c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0210 	orr.w	r2, r2, #16
 8001b4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	7f1b      	ldrb	r3, [r3, #28]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d108      	bne.n	8001b66 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0208 	orr.w	r2, r2, #8
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	e007      	b.n	8001b76 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 0208 	bic.w	r2, r2, #8
 8001b74:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	7f5b      	ldrb	r3, [r3, #29]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d108      	bne.n	8001b90 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f042 0204 	orr.w	r2, r2, #4
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	e007      	b.n	8001ba0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0204 	bic.w	r2, r2, #4
 8001b9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	ea42 0103 	orr.w	r1, r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	1e5a      	subs	r2, r3, #1
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b087      	sub	sp, #28
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bf4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001bf6:	7cfb      	ldrb	r3, [r7, #19]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d003      	beq.n	8001c04 <HAL_CAN_ConfigFilter+0x26>
 8001bfc:	7cfb      	ldrb	r3, [r7, #19]
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	f040 80aa 	bne.w	8001d58 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c0a:	f043 0201 	orr.w	r2, r3, #1
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	f003 031f 	and.w	r3, r3, #31
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	401a      	ands	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d123      	bne.n	8001c86 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	43db      	mvns	r3, r3
 8001c48:	401a      	ands	r2, r3
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c60:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	3248      	adds	r2, #72	; 0x48
 8001c66:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c7a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c7c:	6979      	ldr	r1, [r7, #20]
 8001c7e:	3348      	adds	r3, #72	; 0x48
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	440b      	add	r3, r1
 8001c84:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d122      	bne.n	8001cd4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	431a      	orrs	r2, r3
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001cae:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	3248      	adds	r2, #72	; 0x48
 8001cb4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cc8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cca:	6979      	ldr	r1, [r7, #20]
 8001ccc:	3348      	adds	r3, #72	; 0x48
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	440b      	add	r3, r1
 8001cd2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d109      	bne.n	8001cf0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001cee:	e007      	b.n	8001d00 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d109      	bne.n	8001d1c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	401a      	ands	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001d1a:	e007      	b.n	8001d2c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	431a      	orrs	r2, r3
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d107      	bne.n	8001d44 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d4a:	f023 0201 	bic.w	r2, r3, #1
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	e006      	b.n	8001d66 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
  }
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	371c      	adds	r7, #28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d12e      	bne.n	8001de2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2202      	movs	r2, #2
 8001d88:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 0201 	bic.w	r2, r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d9c:	f7ff fdf6 	bl	800198c <HAL_GetTick>
 8001da0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001da2:	e012      	b.n	8001dca <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001da4:	f7ff fdf2 	bl	800198c <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b0a      	cmp	r3, #10
 8001db0:	d90b      	bls.n	8001dca <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2205      	movs	r2, #5
 8001dc2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e012      	b.n	8001df0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1e5      	bne.n	8001da4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	e006      	b.n	8001df0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
  }
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b089      	sub	sp, #36	; 0x24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
 8001e04:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e0c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e16:	7ffb      	ldrb	r3, [r7, #31]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d003      	beq.n	8001e24 <HAL_CAN_AddTxMessage+0x2c>
 8001e1c:	7ffb      	ldrb	r3, [r7, #31]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	f040 80b8 	bne.w	8001f94 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10a      	bne.n	8001e44 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d105      	bne.n	8001e44 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f000 80a0 	beq.w	8001f84 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	0e1b      	lsrs	r3, r3, #24
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d907      	bls.n	8001e64 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e09e      	b.n	8001fa2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001e64:	2201      	movs	r2, #1
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	409a      	lsls	r2, r3
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10d      	bne.n	8001e92 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e80:	68f9      	ldr	r1, [r7, #12]
 8001e82:	6809      	ldr	r1, [r1, #0]
 8001e84:	431a      	orrs	r2, r3
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	3318      	adds	r3, #24
 8001e8a:	011b      	lsls	r3, r3, #4
 8001e8c:	440b      	add	r3, r1
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	e00f      	b.n	8001eb2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e9c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ea2:	68f9      	ldr	r1, [r7, #12]
 8001ea4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001ea6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	3318      	adds	r3, #24
 8001eac:	011b      	lsls	r3, r3, #4
 8001eae:	440b      	add	r3, r1
 8001eb0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6819      	ldr	r1, [r3, #0]
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	691a      	ldr	r2, [r3, #16]
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	3318      	adds	r3, #24
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	440b      	add	r3, r1
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	7d1b      	ldrb	r3, [r3, #20]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d111      	bne.n	8001ef2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	3318      	adds	r3, #24
 8001ed6:	011b      	lsls	r3, r3, #4
 8001ed8:	4413      	add	r3, r2
 8001eda:	3304      	adds	r3, #4
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	6811      	ldr	r1, [r2, #0]
 8001ee2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	3318      	adds	r3, #24
 8001eea:	011b      	lsls	r3, r3, #4
 8001eec:	440b      	add	r3, r1
 8001eee:	3304      	adds	r3, #4
 8001ef0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	3307      	adds	r3, #7
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	061a      	lsls	r2, r3, #24
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3306      	adds	r3, #6
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	041b      	lsls	r3, r3, #16
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3305      	adds	r3, #5
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	021b      	lsls	r3, r3, #8
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	3204      	adds	r2, #4
 8001f12:	7812      	ldrb	r2, [r2, #0]
 8001f14:	4610      	mov	r0, r2
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	6811      	ldr	r1, [r2, #0]
 8001f1a:	ea43 0200 	orr.w	r2, r3, r0
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	011b      	lsls	r3, r3, #4
 8001f22:	440b      	add	r3, r1
 8001f24:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001f28:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3303      	adds	r3, #3
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	061a      	lsls	r2, r3, #24
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3302      	adds	r3, #2
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	041b      	lsls	r3, r3, #16
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	021b      	lsls	r3, r3, #8
 8001f44:	4313      	orrs	r3, r2
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	7812      	ldrb	r2, [r2, #0]
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	6811      	ldr	r1, [r2, #0]
 8001f50:	ea43 0200 	orr.w	r2, r3, r0
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	011b      	lsls	r3, r3, #4
 8001f58:	440b      	add	r3, r1
 8001f5a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001f5e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	3318      	adds	r3, #24
 8001f68:	011b      	lsls	r3, r3, #4
 8001f6a:	4413      	add	r3, r2
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	6811      	ldr	r1, [r2, #0]
 8001f72:	f043 0201 	orr.w	r2, r3, #1
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	3318      	adds	r3, #24
 8001f7a:	011b      	lsls	r3, r3, #4
 8001f7c:	440b      	add	r3, r1
 8001f7e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	e00e      	b.n	8001fa2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e006      	b.n	8001fa2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
  }
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3724      	adds	r7, #36	; 0x24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr

08001fac <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001fac:	b480      	push	{r7}
 8001fae:	b087      	sub	sp, #28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
 8001fb8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fc0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fc2:	7dfb      	ldrb	r3, [r7, #23]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d003      	beq.n	8001fd0 <HAL_CAN_GetRxMessage+0x24>
 8001fc8:	7dfb      	ldrb	r3, [r7, #23]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	f040 80f3 	bne.w	80021b6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10e      	bne.n	8001ff4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d116      	bne.n	8002012 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e0e7      	b.n	80021c4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d107      	bne.n	8002012 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e0d8      	b.n	80021c4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	331b      	adds	r3, #27
 800201a:	011b      	lsls	r3, r3, #4
 800201c:	4413      	add	r3, r2
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0204 	and.w	r2, r3, #4
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10c      	bne.n	800204a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	331b      	adds	r3, #27
 8002038:	011b      	lsls	r3, r3, #4
 800203a:	4413      	add	r3, r2
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	0d5b      	lsrs	r3, r3, #21
 8002040:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	e00b      	b.n	8002062 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	331b      	adds	r3, #27
 8002052:	011b      	lsls	r3, r3, #4
 8002054:	4413      	add	r3, r2
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	08db      	lsrs	r3, r3, #3
 800205a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	331b      	adds	r3, #27
 800206a:	011b      	lsls	r3, r3, #4
 800206c:	4413      	add	r3, r2
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0202 	and.w	r2, r3, #2
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	331b      	adds	r3, #27
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	4413      	add	r3, r2
 8002084:	3304      	adds	r3, #4
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 020f 	and.w	r2, r3, #15
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	331b      	adds	r3, #27
 8002098:	011b      	lsls	r3, r3, #4
 800209a:	4413      	add	r3, r2
 800209c:	3304      	adds	r3, #4
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	0a1b      	lsrs	r3, r3, #8
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	331b      	adds	r3, #27
 80020b0:	011b      	lsls	r3, r3, #4
 80020b2:	4413      	add	r3, r2
 80020b4:	3304      	adds	r3, #4
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	0c1b      	lsrs	r3, r3, #16
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	4413      	add	r3, r2
 80020ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	011b      	lsls	r3, r3, #4
 80020de:	4413      	add	r3, r2
 80020e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	0a1a      	lsrs	r2, r3, #8
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	3301      	adds	r3, #1
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	011b      	lsls	r3, r3, #4
 80020f8:	4413      	add	r3, r2
 80020fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	0c1a      	lsrs	r2, r3, #16
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	3302      	adds	r3, #2
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	4413      	add	r3, r2
 8002114:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	0e1a      	lsrs	r2, r3, #24
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	3303      	adds	r3, #3
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	011b      	lsls	r3, r3, #4
 800212c:	4413      	add	r3, r2
 800212e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	3304      	adds	r3, #4
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	4413      	add	r3, r2
 8002146:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	0a1a      	lsrs	r2, r3, #8
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	3305      	adds	r3, #5
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	4413      	add	r3, r2
 8002160:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	0c1a      	lsrs	r2, r3, #16
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	3306      	adds	r3, #6
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	4413      	add	r3, r2
 800217a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	0e1a      	lsrs	r2, r3, #24
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	3307      	adds	r3, #7
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d108      	bne.n	80021a2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0220 	orr.w	r2, r2, #32
 800219e:	60da      	str	r2, [r3, #12]
 80021a0:	e007      	b.n	80021b2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f042 0220 	orr.w	r2, r2, #32
 80021b0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80021b2:	2300      	movs	r3, #0
 80021b4:	e006      	b.n	80021c4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
  }
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	371c      	adds	r7, #28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr

080021ce <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b085      	sub	sp, #20
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021de:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d002      	beq.n	80021ec <HAL_CAN_ActivateNotification+0x1e>
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d109      	bne.n	8002200 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6959      	ldr	r1, [r3, #20]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80021fc:	2300      	movs	r3, #0
 80021fe:	e006      	b.n	800220e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
  }
}
 800220e:	4618      	mov	r0, r3
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr

08002218 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b08a      	sub	sp, #40	; 0x28
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002220:	2300      	movs	r3, #0
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d07c      	beq.n	8002358 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b00      	cmp	r3, #0
 8002266:	d023      	beq.n	80022b0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2201      	movs	r2, #1
 800226e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f983 	bl	8002586 <HAL_CAN_TxMailbox0CompleteCallback>
 8002280:	e016      	b.n	80022b0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	d004      	beq.n	8002296 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
 8002294:	e00c      	b.n	80022b0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	f003 0308 	and.w	r3, r3, #8
 800229c:	2b00      	cmp	r3, #0
 800229e:	d004      	beq.n	80022aa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
 80022a8:	e002      	b.n	80022b0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f986 	bl	80025bc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d024      	beq.n	8002304 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022c2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f962 	bl	8002598 <HAL_CAN_TxMailbox1CompleteCallback>
 80022d4:	e016      	b.n	8002304 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d004      	beq.n	80022ea <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
 80022e8:	e00c      	b.n	8002304 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d004      	beq.n	80022fe <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
 80022fc:	e002      	b.n	8002304 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f965 	bl	80025ce <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d024      	beq.n	8002358 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002316:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f941 	bl	80025aa <HAL_CAN_TxMailbox2CompleteCallback>
 8002328:	e016      	b.n	8002358 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d004      	beq.n	800233e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800233a:	627b      	str	r3, [r7, #36]	; 0x24
 800233c:	e00c      	b.n	8002358 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d004      	beq.n	8002352 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
 8002350:	e002      	b.n	8002358 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f944 	bl	80025e0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00c      	beq.n	800237c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f003 0310 	and.w	r3, r3, #16
 8002368:	2b00      	cmp	r3, #0
 800236a:	d007      	beq.n	800237c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002372:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2210      	movs	r2, #16
 800237a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800237c:	6a3b      	ldr	r3, [r7, #32]
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00b      	beq.n	800239e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	f003 0308 	and.w	r3, r3, #8
 800238c:	2b00      	cmp	r3, #0
 800238e:	d006      	beq.n	800239e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2208      	movs	r2, #8
 8002396:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f92a 	bl	80025f2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d009      	beq.n	80023bc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7fe fa7c 	bl	80008b4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80023bc:	6a3b      	ldr	r3, [r7, #32]
 80023be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00c      	beq.n	80023e0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	f003 0310 	and.w	r3, r3, #16
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d007      	beq.n	80023e0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2210      	movs	r2, #16
 80023de:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	f003 0320 	and.w	r3, r3, #32
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00b      	beq.n	8002402 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d006      	beq.n	8002402 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2208      	movs	r2, #8
 80023fa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f90a 	bl	8002616 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002402:	6a3b      	ldr	r3, [r7, #32]
 8002404:	f003 0310 	and.w	r3, r3, #16
 8002408:	2b00      	cmp	r3, #0
 800240a:	d009      	beq.n	8002420 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d002      	beq.n	8002420 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f8f2 	bl	8002604 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00b      	beq.n	8002442 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	f003 0310 	and.w	r3, r3, #16
 8002430:	2b00      	cmp	r3, #0
 8002432:	d006      	beq.n	8002442 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2210      	movs	r2, #16
 800243a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f8f3 	bl	8002628 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00b      	beq.n	8002464 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d006      	beq.n	8002464 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2208      	movs	r2, #8
 800245c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f8eb 	bl	800263a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002464:	6a3b      	ldr	r3, [r7, #32]
 8002466:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d07b      	beq.n	8002566 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b00      	cmp	r3, #0
 8002476:	d072      	beq.n	800255e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247e:	2b00      	cmp	r3, #0
 8002480:	d008      	beq.n	8002494 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002494:	6a3b      	ldr	r3, [r7, #32]
 8002496:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800249a:	2b00      	cmp	r3, #0
 800249c:	d008      	beq.n	80024b0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	f043 0302 	orr.w	r3, r3, #2
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d008      	beq.n	80024cc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	f043 0304 	orr.w	r3, r3, #4
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d043      	beq.n	800255e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d03e      	beq.n	800255e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024e6:	2b60      	cmp	r3, #96	; 0x60
 80024e8:	d02b      	beq.n	8002542 <HAL_CAN_IRQHandler+0x32a>
 80024ea:	2b60      	cmp	r3, #96	; 0x60
 80024ec:	d82e      	bhi.n	800254c <HAL_CAN_IRQHandler+0x334>
 80024ee:	2b50      	cmp	r3, #80	; 0x50
 80024f0:	d022      	beq.n	8002538 <HAL_CAN_IRQHandler+0x320>
 80024f2:	2b50      	cmp	r3, #80	; 0x50
 80024f4:	d82a      	bhi.n	800254c <HAL_CAN_IRQHandler+0x334>
 80024f6:	2b40      	cmp	r3, #64	; 0x40
 80024f8:	d019      	beq.n	800252e <HAL_CAN_IRQHandler+0x316>
 80024fa:	2b40      	cmp	r3, #64	; 0x40
 80024fc:	d826      	bhi.n	800254c <HAL_CAN_IRQHandler+0x334>
 80024fe:	2b30      	cmp	r3, #48	; 0x30
 8002500:	d010      	beq.n	8002524 <HAL_CAN_IRQHandler+0x30c>
 8002502:	2b30      	cmp	r3, #48	; 0x30
 8002504:	d822      	bhi.n	800254c <HAL_CAN_IRQHandler+0x334>
 8002506:	2b10      	cmp	r3, #16
 8002508:	d002      	beq.n	8002510 <HAL_CAN_IRQHandler+0x2f8>
 800250a:	2b20      	cmp	r3, #32
 800250c:	d005      	beq.n	800251a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800250e:	e01d      	b.n	800254c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	f043 0308 	orr.w	r3, r3, #8
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002518:	e019      	b.n	800254e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	f043 0310 	orr.w	r3, r3, #16
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002522:	e014      	b.n	800254e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	f043 0320 	orr.w	r3, r3, #32
 800252a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800252c:	e00f      	b.n	800254e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002534:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002536:	e00a      	b.n	800254e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002540:	e005      	b.n	800254e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002548:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800254a:	e000      	b.n	800254e <HAL_CAN_IRQHandler+0x336>
            break;
 800254c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	699a      	ldr	r2, [r3, #24]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800255c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2204      	movs	r2, #4
 8002564:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	2b00      	cmp	r3, #0
 800256a:	d008      	beq.n	800257e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 f867 	bl	800264c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800257e:	bf00      	nop
 8002580:	3728      	adds	r7, #40	; 0x28
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr

08002598 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr

080025aa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr

080025bc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr

080025ce <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr

080025f2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr

08002604 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr

08002616 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr

08002628 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr

0800263a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr
	...

08002660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002670:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800267c:	4013      	ands	r3, r2
 800267e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002688:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800268c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002692:	4a04      	ldr	r2, [pc, #16]	; (80026a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	60d3      	str	r3, [r2, #12]
}
 8002698:	bf00      	nop
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026ac:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <__NVIC_GetPriorityGrouping+0x18>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	0a1b      	lsrs	r3, r3, #8
 80026b2:	f003 0307 	and.w	r3, r3, #7
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	db0b      	blt.n	80026ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	f003 021f 	and.w	r2, r3, #31
 80026dc:	4906      	ldr	r1, [pc, #24]	; (80026f8 <__NVIC_EnableIRQ+0x34>)
 80026de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e2:	095b      	lsrs	r3, r3, #5
 80026e4:	2001      	movs	r0, #1
 80026e6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr
 80026f8:	e000e100 	.word	0xe000e100

080026fc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270a:	2b00      	cmp	r3, #0
 800270c:	db12      	blt.n	8002734 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	f003 021f 	and.w	r2, r3, #31
 8002714:	490a      	ldr	r1, [pc, #40]	; (8002740 <__NVIC_DisableIRQ+0x44>)
 8002716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271a:	095b      	lsrs	r3, r3, #5
 800271c:	2001      	movs	r0, #1
 800271e:	fa00 f202 	lsl.w	r2, r0, r2
 8002722:	3320      	adds	r3, #32
 8002724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002728:	f3bf 8f4f 	dsb	sy
}
 800272c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800272e:	f3bf 8f6f 	isb	sy
}
 8002732:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	e000e100 	.word	0xe000e100

08002744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	6039      	str	r1, [r7, #0]
 800274e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002754:	2b00      	cmp	r3, #0
 8002756:	db0a      	blt.n	800276e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	b2da      	uxtb	r2, r3
 800275c:	490c      	ldr	r1, [pc, #48]	; (8002790 <__NVIC_SetPriority+0x4c>)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	0112      	lsls	r2, r2, #4
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	440b      	add	r3, r1
 8002768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800276c:	e00a      	b.n	8002784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	b2da      	uxtb	r2, r3
 8002772:	4908      	ldr	r1, [pc, #32]	; (8002794 <__NVIC_SetPriority+0x50>)
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	3b04      	subs	r3, #4
 800277c:	0112      	lsls	r2, r2, #4
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	440b      	add	r3, r1
 8002782:	761a      	strb	r2, [r3, #24]
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	e000e100 	.word	0xe000e100
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002798:	b480      	push	{r7}
 800279a:	b089      	sub	sp, #36	; 0x24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f1c3 0307 	rsb	r3, r3, #7
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	bf28      	it	cs
 80027b6:	2304      	movcs	r3, #4
 80027b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3304      	adds	r3, #4
 80027be:	2b06      	cmp	r3, #6
 80027c0:	d902      	bls.n	80027c8 <NVIC_EncodePriority+0x30>
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	3b03      	subs	r3, #3
 80027c6:	e000      	b.n	80027ca <NVIC_EncodePriority+0x32>
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027cc:	f04f 32ff 	mov.w	r2, #4294967295
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43da      	mvns	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	401a      	ands	r2, r3
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027e0:	f04f 31ff 	mov.w	r1, #4294967295
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ea:	43d9      	mvns	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f0:	4313      	orrs	r3, r2
         );
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3724      	adds	r7, #36	; 0x24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr

080027fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3b01      	subs	r3, #1
 8002808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800280c:	d301      	bcc.n	8002812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800280e:	2301      	movs	r3, #1
 8002810:	e00f      	b.n	8002832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002812:	4a0a      	ldr	r2, [pc, #40]	; (800283c <SysTick_Config+0x40>)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3b01      	subs	r3, #1
 8002818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800281a:	210f      	movs	r1, #15
 800281c:	f04f 30ff 	mov.w	r0, #4294967295
 8002820:	f7ff ff90 	bl	8002744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002824:	4b05      	ldr	r3, [pc, #20]	; (800283c <SysTick_Config+0x40>)
 8002826:	2200      	movs	r2, #0
 8002828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800282a:	4b04      	ldr	r3, [pc, #16]	; (800283c <SysTick_Config+0x40>)
 800282c:	2207      	movs	r2, #7
 800282e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	e000e010 	.word	0xe000e010

08002840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f7ff ff09 	bl	8002660 <__NVIC_SetPriorityGrouping>
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002856:	b580      	push	{r7, lr}
 8002858:	b086      	sub	sp, #24
 800285a:	af00      	add	r7, sp, #0
 800285c:	4603      	mov	r3, r0
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	607a      	str	r2, [r7, #4]
 8002862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002868:	f7ff ff1e 	bl	80026a8 <__NVIC_GetPriorityGrouping>
 800286c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	68b9      	ldr	r1, [r7, #8]
 8002872:	6978      	ldr	r0, [r7, #20]
 8002874:	f7ff ff90 	bl	8002798 <NVIC_EncodePriority>
 8002878:	4602      	mov	r2, r0
 800287a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800287e:	4611      	mov	r1, r2
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff ff5f 	bl	8002744 <__NVIC_SetPriority>
}
 8002886:	bf00      	nop
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	4603      	mov	r3, r0
 8002896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff ff11 	bl	80026c4 <__NVIC_EnableIRQ>
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	4603      	mov	r3, r0
 80028b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80028b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff ff1f 	bl	80026fc <__NVIC_DisableIRQ>
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff ff94 	bl	80027fc <SysTick_Config>
 80028d4:	4603      	mov	r3, r0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
	...

080028e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e043      	b.n	800297e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	461a      	mov	r2, r3
 80028fc:	4b22      	ldr	r3, [pc, #136]	; (8002988 <HAL_DMA_Init+0xa8>)
 80028fe:	4413      	add	r3, r2
 8002900:	4a22      	ldr	r2, [pc, #136]	; (800298c <HAL_DMA_Init+0xac>)
 8002902:	fba2 2303 	umull	r2, r3, r2, r3
 8002906:	091b      	lsrs	r3, r3, #4
 8002908:	009a      	lsls	r2, r3, #2
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a1f      	ldr	r2, [pc, #124]	; (8002990 <HAL_DMA_Init+0xb0>)
 8002912:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2202      	movs	r2, #2
 8002918:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800292a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800292e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002938:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002944:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002950:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	4313      	orrs	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr
 8002988:	bffdfff8 	.word	0xbffdfff8
 800298c:	cccccccd 	.word	0xcccccccd
 8002990:	40020000 	.word	0x40020000

08002994 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
 80029a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029a2:	2300      	movs	r3, #0
 80029a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d101      	bne.n	80029b4 <HAL_DMA_Start_IT+0x20>
 80029b0:	2302      	movs	r3, #2
 80029b2:	e04a      	b.n	8002a4a <HAL_DMA_Start_IT+0xb6>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d13a      	bne.n	8002a3c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2202      	movs	r2, #2
 80029ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 0201 	bic.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	68b9      	ldr	r1, [r7, #8]
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 f9e8 	bl	8002dc0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d008      	beq.n	8002a0a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 020e 	orr.w	r2, r2, #14
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	e00f      	b.n	8002a2a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0204 	bic.w	r2, r2, #4
 8002a18:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f042 020a 	orr.w	r2, r2, #10
 8002a28:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f042 0201 	orr.w	r2, r2, #1
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	e005      	b.n	8002a48 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a44:	2302      	movs	r3, #2
 8002a46:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b085      	sub	sp, #20
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d008      	beq.n	8002a7a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2204      	movs	r2, #4
 8002a6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e020      	b.n	8002abc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 020e 	bic.w	r2, r2, #14
 8002a88:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0201 	bic.w	r2, r2, #1
 8002a98:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bc80      	pop	{r7}
 8002ac4:	4770      	bx	lr
	...

08002ac8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d005      	beq.n	8002aea <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2204      	movs	r2, #4
 8002ae2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
 8002ae8:	e051      	b.n	8002b8e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 020e 	bic.w	r2, r2, #14
 8002af8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0201 	bic.w	r2, r2, #1
 8002b08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a22      	ldr	r2, [pc, #136]	; (8002b98 <HAL_DMA_Abort_IT+0xd0>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d029      	beq.n	8002b68 <HAL_DMA_Abort_IT+0xa0>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a20      	ldr	r2, [pc, #128]	; (8002b9c <HAL_DMA_Abort_IT+0xd4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d022      	beq.n	8002b64 <HAL_DMA_Abort_IT+0x9c>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a1f      	ldr	r2, [pc, #124]	; (8002ba0 <HAL_DMA_Abort_IT+0xd8>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d01a      	beq.n	8002b5e <HAL_DMA_Abort_IT+0x96>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a1d      	ldr	r2, [pc, #116]	; (8002ba4 <HAL_DMA_Abort_IT+0xdc>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d012      	beq.n	8002b58 <HAL_DMA_Abort_IT+0x90>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a1c      	ldr	r2, [pc, #112]	; (8002ba8 <HAL_DMA_Abort_IT+0xe0>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d00a      	beq.n	8002b52 <HAL_DMA_Abort_IT+0x8a>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a1a      	ldr	r2, [pc, #104]	; (8002bac <HAL_DMA_Abort_IT+0xe4>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d102      	bne.n	8002b4c <HAL_DMA_Abort_IT+0x84>
 8002b46:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b4a:	e00e      	b.n	8002b6a <HAL_DMA_Abort_IT+0xa2>
 8002b4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b50:	e00b      	b.n	8002b6a <HAL_DMA_Abort_IT+0xa2>
 8002b52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b56:	e008      	b.n	8002b6a <HAL_DMA_Abort_IT+0xa2>
 8002b58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b5c:	e005      	b.n	8002b6a <HAL_DMA_Abort_IT+0xa2>
 8002b5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b62:	e002      	b.n	8002b6a <HAL_DMA_Abort_IT+0xa2>
 8002b64:	2310      	movs	r3, #16
 8002b66:	e000      	b.n	8002b6a <HAL_DMA_Abort_IT+0xa2>
 8002b68:	2301      	movs	r3, #1
 8002b6a:	4a11      	ldr	r2, [pc, #68]	; (8002bb0 <HAL_DMA_Abort_IT+0xe8>)
 8002b6c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	4798      	blx	r3
    } 
  }
  return status;
 8002b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40020008 	.word	0x40020008
 8002b9c:	4002001c 	.word	0x4002001c
 8002ba0:	40020030 	.word	0x40020030
 8002ba4:	40020044 	.word	0x40020044
 8002ba8:	40020058 	.word	0x40020058
 8002bac:	4002006c 	.word	0x4002006c
 8002bb0:	40020000 	.word	0x40020000

08002bb4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	2204      	movs	r2, #4
 8002bd2:	409a      	lsls	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d04f      	beq.n	8002c7c <HAL_DMA_IRQHandler+0xc8>
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d04a      	beq.n	8002c7c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0320 	and.w	r3, r3, #32
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d107      	bne.n	8002c04 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0204 	bic.w	r2, r2, #4
 8002c02:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a66      	ldr	r2, [pc, #408]	; (8002da4 <HAL_DMA_IRQHandler+0x1f0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d029      	beq.n	8002c62 <HAL_DMA_IRQHandler+0xae>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a65      	ldr	r2, [pc, #404]	; (8002da8 <HAL_DMA_IRQHandler+0x1f4>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d022      	beq.n	8002c5e <HAL_DMA_IRQHandler+0xaa>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a63      	ldr	r2, [pc, #396]	; (8002dac <HAL_DMA_IRQHandler+0x1f8>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d01a      	beq.n	8002c58 <HAL_DMA_IRQHandler+0xa4>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a62      	ldr	r2, [pc, #392]	; (8002db0 <HAL_DMA_IRQHandler+0x1fc>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d012      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x9e>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a60      	ldr	r2, [pc, #384]	; (8002db4 <HAL_DMA_IRQHandler+0x200>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d00a      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x98>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a5f      	ldr	r2, [pc, #380]	; (8002db8 <HAL_DMA_IRQHandler+0x204>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d102      	bne.n	8002c46 <HAL_DMA_IRQHandler+0x92>
 8002c40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c44:	e00e      	b.n	8002c64 <HAL_DMA_IRQHandler+0xb0>
 8002c46:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002c4a:	e00b      	b.n	8002c64 <HAL_DMA_IRQHandler+0xb0>
 8002c4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c50:	e008      	b.n	8002c64 <HAL_DMA_IRQHandler+0xb0>
 8002c52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c56:	e005      	b.n	8002c64 <HAL_DMA_IRQHandler+0xb0>
 8002c58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c5c:	e002      	b.n	8002c64 <HAL_DMA_IRQHandler+0xb0>
 8002c5e:	2340      	movs	r3, #64	; 0x40
 8002c60:	e000      	b.n	8002c64 <HAL_DMA_IRQHandler+0xb0>
 8002c62:	2304      	movs	r3, #4
 8002c64:	4a55      	ldr	r2, [pc, #340]	; (8002dbc <HAL_DMA_IRQHandler+0x208>)
 8002c66:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 8094 	beq.w	8002d9a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002c7a:	e08e      	b.n	8002d9a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	2202      	movs	r2, #2
 8002c82:	409a      	lsls	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4013      	ands	r3, r2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d056      	beq.n	8002d3a <HAL_DMA_IRQHandler+0x186>
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d051      	beq.n	8002d3a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0320 	and.w	r3, r3, #32
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10b      	bne.n	8002cbc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 020a 	bic.w	r2, r2, #10
 8002cb2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a38      	ldr	r2, [pc, #224]	; (8002da4 <HAL_DMA_IRQHandler+0x1f0>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d029      	beq.n	8002d1a <HAL_DMA_IRQHandler+0x166>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a37      	ldr	r2, [pc, #220]	; (8002da8 <HAL_DMA_IRQHandler+0x1f4>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d022      	beq.n	8002d16 <HAL_DMA_IRQHandler+0x162>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a35      	ldr	r2, [pc, #212]	; (8002dac <HAL_DMA_IRQHandler+0x1f8>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d01a      	beq.n	8002d10 <HAL_DMA_IRQHandler+0x15c>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a34      	ldr	r2, [pc, #208]	; (8002db0 <HAL_DMA_IRQHandler+0x1fc>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d012      	beq.n	8002d0a <HAL_DMA_IRQHandler+0x156>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a32      	ldr	r2, [pc, #200]	; (8002db4 <HAL_DMA_IRQHandler+0x200>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d00a      	beq.n	8002d04 <HAL_DMA_IRQHandler+0x150>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a31      	ldr	r2, [pc, #196]	; (8002db8 <HAL_DMA_IRQHandler+0x204>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d102      	bne.n	8002cfe <HAL_DMA_IRQHandler+0x14a>
 8002cf8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cfc:	e00e      	b.n	8002d1c <HAL_DMA_IRQHandler+0x168>
 8002cfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d02:	e00b      	b.n	8002d1c <HAL_DMA_IRQHandler+0x168>
 8002d04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d08:	e008      	b.n	8002d1c <HAL_DMA_IRQHandler+0x168>
 8002d0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d0e:	e005      	b.n	8002d1c <HAL_DMA_IRQHandler+0x168>
 8002d10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d14:	e002      	b.n	8002d1c <HAL_DMA_IRQHandler+0x168>
 8002d16:	2320      	movs	r3, #32
 8002d18:	e000      	b.n	8002d1c <HAL_DMA_IRQHandler+0x168>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	4a27      	ldr	r2, [pc, #156]	; (8002dbc <HAL_DMA_IRQHandler+0x208>)
 8002d1e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d034      	beq.n	8002d9a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002d38:	e02f      	b.n	8002d9a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	2208      	movs	r2, #8
 8002d40:	409a      	lsls	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4013      	ands	r3, r2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d028      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x1e8>
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d023      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 020e 	bic.w	r2, r2, #14
 8002d62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d72:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d004      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	4798      	blx	r3
    }
  }
  return;
 8002d9a:	bf00      	nop
 8002d9c:	bf00      	nop
}
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40020008 	.word	0x40020008
 8002da8:	4002001c 	.word	0x4002001c
 8002dac:	40020030 	.word	0x40020030
 8002db0:	40020044 	.word	0x40020044
 8002db4:	40020058 	.word	0x40020058
 8002db8:	4002006c 	.word	0x4002006c
 8002dbc:	40020000 	.word	0x40020000

08002dc0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ddc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b10      	cmp	r3, #16
 8002dec:	d108      	bne.n	8002e00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002dfe:	e007      	b.n	8002e10 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	60da      	str	r2, [r3, #12]
}
 8002e10:	bf00      	nop
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr
	...

08002e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b08b      	sub	sp, #44	; 0x2c
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e26:	2300      	movs	r3, #0
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e2e:	e148      	b.n	80030c2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e30:	2201      	movs	r2, #1
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	69fa      	ldr	r2, [r7, #28]
 8002e40:	4013      	ands	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	f040 8137 	bne.w	80030bc <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	4aa3      	ldr	r2, [pc, #652]	; (80030e0 <HAL_GPIO_Init+0x2c4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d05e      	beq.n	8002f16 <HAL_GPIO_Init+0xfa>
 8002e58:	4aa1      	ldr	r2, [pc, #644]	; (80030e0 <HAL_GPIO_Init+0x2c4>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d875      	bhi.n	8002f4a <HAL_GPIO_Init+0x12e>
 8002e5e:	4aa1      	ldr	r2, [pc, #644]	; (80030e4 <HAL_GPIO_Init+0x2c8>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d058      	beq.n	8002f16 <HAL_GPIO_Init+0xfa>
 8002e64:	4a9f      	ldr	r2, [pc, #636]	; (80030e4 <HAL_GPIO_Init+0x2c8>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d86f      	bhi.n	8002f4a <HAL_GPIO_Init+0x12e>
 8002e6a:	4a9f      	ldr	r2, [pc, #636]	; (80030e8 <HAL_GPIO_Init+0x2cc>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d052      	beq.n	8002f16 <HAL_GPIO_Init+0xfa>
 8002e70:	4a9d      	ldr	r2, [pc, #628]	; (80030e8 <HAL_GPIO_Init+0x2cc>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d869      	bhi.n	8002f4a <HAL_GPIO_Init+0x12e>
 8002e76:	4a9d      	ldr	r2, [pc, #628]	; (80030ec <HAL_GPIO_Init+0x2d0>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d04c      	beq.n	8002f16 <HAL_GPIO_Init+0xfa>
 8002e7c:	4a9b      	ldr	r2, [pc, #620]	; (80030ec <HAL_GPIO_Init+0x2d0>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d863      	bhi.n	8002f4a <HAL_GPIO_Init+0x12e>
 8002e82:	4a9b      	ldr	r2, [pc, #620]	; (80030f0 <HAL_GPIO_Init+0x2d4>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d046      	beq.n	8002f16 <HAL_GPIO_Init+0xfa>
 8002e88:	4a99      	ldr	r2, [pc, #612]	; (80030f0 <HAL_GPIO_Init+0x2d4>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d85d      	bhi.n	8002f4a <HAL_GPIO_Init+0x12e>
 8002e8e:	2b12      	cmp	r3, #18
 8002e90:	d82a      	bhi.n	8002ee8 <HAL_GPIO_Init+0xcc>
 8002e92:	2b12      	cmp	r3, #18
 8002e94:	d859      	bhi.n	8002f4a <HAL_GPIO_Init+0x12e>
 8002e96:	a201      	add	r2, pc, #4	; (adr r2, 8002e9c <HAL_GPIO_Init+0x80>)
 8002e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e9c:	08002f17 	.word	0x08002f17
 8002ea0:	08002ef1 	.word	0x08002ef1
 8002ea4:	08002f03 	.word	0x08002f03
 8002ea8:	08002f45 	.word	0x08002f45
 8002eac:	08002f4b 	.word	0x08002f4b
 8002eb0:	08002f4b 	.word	0x08002f4b
 8002eb4:	08002f4b 	.word	0x08002f4b
 8002eb8:	08002f4b 	.word	0x08002f4b
 8002ebc:	08002f4b 	.word	0x08002f4b
 8002ec0:	08002f4b 	.word	0x08002f4b
 8002ec4:	08002f4b 	.word	0x08002f4b
 8002ec8:	08002f4b 	.word	0x08002f4b
 8002ecc:	08002f4b 	.word	0x08002f4b
 8002ed0:	08002f4b 	.word	0x08002f4b
 8002ed4:	08002f4b 	.word	0x08002f4b
 8002ed8:	08002f4b 	.word	0x08002f4b
 8002edc:	08002f4b 	.word	0x08002f4b
 8002ee0:	08002ef9 	.word	0x08002ef9
 8002ee4:	08002f0d 	.word	0x08002f0d
 8002ee8:	4a82      	ldr	r2, [pc, #520]	; (80030f4 <HAL_GPIO_Init+0x2d8>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d013      	beq.n	8002f16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002eee:	e02c      	b.n	8002f4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	623b      	str	r3, [r7, #32]
          break;
 8002ef6:	e029      	b.n	8002f4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	3304      	adds	r3, #4
 8002efe:	623b      	str	r3, [r7, #32]
          break;
 8002f00:	e024      	b.n	8002f4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	3308      	adds	r3, #8
 8002f08:	623b      	str	r3, [r7, #32]
          break;
 8002f0a:	e01f      	b.n	8002f4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	330c      	adds	r3, #12
 8002f12:	623b      	str	r3, [r7, #32]
          break;
 8002f14:	e01a      	b.n	8002f4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d102      	bne.n	8002f24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f1e:	2304      	movs	r3, #4
 8002f20:	623b      	str	r3, [r7, #32]
          break;
 8002f22:	e013      	b.n	8002f4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d105      	bne.n	8002f38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f2c:	2308      	movs	r3, #8
 8002f2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	69fa      	ldr	r2, [r7, #28]
 8002f34:	611a      	str	r2, [r3, #16]
          break;
 8002f36:	e009      	b.n	8002f4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f38:	2308      	movs	r3, #8
 8002f3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	69fa      	ldr	r2, [r7, #28]
 8002f40:	615a      	str	r2, [r3, #20]
          break;
 8002f42:	e003      	b.n	8002f4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f44:	2300      	movs	r3, #0
 8002f46:	623b      	str	r3, [r7, #32]
          break;
 8002f48:	e000      	b.n	8002f4c <HAL_GPIO_Init+0x130>
          break;
 8002f4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	2bff      	cmp	r3, #255	; 0xff
 8002f50:	d801      	bhi.n	8002f56 <HAL_GPIO_Init+0x13a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	e001      	b.n	8002f5a <HAL_GPIO_Init+0x13e>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3304      	adds	r3, #4
 8002f5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	2bff      	cmp	r3, #255	; 0xff
 8002f60:	d802      	bhi.n	8002f68 <HAL_GPIO_Init+0x14c>
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	e002      	b.n	8002f6e <HAL_GPIO_Init+0x152>
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	3b08      	subs	r3, #8
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	210f      	movs	r1, #15
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	401a      	ands	r2, r3
 8002f80:	6a39      	ldr	r1, [r7, #32]
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	fa01 f303 	lsl.w	r3, r1, r3
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 8090 	beq.w	80030bc <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f9c:	4b56      	ldr	r3, [pc, #344]	; (80030f8 <HAL_GPIO_Init+0x2dc>)
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	4a55      	ldr	r2, [pc, #340]	; (80030f8 <HAL_GPIO_Init+0x2dc>)
 8002fa2:	f043 0301 	orr.w	r3, r3, #1
 8002fa6:	6193      	str	r3, [r2, #24]
 8002fa8:	4b53      	ldr	r3, [pc, #332]	; (80030f8 <HAL_GPIO_Init+0x2dc>)
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002fb4:	4a51      	ldr	r2, [pc, #324]	; (80030fc <HAL_GPIO_Init+0x2e0>)
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	089b      	lsrs	r3, r3, #2
 8002fba:	3302      	adds	r3, #2
 8002fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	f003 0303 	and.w	r3, r3, #3
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	220f      	movs	r2, #15
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a49      	ldr	r2, [pc, #292]	; (8003100 <HAL_GPIO_Init+0x2e4>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d00d      	beq.n	8002ffc <HAL_GPIO_Init+0x1e0>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a48      	ldr	r2, [pc, #288]	; (8003104 <HAL_GPIO_Init+0x2e8>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d007      	beq.n	8002ff8 <HAL_GPIO_Init+0x1dc>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a47      	ldr	r2, [pc, #284]	; (8003108 <HAL_GPIO_Init+0x2ec>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d101      	bne.n	8002ff4 <HAL_GPIO_Init+0x1d8>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	e004      	b.n	8002ffe <HAL_GPIO_Init+0x1e2>
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e002      	b.n	8002ffe <HAL_GPIO_Init+0x1e2>
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e000      	b.n	8002ffe <HAL_GPIO_Init+0x1e2>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003000:	f002 0203 	and.w	r2, r2, #3
 8003004:	0092      	lsls	r2, r2, #2
 8003006:	4093      	lsls	r3, r2
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	4313      	orrs	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800300e:	493b      	ldr	r1, [pc, #236]	; (80030fc <HAL_GPIO_Init+0x2e0>)
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	089b      	lsrs	r3, r3, #2
 8003014:	3302      	adds	r3, #2
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d006      	beq.n	8003036 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003028:	4b38      	ldr	r3, [pc, #224]	; (800310c <HAL_GPIO_Init+0x2f0>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	4937      	ldr	r1, [pc, #220]	; (800310c <HAL_GPIO_Init+0x2f0>)
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	4313      	orrs	r3, r2
 8003032:	600b      	str	r3, [r1, #0]
 8003034:	e006      	b.n	8003044 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003036:	4b35      	ldr	r3, [pc, #212]	; (800310c <HAL_GPIO_Init+0x2f0>)
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	43db      	mvns	r3, r3
 800303e:	4933      	ldr	r1, [pc, #204]	; (800310c <HAL_GPIO_Init+0x2f0>)
 8003040:	4013      	ands	r3, r2
 8003042:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d006      	beq.n	800305e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003050:	4b2e      	ldr	r3, [pc, #184]	; (800310c <HAL_GPIO_Init+0x2f0>)
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	492d      	ldr	r1, [pc, #180]	; (800310c <HAL_GPIO_Init+0x2f0>)
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	4313      	orrs	r3, r2
 800305a:	604b      	str	r3, [r1, #4]
 800305c:	e006      	b.n	800306c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800305e:	4b2b      	ldr	r3, [pc, #172]	; (800310c <HAL_GPIO_Init+0x2f0>)
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	43db      	mvns	r3, r3
 8003066:	4929      	ldr	r1, [pc, #164]	; (800310c <HAL_GPIO_Init+0x2f0>)
 8003068:	4013      	ands	r3, r2
 800306a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d006      	beq.n	8003086 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003078:	4b24      	ldr	r3, [pc, #144]	; (800310c <HAL_GPIO_Init+0x2f0>)
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	4923      	ldr	r1, [pc, #140]	; (800310c <HAL_GPIO_Init+0x2f0>)
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	4313      	orrs	r3, r2
 8003082:	608b      	str	r3, [r1, #8]
 8003084:	e006      	b.n	8003094 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003086:	4b21      	ldr	r3, [pc, #132]	; (800310c <HAL_GPIO_Init+0x2f0>)
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	43db      	mvns	r3, r3
 800308e:	491f      	ldr	r1, [pc, #124]	; (800310c <HAL_GPIO_Init+0x2f0>)
 8003090:	4013      	ands	r3, r2
 8003092:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d006      	beq.n	80030ae <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030a0:	4b1a      	ldr	r3, [pc, #104]	; (800310c <HAL_GPIO_Init+0x2f0>)
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	4919      	ldr	r1, [pc, #100]	; (800310c <HAL_GPIO_Init+0x2f0>)
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	60cb      	str	r3, [r1, #12]
 80030ac:	e006      	b.n	80030bc <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030ae:	4b17      	ldr	r3, [pc, #92]	; (800310c <HAL_GPIO_Init+0x2f0>)
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	43db      	mvns	r3, r3
 80030b6:	4915      	ldr	r1, [pc, #84]	; (800310c <HAL_GPIO_Init+0x2f0>)
 80030b8:	4013      	ands	r3, r2
 80030ba:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	3301      	adds	r3, #1
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	fa22 f303 	lsr.w	r3, r2, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f47f aeaf 	bne.w	8002e30 <HAL_GPIO_Init+0x14>
  }
}
 80030d2:	bf00      	nop
 80030d4:	bf00      	nop
 80030d6:	372c      	adds	r7, #44	; 0x2c
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc80      	pop	{r7}
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	10320000 	.word	0x10320000
 80030e4:	10310000 	.word	0x10310000
 80030e8:	10220000 	.word	0x10220000
 80030ec:	10210000 	.word	0x10210000
 80030f0:	10120000 	.word	0x10120000
 80030f4:	10110000 	.word	0x10110000
 80030f8:	40021000 	.word	0x40021000
 80030fc:	40010000 	.word	0x40010000
 8003100:	40010800 	.word	0x40010800
 8003104:	40010c00 	.word	0x40010c00
 8003108:	40011000 	.word	0x40011000
 800310c:	40010400 	.word	0x40010400

08003110 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003110:	b480      	push	{r7}
 8003112:	b089      	sub	sp, #36	; 0x24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800311a:	2300      	movs	r3, #0
 800311c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800311e:	e094      	b.n	800324a <HAL_GPIO_DeInit+0x13a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003120:	2201      	movs	r2, #1
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	4013      	ands	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 8087 	beq.w	8003244 <HAL_GPIO_DeInit+0x134>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8003136:	4a4b      	ldr	r2, [pc, #300]	; (8003264 <HAL_GPIO_DeInit+0x154>)
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	089b      	lsrs	r3, r3, #2
 800313c:	3302      	adds	r3, #2
 800313e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003142:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	f003 0303 	and.w	r3, r3, #3
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	220f      	movs	r2, #15
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	4013      	ands	r3, r2
 8003156:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a43      	ldr	r2, [pc, #268]	; (8003268 <HAL_GPIO_DeInit+0x158>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d00d      	beq.n	800317c <HAL_GPIO_DeInit+0x6c>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a42      	ldr	r2, [pc, #264]	; (800326c <HAL_GPIO_DeInit+0x15c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d007      	beq.n	8003178 <HAL_GPIO_DeInit+0x68>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a41      	ldr	r2, [pc, #260]	; (8003270 <HAL_GPIO_DeInit+0x160>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d101      	bne.n	8003174 <HAL_GPIO_DeInit+0x64>
 8003170:	2302      	movs	r3, #2
 8003172:	e004      	b.n	800317e <HAL_GPIO_DeInit+0x6e>
 8003174:	2303      	movs	r3, #3
 8003176:	e002      	b.n	800317e <HAL_GPIO_DeInit+0x6e>
 8003178:	2301      	movs	r3, #1
 800317a:	e000      	b.n	800317e <HAL_GPIO_DeInit+0x6e>
 800317c:	2300      	movs	r3, #0
 800317e:	69fa      	ldr	r2, [r7, #28]
 8003180:	f002 0203 	and.w	r2, r2, #3
 8003184:	0092      	lsls	r2, r2, #2
 8003186:	4093      	lsls	r3, r2
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	429a      	cmp	r2, r3
 800318c:	d132      	bne.n	80031f4 <HAL_GPIO_DeInit+0xe4>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	f003 0303 	and.w	r3, r3, #3
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	220f      	movs	r2, #15
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800319e:	4a31      	ldr	r2, [pc, #196]	; (8003264 <HAL_GPIO_DeInit+0x154>)
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	089b      	lsrs	r3, r3, #2
 80031a4:	3302      	adds	r3, #2
 80031a6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	43da      	mvns	r2, r3
 80031ae:	482d      	ldr	r0, [pc, #180]	; (8003264 <HAL_GPIO_DeInit+0x154>)
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	089b      	lsrs	r3, r3, #2
 80031b4:	400a      	ands	r2, r1
 80031b6:	3302      	adds	r3, #2
 80031b8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80031bc:	4b2d      	ldr	r3, [pc, #180]	; (8003274 <HAL_GPIO_DeInit+0x164>)
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	43db      	mvns	r3, r3
 80031c4:	492b      	ldr	r1, [pc, #172]	; (8003274 <HAL_GPIO_DeInit+0x164>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80031ca:	4b2a      	ldr	r3, [pc, #168]	; (8003274 <HAL_GPIO_DeInit+0x164>)
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	43db      	mvns	r3, r3
 80031d2:	4928      	ldr	r1, [pc, #160]	; (8003274 <HAL_GPIO_DeInit+0x164>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80031d8:	4b26      	ldr	r3, [pc, #152]	; (8003274 <HAL_GPIO_DeInit+0x164>)
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	43db      	mvns	r3, r3
 80031e0:	4924      	ldr	r1, [pc, #144]	; (8003274 <HAL_GPIO_DeInit+0x164>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80031e6:	4b23      	ldr	r3, [pc, #140]	; (8003274 <HAL_GPIO_DeInit+0x164>)
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	43db      	mvns	r3, r3
 80031ee:	4921      	ldr	r1, [pc, #132]	; (8003274 <HAL_GPIO_DeInit+0x164>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	2bff      	cmp	r3, #255	; 0xff
 80031f8:	d801      	bhi.n	80031fe <HAL_GPIO_DeInit+0xee>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	e001      	b.n	8003202 <HAL_GPIO_DeInit+0xf2>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	3304      	adds	r3, #4
 8003202:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	2bff      	cmp	r3, #255	; 0xff
 8003208:	d802      	bhi.n	8003210 <HAL_GPIO_DeInit+0x100>
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	e002      	b.n	8003216 <HAL_GPIO_DeInit+0x106>
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	3b08      	subs	r3, #8
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	210f      	movs	r1, #15
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	fa01 f303 	lsl.w	r3, r1, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	401a      	ands	r2, r3
 8003228:	2104      	movs	r1, #4
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	fa01 f303 	lsl.w	r3, r1, r3
 8003230:	431a      	orrs	r2, r3
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	43db      	mvns	r3, r3
 800323e:	401a      	ands	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	3301      	adds	r3, #1
 8003248:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	fa22 f303 	lsr.w	r3, r2, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	f47f af64 	bne.w	8003120 <HAL_GPIO_DeInit+0x10>
  }
}
 8003258:	bf00      	nop
 800325a:	bf00      	nop
 800325c:	3724      	adds	r7, #36	; 0x24
 800325e:	46bd      	mov	sp, r7
 8003260:	bc80      	pop	{r7}
 8003262:	4770      	bx	lr
 8003264:	40010000 	.word	0x40010000
 8003268:	40010800 	.word	0x40010800
 800326c:	40010c00 	.word	0x40010c00
 8003270:	40011000 	.word	0x40011000
 8003274:	40010400 	.word	0x40010400

08003278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	460b      	mov	r3, r1
 8003282:	807b      	strh	r3, [r7, #2]
 8003284:	4613      	mov	r3, r2
 8003286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003288:	787b      	ldrb	r3, [r7, #1]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800328e:	887a      	ldrh	r2, [r7, #2]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003294:	e003      	b.n	800329e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003296:	887b      	ldrh	r3, [r7, #2]
 8003298:	041a      	lsls	r2, r3, #16
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	611a      	str	r2, [r3, #16]
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr

080032a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032ba:	887a      	ldrh	r2, [r7, #2]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4013      	ands	r3, r2
 80032c0:	041a      	lsls	r2, r3, #16
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	43d9      	mvns	r1, r3
 80032c6:	887b      	ldrh	r3, [r7, #2]
 80032c8:	400b      	ands	r3, r1
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	611a      	str	r2, [r3, #16]
}
 80032d0:	bf00      	nop
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr

080032da <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b084      	sub	sp, #16
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e034      	b.n	8003356 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80032f4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f245 5255 	movw	r2, #21845	; 0x5555
 80032fe:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6852      	ldr	r2, [r2, #4]
 8003308:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6892      	ldr	r2, [r2, #8]
 8003312:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003314:	f7fe fb3a 	bl	800198c <HAL_GetTick>
 8003318:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800331a:	e00f      	b.n	800333c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800331c:	f7fe fb36 	bl	800198c <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b27      	cmp	r3, #39	; 0x27
 8003328:	d908      	bls.n	800333c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f003 0303 	and.w	r3, r3, #3
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e00c      	b.n	8003356 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1e8      	bne.n	800331c <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003352:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800336e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr

0800337c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e26c      	b.n	8003868 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 8087 	beq.w	80034aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800339c:	4b92      	ldr	r3, [pc, #584]	; (80035e8 <HAL_RCC_OscConfig+0x26c>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f003 030c 	and.w	r3, r3, #12
 80033a4:	2b04      	cmp	r3, #4
 80033a6:	d00c      	beq.n	80033c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033a8:	4b8f      	ldr	r3, [pc, #572]	; (80035e8 <HAL_RCC_OscConfig+0x26c>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f003 030c 	and.w	r3, r3, #12
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	d112      	bne.n	80033da <HAL_RCC_OscConfig+0x5e>
 80033b4:	4b8c      	ldr	r3, [pc, #560]	; (80035e8 <HAL_RCC_OscConfig+0x26c>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c0:	d10b      	bne.n	80033da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c2:	4b89      	ldr	r3, [pc, #548]	; (80035e8 <HAL_RCC_OscConfig+0x26c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d06c      	beq.n	80034a8 <HAL_RCC_OscConfig+0x12c>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d168      	bne.n	80034a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e246      	b.n	8003868 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e2:	d106      	bne.n	80033f2 <HAL_RCC_OscConfig+0x76>
 80033e4:	4b80      	ldr	r3, [pc, #512]	; (80035e8 <HAL_RCC_OscConfig+0x26c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a7f      	ldr	r2, [pc, #508]	; (80035e8 <HAL_RCC_OscConfig+0x26c>)
 80033ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	e02e      	b.n	8003450 <HAL_RCC_OscConfig+0xd4>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10c      	bne.n	8003414 <HAL_RCC_OscConfig+0x98>
 80033fa:	4b7b      	ldr	r3, [pc, #492]	; (80035e8 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a7a      	ldr	r2, [pc, #488]	; (80035e8 <HAL_RCC_OscConfig+0x26c>)
 8003400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	4b78      	ldr	r3, [pc, #480]	; (80035e8 <HAL_RCC_OscConfig+0x26c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a77      	ldr	r2, [pc, #476]	; (80035e8 <HAL_RCC_OscConfig+0x26c>)
 800340c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	e01d      	b.n	8003450 <HAL_RCC_OscConfig+0xd4>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800341c:	d10c      	bne.n	8003438 <HAL_RCC_OscConfig+0xbc>
 800341e:	4b72      	ldr	r3, [pc, #456]	; (80035e8 <HAL_RCC_OscConfig+0x26c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a71      	ldr	r2, [pc, #452]	; (80035e8 <HAL_RCC_OscConfig+0x26c>)
 8003424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	4b6f      	ldr	r3, [pc, #444]	; (80035e8 <HAL_RCC_OscConfig+0x26c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a6e      	ldr	r2, [pc, #440]	; (80035e8 <HAL_RCC_OscConfig+0x26c>)
 8003430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	e00b      	b.n	8003450 <HAL_RCC_OscConfig+0xd4>
 8003438:	4b6b      	ldr	r3, [pc, #428]	; (80035e8 <HAL_RCC_OscConfig+0x26c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a6a      	ldr	r2, [pc, #424]	; (80035e8 <HAL_RCC_OscConfig+0x26c>)
 800343e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003442:	6013      	str	r3, [r2, #0]
 8003444:	4b68      	ldr	r3, [pc, #416]	; (80035e8 <HAL_RCC_OscConfig+0x26c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a67      	ldr	r2, [pc, #412]	; (80035e8 <HAL_RCC_OscConfig+0x26c>)
 800344a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800344e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d013      	beq.n	8003480 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003458:	f7fe fa98 	bl	800198c <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003460:	f7fe fa94 	bl	800198c <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b64      	cmp	r3, #100	; 0x64
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e1fa      	b.n	8003868 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003472:	4b5d      	ldr	r3, [pc, #372]	; (80035e8 <HAL_RCC_OscConfig+0x26c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0f0      	beq.n	8003460 <HAL_RCC_OscConfig+0xe4>
 800347e:	e014      	b.n	80034aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003480:	f7fe fa84 	bl	800198c <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003488:	f7fe fa80 	bl	800198c <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b64      	cmp	r3, #100	; 0x64
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e1e6      	b.n	8003868 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800349a:	4b53      	ldr	r3, [pc, #332]	; (80035e8 <HAL_RCC_OscConfig+0x26c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1f0      	bne.n	8003488 <HAL_RCC_OscConfig+0x10c>
 80034a6:	e000      	b.n	80034aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d063      	beq.n	800357e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034b6:	4b4c      	ldr	r3, [pc, #304]	; (80035e8 <HAL_RCC_OscConfig+0x26c>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f003 030c 	and.w	r3, r3, #12
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00b      	beq.n	80034da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034c2:	4b49      	ldr	r3, [pc, #292]	; (80035e8 <HAL_RCC_OscConfig+0x26c>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f003 030c 	and.w	r3, r3, #12
 80034ca:	2b08      	cmp	r3, #8
 80034cc:	d11c      	bne.n	8003508 <HAL_RCC_OscConfig+0x18c>
 80034ce:	4b46      	ldr	r3, [pc, #280]	; (80035e8 <HAL_RCC_OscConfig+0x26c>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d116      	bne.n	8003508 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034da:	4b43      	ldr	r3, [pc, #268]	; (80035e8 <HAL_RCC_OscConfig+0x26c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d005      	beq.n	80034f2 <HAL_RCC_OscConfig+0x176>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d001      	beq.n	80034f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e1ba      	b.n	8003868 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f2:	4b3d      	ldr	r3, [pc, #244]	; (80035e8 <HAL_RCC_OscConfig+0x26c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	4939      	ldr	r1, [pc, #228]	; (80035e8 <HAL_RCC_OscConfig+0x26c>)
 8003502:	4313      	orrs	r3, r2
 8003504:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003506:	e03a      	b.n	800357e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d020      	beq.n	8003552 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003510:	4b36      	ldr	r3, [pc, #216]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 8003512:	2201      	movs	r2, #1
 8003514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003516:	f7fe fa39 	bl	800198c <HAL_GetTick>
 800351a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800351c:	e008      	b.n	8003530 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800351e:	f7fe fa35 	bl	800198c <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e19b      	b.n	8003868 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003530:	4b2d      	ldr	r3, [pc, #180]	; (80035e8 <HAL_RCC_OscConfig+0x26c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0f0      	beq.n	800351e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800353c:	4b2a      	ldr	r3, [pc, #168]	; (80035e8 <HAL_RCC_OscConfig+0x26c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	4927      	ldr	r1, [pc, #156]	; (80035e8 <HAL_RCC_OscConfig+0x26c>)
 800354c:	4313      	orrs	r3, r2
 800354e:	600b      	str	r3, [r1, #0]
 8003550:	e015      	b.n	800357e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003552:	4b26      	ldr	r3, [pc, #152]	; (80035ec <HAL_RCC_OscConfig+0x270>)
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003558:	f7fe fa18 	bl	800198c <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003560:	f7fe fa14 	bl	800198c <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e17a      	b.n	8003868 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003572:	4b1d      	ldr	r3, [pc, #116]	; (80035e8 <HAL_RCC_OscConfig+0x26c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1f0      	bne.n	8003560 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b00      	cmp	r3, #0
 8003588:	d03a      	beq.n	8003600 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d019      	beq.n	80035c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003592:	4b17      	ldr	r3, [pc, #92]	; (80035f0 <HAL_RCC_OscConfig+0x274>)
 8003594:	2201      	movs	r2, #1
 8003596:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003598:	f7fe f9f8 	bl	800198c <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035a0:	f7fe f9f4 	bl	800198c <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e15a      	b.n	8003868 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035b2:	4b0d      	ldr	r3, [pc, #52]	; (80035e8 <HAL_RCC_OscConfig+0x26c>)
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0f0      	beq.n	80035a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035be:	2001      	movs	r0, #1
 80035c0:	f000 fad8 	bl	8003b74 <RCC_Delay>
 80035c4:	e01c      	b.n	8003600 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035c6:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <HAL_RCC_OscConfig+0x274>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035cc:	f7fe f9de 	bl	800198c <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d2:	e00f      	b.n	80035f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035d4:	f7fe f9da 	bl	800198c <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d908      	bls.n	80035f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e140      	b.n	8003868 <HAL_RCC_OscConfig+0x4ec>
 80035e6:	bf00      	nop
 80035e8:	40021000 	.word	0x40021000
 80035ec:	42420000 	.word	0x42420000
 80035f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f4:	4b9e      	ldr	r3, [pc, #632]	; (8003870 <HAL_RCC_OscConfig+0x4f4>)
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1e9      	bne.n	80035d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 80a6 	beq.w	800375a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800360e:	2300      	movs	r3, #0
 8003610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003612:	4b97      	ldr	r3, [pc, #604]	; (8003870 <HAL_RCC_OscConfig+0x4f4>)
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10d      	bne.n	800363a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800361e:	4b94      	ldr	r3, [pc, #592]	; (8003870 <HAL_RCC_OscConfig+0x4f4>)
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	4a93      	ldr	r2, [pc, #588]	; (8003870 <HAL_RCC_OscConfig+0x4f4>)
 8003624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003628:	61d3      	str	r3, [r2, #28]
 800362a:	4b91      	ldr	r3, [pc, #580]	; (8003870 <HAL_RCC_OscConfig+0x4f4>)
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003632:	60bb      	str	r3, [r7, #8]
 8003634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003636:	2301      	movs	r3, #1
 8003638:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363a:	4b8e      	ldr	r3, [pc, #568]	; (8003874 <HAL_RCC_OscConfig+0x4f8>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003642:	2b00      	cmp	r3, #0
 8003644:	d118      	bne.n	8003678 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003646:	4b8b      	ldr	r3, [pc, #556]	; (8003874 <HAL_RCC_OscConfig+0x4f8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a8a      	ldr	r2, [pc, #552]	; (8003874 <HAL_RCC_OscConfig+0x4f8>)
 800364c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003652:	f7fe f99b 	bl	800198c <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800365a:	f7fe f997 	bl	800198c <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b64      	cmp	r3, #100	; 0x64
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e0fd      	b.n	8003868 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366c:	4b81      	ldr	r3, [pc, #516]	; (8003874 <HAL_RCC_OscConfig+0x4f8>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0f0      	beq.n	800365a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d106      	bne.n	800368e <HAL_RCC_OscConfig+0x312>
 8003680:	4b7b      	ldr	r3, [pc, #492]	; (8003870 <HAL_RCC_OscConfig+0x4f4>)
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	4a7a      	ldr	r2, [pc, #488]	; (8003870 <HAL_RCC_OscConfig+0x4f4>)
 8003686:	f043 0301 	orr.w	r3, r3, #1
 800368a:	6213      	str	r3, [r2, #32]
 800368c:	e02d      	b.n	80036ea <HAL_RCC_OscConfig+0x36e>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10c      	bne.n	80036b0 <HAL_RCC_OscConfig+0x334>
 8003696:	4b76      	ldr	r3, [pc, #472]	; (8003870 <HAL_RCC_OscConfig+0x4f4>)
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	4a75      	ldr	r2, [pc, #468]	; (8003870 <HAL_RCC_OscConfig+0x4f4>)
 800369c:	f023 0301 	bic.w	r3, r3, #1
 80036a0:	6213      	str	r3, [r2, #32]
 80036a2:	4b73      	ldr	r3, [pc, #460]	; (8003870 <HAL_RCC_OscConfig+0x4f4>)
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	4a72      	ldr	r2, [pc, #456]	; (8003870 <HAL_RCC_OscConfig+0x4f4>)
 80036a8:	f023 0304 	bic.w	r3, r3, #4
 80036ac:	6213      	str	r3, [r2, #32]
 80036ae:	e01c      	b.n	80036ea <HAL_RCC_OscConfig+0x36e>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	2b05      	cmp	r3, #5
 80036b6:	d10c      	bne.n	80036d2 <HAL_RCC_OscConfig+0x356>
 80036b8:	4b6d      	ldr	r3, [pc, #436]	; (8003870 <HAL_RCC_OscConfig+0x4f4>)
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	4a6c      	ldr	r2, [pc, #432]	; (8003870 <HAL_RCC_OscConfig+0x4f4>)
 80036be:	f043 0304 	orr.w	r3, r3, #4
 80036c2:	6213      	str	r3, [r2, #32]
 80036c4:	4b6a      	ldr	r3, [pc, #424]	; (8003870 <HAL_RCC_OscConfig+0x4f4>)
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	4a69      	ldr	r2, [pc, #420]	; (8003870 <HAL_RCC_OscConfig+0x4f4>)
 80036ca:	f043 0301 	orr.w	r3, r3, #1
 80036ce:	6213      	str	r3, [r2, #32]
 80036d0:	e00b      	b.n	80036ea <HAL_RCC_OscConfig+0x36e>
 80036d2:	4b67      	ldr	r3, [pc, #412]	; (8003870 <HAL_RCC_OscConfig+0x4f4>)
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	4a66      	ldr	r2, [pc, #408]	; (8003870 <HAL_RCC_OscConfig+0x4f4>)
 80036d8:	f023 0301 	bic.w	r3, r3, #1
 80036dc:	6213      	str	r3, [r2, #32]
 80036de:	4b64      	ldr	r3, [pc, #400]	; (8003870 <HAL_RCC_OscConfig+0x4f4>)
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	4a63      	ldr	r2, [pc, #396]	; (8003870 <HAL_RCC_OscConfig+0x4f4>)
 80036e4:	f023 0304 	bic.w	r3, r3, #4
 80036e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d015      	beq.n	800371e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f2:	f7fe f94b 	bl	800198c <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f8:	e00a      	b.n	8003710 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036fa:	f7fe f947 	bl	800198c <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	f241 3288 	movw	r2, #5000	; 0x1388
 8003708:	4293      	cmp	r3, r2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e0ab      	b.n	8003868 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003710:	4b57      	ldr	r3, [pc, #348]	; (8003870 <HAL_RCC_OscConfig+0x4f4>)
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0ee      	beq.n	80036fa <HAL_RCC_OscConfig+0x37e>
 800371c:	e014      	b.n	8003748 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800371e:	f7fe f935 	bl	800198c <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003724:	e00a      	b.n	800373c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003726:	f7fe f931 	bl	800198c <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	f241 3288 	movw	r2, #5000	; 0x1388
 8003734:	4293      	cmp	r3, r2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e095      	b.n	8003868 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800373c:	4b4c      	ldr	r3, [pc, #304]	; (8003870 <HAL_RCC_OscConfig+0x4f4>)
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1ee      	bne.n	8003726 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003748:	7dfb      	ldrb	r3, [r7, #23]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d105      	bne.n	800375a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800374e:	4b48      	ldr	r3, [pc, #288]	; (8003870 <HAL_RCC_OscConfig+0x4f4>)
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	4a47      	ldr	r2, [pc, #284]	; (8003870 <HAL_RCC_OscConfig+0x4f4>)
 8003754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003758:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 8081 	beq.w	8003866 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003764:	4b42      	ldr	r3, [pc, #264]	; (8003870 <HAL_RCC_OscConfig+0x4f4>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 030c 	and.w	r3, r3, #12
 800376c:	2b08      	cmp	r3, #8
 800376e:	d061      	beq.n	8003834 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	69db      	ldr	r3, [r3, #28]
 8003774:	2b02      	cmp	r3, #2
 8003776:	d146      	bne.n	8003806 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003778:	4b3f      	ldr	r3, [pc, #252]	; (8003878 <HAL_RCC_OscConfig+0x4fc>)
 800377a:	2200      	movs	r2, #0
 800377c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377e:	f7fe f905 	bl	800198c <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003786:	f7fe f901 	bl	800198c <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e067      	b.n	8003868 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003798:	4b35      	ldr	r3, [pc, #212]	; (8003870 <HAL_RCC_OscConfig+0x4f4>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1f0      	bne.n	8003786 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ac:	d108      	bne.n	80037c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037ae:	4b30      	ldr	r3, [pc, #192]	; (8003870 <HAL_RCC_OscConfig+0x4f4>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	492d      	ldr	r1, [pc, #180]	; (8003870 <HAL_RCC_OscConfig+0x4f4>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037c0:	4b2b      	ldr	r3, [pc, #172]	; (8003870 <HAL_RCC_OscConfig+0x4f4>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a19      	ldr	r1, [r3, #32]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	430b      	orrs	r3, r1
 80037d2:	4927      	ldr	r1, [pc, #156]	; (8003870 <HAL_RCC_OscConfig+0x4f4>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037d8:	4b27      	ldr	r3, [pc, #156]	; (8003878 <HAL_RCC_OscConfig+0x4fc>)
 80037da:	2201      	movs	r2, #1
 80037dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037de:	f7fe f8d5 	bl	800198c <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e6:	f7fe f8d1 	bl	800198c <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e037      	b.n	8003868 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037f8:	4b1d      	ldr	r3, [pc, #116]	; (8003870 <HAL_RCC_OscConfig+0x4f4>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0f0      	beq.n	80037e6 <HAL_RCC_OscConfig+0x46a>
 8003804:	e02f      	b.n	8003866 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003806:	4b1c      	ldr	r3, [pc, #112]	; (8003878 <HAL_RCC_OscConfig+0x4fc>)
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380c:	f7fe f8be 	bl	800198c <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003814:	f7fe f8ba 	bl	800198c <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e020      	b.n	8003868 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003826:	4b12      	ldr	r3, [pc, #72]	; (8003870 <HAL_RCC_OscConfig+0x4f4>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0x498>
 8003832:	e018      	b.n	8003866 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	69db      	ldr	r3, [r3, #28]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d101      	bne.n	8003840 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e013      	b.n	8003868 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003840:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <HAL_RCC_OscConfig+0x4f4>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	429a      	cmp	r2, r3
 8003852:	d106      	bne.n	8003862 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385e:	429a      	cmp	r2, r3
 8003860:	d001      	beq.n	8003866 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e000      	b.n	8003868 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3718      	adds	r7, #24
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40021000 	.word	0x40021000
 8003874:	40007000 	.word	0x40007000
 8003878:	42420060 	.word	0x42420060

0800387c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0d0      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003890:	4b6a      	ldr	r3, [pc, #424]	; (8003a3c <HAL_RCC_ClockConfig+0x1c0>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d910      	bls.n	80038c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389e:	4b67      	ldr	r3, [pc, #412]	; (8003a3c <HAL_RCC_ClockConfig+0x1c0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f023 0207 	bic.w	r2, r3, #7
 80038a6:	4965      	ldr	r1, [pc, #404]	; (8003a3c <HAL_RCC_ClockConfig+0x1c0>)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ae:	4b63      	ldr	r3, [pc, #396]	; (8003a3c <HAL_RCC_ClockConfig+0x1c0>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d001      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e0b8      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d020      	beq.n	800390e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d005      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038d8:	4b59      	ldr	r3, [pc, #356]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	4a58      	ldr	r2, [pc, #352]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 80038de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0308 	and.w	r3, r3, #8
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d005      	beq.n	80038fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038f0:	4b53      	ldr	r3, [pc, #332]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	4a52      	ldr	r2, [pc, #328]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 80038f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038fc:	4b50      	ldr	r3, [pc, #320]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	494d      	ldr	r1, [pc, #308]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 800390a:	4313      	orrs	r3, r2
 800390c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d040      	beq.n	800399c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d107      	bne.n	8003932 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003922:	4b47      	ldr	r3, [pc, #284]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d115      	bne.n	800395a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e07f      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b02      	cmp	r3, #2
 8003938:	d107      	bne.n	800394a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800393a:	4b41      	ldr	r3, [pc, #260]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d109      	bne.n	800395a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e073      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800394a:	4b3d      	ldr	r3, [pc, #244]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e06b      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800395a:	4b39      	ldr	r3, [pc, #228]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f023 0203 	bic.w	r2, r3, #3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	4936      	ldr	r1, [pc, #216]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 8003968:	4313      	orrs	r3, r2
 800396a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800396c:	f7fe f80e 	bl	800198c <HAL_GetTick>
 8003970:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003972:	e00a      	b.n	800398a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003974:	f7fe f80a 	bl	800198c <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003982:	4293      	cmp	r3, r2
 8003984:	d901      	bls.n	800398a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e053      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398a:	4b2d      	ldr	r3, [pc, #180]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f003 020c 	and.w	r2, r3, #12
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	429a      	cmp	r2, r3
 800399a:	d1eb      	bne.n	8003974 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800399c:	4b27      	ldr	r3, [pc, #156]	; (8003a3c <HAL_RCC_ClockConfig+0x1c0>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d210      	bcs.n	80039cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039aa:	4b24      	ldr	r3, [pc, #144]	; (8003a3c <HAL_RCC_ClockConfig+0x1c0>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f023 0207 	bic.w	r2, r3, #7
 80039b2:	4922      	ldr	r1, [pc, #136]	; (8003a3c <HAL_RCC_ClockConfig+0x1c0>)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ba:	4b20      	ldr	r3, [pc, #128]	; (8003a3c <HAL_RCC_ClockConfig+0x1c0>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d001      	beq.n	80039cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e032      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d008      	beq.n	80039ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d8:	4b19      	ldr	r3, [pc, #100]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	4916      	ldr	r1, [pc, #88]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d009      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039f6:	4b12      	ldr	r3, [pc, #72]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	490e      	ldr	r1, [pc, #56]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a0a:	f000 f821 	bl	8003a50 <HAL_RCC_GetSysClockFreq>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	091b      	lsrs	r3, r3, #4
 8003a16:	f003 030f 	and.w	r3, r3, #15
 8003a1a:	490a      	ldr	r1, [pc, #40]	; (8003a44 <HAL_RCC_ClockConfig+0x1c8>)
 8003a1c:	5ccb      	ldrb	r3, [r1, r3]
 8003a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a22:	4a09      	ldr	r2, [pc, #36]	; (8003a48 <HAL_RCC_ClockConfig+0x1cc>)
 8003a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a26:	4b09      	ldr	r3, [pc, #36]	; (8003a4c <HAL_RCC_ClockConfig+0x1d0>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fd ff6c 	bl	8001908 <HAL_InitTick>

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40022000 	.word	0x40022000
 8003a40:	40021000 	.word	0x40021000
 8003a44:	08005130 	.word	0x08005130
 8003a48:	20000000 	.word	0x20000000
 8003a4c:	200001e4 	.word	0x200001e4

08003a50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a50:	b490      	push	{r4, r7}
 8003a52:	b08a      	sub	sp, #40	; 0x28
 8003a54:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a56:	4b2a      	ldr	r3, [pc, #168]	; (8003b00 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a58:	1d3c      	adds	r4, r7, #4
 8003a5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a60:	f240 2301 	movw	r3, #513	; 0x201
 8003a64:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	61fb      	str	r3, [r7, #28]
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61bb      	str	r3, [r7, #24]
 8003a6e:	2300      	movs	r3, #0
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24
 8003a72:	2300      	movs	r3, #0
 8003a74:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a7a:	4b22      	ldr	r3, [pc, #136]	; (8003b04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f003 030c 	and.w	r3, r3, #12
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	d002      	beq.n	8003a90 <HAL_RCC_GetSysClockFreq+0x40>
 8003a8a:	2b08      	cmp	r3, #8
 8003a8c:	d003      	beq.n	8003a96 <HAL_RCC_GetSysClockFreq+0x46>
 8003a8e:	e02d      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a90:	4b1d      	ldr	r3, [pc, #116]	; (8003b08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a92:	623b      	str	r3, [r7, #32]
      break;
 8003a94:	e02d      	b.n	8003af2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	0c9b      	lsrs	r3, r3, #18
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003aa8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d013      	beq.n	8003adc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ab4:	4b13      	ldr	r3, [pc, #76]	; (8003b04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	0c5b      	lsrs	r3, r3, #17
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ac8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	4a0e      	ldr	r2, [pc, #56]	; (8003b08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ace:	fb02 f203 	mul.w	r2, r2, r3
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8003ada:	e004      	b.n	8003ae6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	4a0b      	ldr	r2, [pc, #44]	; (8003b0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ae0:	fb02 f303 	mul.w	r3, r2, r3
 8003ae4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	623b      	str	r3, [r7, #32]
      break;
 8003aea:	e002      	b.n	8003af2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003aec:	4b06      	ldr	r3, [pc, #24]	; (8003b08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aee:	623b      	str	r3, [r7, #32]
      break;
 8003af0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003af2:	6a3b      	ldr	r3, [r7, #32]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3728      	adds	r7, #40	; 0x28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bc90      	pop	{r4, r7}
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	08005120 	.word	0x08005120
 8003b04:	40021000 	.word	0x40021000
 8003b08:	007a1200 	.word	0x007a1200
 8003b0c:	003d0900 	.word	0x003d0900

08003b10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b14:	4b02      	ldr	r3, [pc, #8]	; (8003b20 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b16:	681b      	ldr	r3, [r3, #0]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bc80      	pop	{r7}
 8003b1e:	4770      	bx	lr
 8003b20:	20000000 	.word	0x20000000

08003b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b28:	f7ff fff2 	bl	8003b10 <HAL_RCC_GetHCLKFreq>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	0a1b      	lsrs	r3, r3, #8
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	4903      	ldr	r1, [pc, #12]	; (8003b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b3a:	5ccb      	ldrb	r3, [r1, r3]
 8003b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40021000 	.word	0x40021000
 8003b48:	08005140 	.word	0x08005140

08003b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b50:	f7ff ffde 	bl	8003b10 <HAL_RCC_GetHCLKFreq>
 8003b54:	4602      	mov	r2, r0
 8003b56:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	0adb      	lsrs	r3, r3, #11
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	4903      	ldr	r1, [pc, #12]	; (8003b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b62:	5ccb      	ldrb	r3, [r1, r3]
 8003b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	08005140 	.word	0x08005140

08003b74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ba8 <RCC_Delay+0x34>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a0a      	ldr	r2, [pc, #40]	; (8003bac <RCC_Delay+0x38>)
 8003b82:	fba2 2303 	umull	r2, r3, r2, r3
 8003b86:	0a5b      	lsrs	r3, r3, #9
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	fb02 f303 	mul.w	r3, r2, r3
 8003b8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b90:	bf00      	nop
  }
  while (Delay --);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	1e5a      	subs	r2, r3, #1
 8003b96:	60fa      	str	r2, [r7, #12]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1f9      	bne.n	8003b90 <RCC_Delay+0x1c>
}
 8003b9c:	bf00      	nop
 8003b9e:	bf00      	nop
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bc80      	pop	{r7}
 8003ba6:	4770      	bx	lr
 8003ba8:	20000000 	.word	0x20000000
 8003bac:	10624dd3 	.word	0x10624dd3

08003bb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e041      	b.n	8003c46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d106      	bne.n	8003bdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7fc fd44 	bl	8000664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3304      	adds	r3, #4
 8003bec:	4619      	mov	r1, r3
 8003bee:	4610      	mov	r0, r2
 8003bf0:	f000 fa62 	bl	80040b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
	...

08003c50 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d001      	beq.n	8003c68 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e02d      	b.n	8003cc4 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a16      	ldr	r2, [pc, #88]	; (8003cd0 <HAL_TIM_Base_Start+0x80>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d009      	beq.n	8003c8e <HAL_TIM_Base_Start+0x3e>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c82:	d004      	beq.n	8003c8e <HAL_TIM_Base_Start+0x3e>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a12      	ldr	r2, [pc, #72]	; (8003cd4 <HAL_TIM_Base_Start+0x84>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d111      	bne.n	8003cb2 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2b06      	cmp	r3, #6
 8003c9e:	d010      	beq.n	8003cc2 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0201 	orr.w	r2, r2, #1
 8003cae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb0:	e007      	b.n	8003cc2 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f042 0201 	orr.w	r2, r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	40012c00 	.word	0x40012c00
 8003cd4:	40000400 	.word	0x40000400

08003cd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d122      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d11b      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f06f 0202 	mvn.w	r2, #2
 8003d04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f9b1 	bl	8004082 <HAL_TIM_IC_CaptureCallback>
 8003d20:	e005      	b.n	8003d2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f9a4 	bl	8004070 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f9b3 	bl	8004094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d122      	bne.n	8003d88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d11b      	bne.n	8003d88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f06f 0204 	mvn.w	r2, #4
 8003d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f987 	bl	8004082 <HAL_TIM_IC_CaptureCallback>
 8003d74:	e005      	b.n	8003d82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f97a 	bl	8004070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f989 	bl	8004094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	f003 0308 	and.w	r3, r3, #8
 8003d92:	2b08      	cmp	r3, #8
 8003d94:	d122      	bne.n	8003ddc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d11b      	bne.n	8003ddc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f06f 0208 	mvn.w	r2, #8
 8003dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2204      	movs	r2, #4
 8003db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f95d 	bl	8004082 <HAL_TIM_IC_CaptureCallback>
 8003dc8:	e005      	b.n	8003dd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f950 	bl	8004070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f95f 	bl	8004094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f003 0310 	and.w	r3, r3, #16
 8003de6:	2b10      	cmp	r3, #16
 8003de8:	d122      	bne.n	8003e30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f003 0310 	and.w	r3, r3, #16
 8003df4:	2b10      	cmp	r3, #16
 8003df6:	d11b      	bne.n	8003e30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f06f 0210 	mvn.w	r2, #16
 8003e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2208      	movs	r2, #8
 8003e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f933 	bl	8004082 <HAL_TIM_IC_CaptureCallback>
 8003e1c:	e005      	b.n	8003e2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f926 	bl	8004070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f935 	bl	8004094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d10e      	bne.n	8003e5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d107      	bne.n	8003e5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f06f 0201 	mvn.w	r2, #1
 8003e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7fc fd98 	bl	800098c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e66:	2b80      	cmp	r3, #128	; 0x80
 8003e68:	d10e      	bne.n	8003e88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e74:	2b80      	cmp	r3, #128	; 0x80
 8003e76:	d107      	bne.n	8003e88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 fa67 	bl	8004356 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e92:	2b40      	cmp	r3, #64	; 0x40
 8003e94:	d10e      	bne.n	8003eb4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea0:	2b40      	cmp	r3, #64	; 0x40
 8003ea2:	d107      	bne.n	8003eb4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f8f9 	bl	80040a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	f003 0320 	and.w	r3, r3, #32
 8003ebe:	2b20      	cmp	r3, #32
 8003ec0:	d10e      	bne.n	8003ee0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f003 0320 	and.w	r3, r3, #32
 8003ecc:	2b20      	cmp	r3, #32
 8003ece:	d107      	bne.n	8003ee0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f06f 0220 	mvn.w	r2, #32
 8003ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 fa32 	bl	8004344 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ee0:	bf00      	nop
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d101      	bne.n	8003f00 <HAL_TIM_ConfigClockSource+0x18>
 8003efc:	2302      	movs	r3, #2
 8003efe:	e0b3      	b.n	8004068 <HAL_TIM_ConfigClockSource+0x180>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f26:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f38:	d03e      	beq.n	8003fb8 <HAL_TIM_ConfigClockSource+0xd0>
 8003f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f3e:	f200 8087 	bhi.w	8004050 <HAL_TIM_ConfigClockSource+0x168>
 8003f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f46:	f000 8085 	beq.w	8004054 <HAL_TIM_ConfigClockSource+0x16c>
 8003f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f4e:	d87f      	bhi.n	8004050 <HAL_TIM_ConfigClockSource+0x168>
 8003f50:	2b70      	cmp	r3, #112	; 0x70
 8003f52:	d01a      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0xa2>
 8003f54:	2b70      	cmp	r3, #112	; 0x70
 8003f56:	d87b      	bhi.n	8004050 <HAL_TIM_ConfigClockSource+0x168>
 8003f58:	2b60      	cmp	r3, #96	; 0x60
 8003f5a:	d050      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x116>
 8003f5c:	2b60      	cmp	r3, #96	; 0x60
 8003f5e:	d877      	bhi.n	8004050 <HAL_TIM_ConfigClockSource+0x168>
 8003f60:	2b50      	cmp	r3, #80	; 0x50
 8003f62:	d03c      	beq.n	8003fde <HAL_TIM_ConfigClockSource+0xf6>
 8003f64:	2b50      	cmp	r3, #80	; 0x50
 8003f66:	d873      	bhi.n	8004050 <HAL_TIM_ConfigClockSource+0x168>
 8003f68:	2b40      	cmp	r3, #64	; 0x40
 8003f6a:	d058      	beq.n	800401e <HAL_TIM_ConfigClockSource+0x136>
 8003f6c:	2b40      	cmp	r3, #64	; 0x40
 8003f6e:	d86f      	bhi.n	8004050 <HAL_TIM_ConfigClockSource+0x168>
 8003f70:	2b30      	cmp	r3, #48	; 0x30
 8003f72:	d064      	beq.n	800403e <HAL_TIM_ConfigClockSource+0x156>
 8003f74:	2b30      	cmp	r3, #48	; 0x30
 8003f76:	d86b      	bhi.n	8004050 <HAL_TIM_ConfigClockSource+0x168>
 8003f78:	2b20      	cmp	r3, #32
 8003f7a:	d060      	beq.n	800403e <HAL_TIM_ConfigClockSource+0x156>
 8003f7c:	2b20      	cmp	r3, #32
 8003f7e:	d867      	bhi.n	8004050 <HAL_TIM_ConfigClockSource+0x168>
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d05c      	beq.n	800403e <HAL_TIM_ConfigClockSource+0x156>
 8003f84:	2b10      	cmp	r3, #16
 8003f86:	d05a      	beq.n	800403e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003f88:	e062      	b.n	8004050 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6818      	ldr	r0, [r3, #0]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	6899      	ldr	r1, [r3, #8]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	f000 f95c 	bl	8004256 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	609a      	str	r2, [r3, #8]
      break;
 8003fb6:	e04e      	b.n	8004056 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6818      	ldr	r0, [r3, #0]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	6899      	ldr	r1, [r3, #8]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	f000 f945 	bl	8004256 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689a      	ldr	r2, [r3, #8]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fda:	609a      	str	r2, [r3, #8]
      break;
 8003fdc:	e03b      	b.n	8004056 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6818      	ldr	r0, [r3, #0]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	6859      	ldr	r1, [r3, #4]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	461a      	mov	r2, r3
 8003fec:	f000 f8bc 	bl	8004168 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2150      	movs	r1, #80	; 0x50
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 f913 	bl	8004222 <TIM_ITRx_SetConfig>
      break;
 8003ffc:	e02b      	b.n	8004056 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	6859      	ldr	r1, [r3, #4]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	461a      	mov	r2, r3
 800400c:	f000 f8da 	bl	80041c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2160      	movs	r1, #96	; 0x60
 8004016:	4618      	mov	r0, r3
 8004018:	f000 f903 	bl	8004222 <TIM_ITRx_SetConfig>
      break;
 800401c:	e01b      	b.n	8004056 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6818      	ldr	r0, [r3, #0]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	6859      	ldr	r1, [r3, #4]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	461a      	mov	r2, r3
 800402c:	f000 f89c 	bl	8004168 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2140      	movs	r1, #64	; 0x40
 8004036:	4618      	mov	r0, r3
 8004038:	f000 f8f3 	bl	8004222 <TIM_ITRx_SetConfig>
      break;
 800403c:	e00b      	b.n	8004056 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4619      	mov	r1, r3
 8004048:	4610      	mov	r0, r2
 800404a:	f000 f8ea 	bl	8004222 <TIM_ITRx_SetConfig>
        break;
 800404e:	e002      	b.n	8004056 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004050:	bf00      	nop
 8004052:	e000      	b.n	8004056 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004054:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	bc80      	pop	{r7}
 8004080:	4770      	bx	lr

08004082 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004082:	b480      	push	{r7}
 8004084:	b083      	sub	sp, #12
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	bc80      	pop	{r7}
 8004092:	4770      	bx	lr

08004094 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bc80      	pop	{r7}
 80040a4:	4770      	bx	lr

080040a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bc80      	pop	{r7}
 80040b6:	4770      	bx	lr

080040b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a25      	ldr	r2, [pc, #148]	; (8004160 <TIM_Base_SetConfig+0xa8>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d007      	beq.n	80040e0 <TIM_Base_SetConfig+0x28>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d6:	d003      	beq.n	80040e0 <TIM_Base_SetConfig+0x28>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a22      	ldr	r2, [pc, #136]	; (8004164 <TIM_Base_SetConfig+0xac>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d108      	bne.n	80040f2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a1a      	ldr	r2, [pc, #104]	; (8004160 <TIM_Base_SetConfig+0xa8>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d007      	beq.n	800410a <TIM_Base_SetConfig+0x52>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004100:	d003      	beq.n	800410a <TIM_Base_SetConfig+0x52>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a17      	ldr	r2, [pc, #92]	; (8004164 <TIM_Base_SetConfig+0xac>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d108      	bne.n	800411c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4313      	orrs	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	4313      	orrs	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a07      	ldr	r2, [pc, #28]	; (8004160 <TIM_Base_SetConfig+0xa8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d103      	bne.n	8004150 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	691a      	ldr	r2, [r3, #16]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	615a      	str	r2, [r3, #20]
}
 8004156:	bf00      	nop
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	bc80      	pop	{r7}
 800415e:	4770      	bx	lr
 8004160:	40012c00 	.word	0x40012c00
 8004164:	40000400 	.word	0x40000400

08004168 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	f023 0201 	bic.w	r2, r3, #1
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004192:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f023 030a 	bic.w	r3, r3, #10
 80041a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	621a      	str	r2, [r3, #32]
}
 80041ba:	bf00      	nop
 80041bc:	371c      	adds	r7, #28
 80041be:	46bd      	mov	sp, r7
 80041c0:	bc80      	pop	{r7}
 80041c2:	4770      	bx	lr

080041c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	f023 0210 	bic.w	r2, r3, #16
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	031b      	lsls	r3, r3, #12
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004200:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	011b      	lsls	r3, r3, #4
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	4313      	orrs	r3, r2
 800420a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	621a      	str	r2, [r3, #32]
}
 8004218:	bf00      	nop
 800421a:	371c      	adds	r7, #28
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr

08004222 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004222:	b480      	push	{r7}
 8004224:	b085      	sub	sp, #20
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004238:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4313      	orrs	r3, r2
 8004240:	f043 0307 	orr.w	r3, r3, #7
 8004244:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	609a      	str	r2, [r3, #8]
}
 800424c:	bf00      	nop
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	bc80      	pop	{r7}
 8004254:	4770      	bx	lr

08004256 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004256:	b480      	push	{r7}
 8004258:	b087      	sub	sp, #28
 800425a:	af00      	add	r7, sp, #0
 800425c:	60f8      	str	r0, [r7, #12]
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	607a      	str	r2, [r7, #4]
 8004262:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004270:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	021a      	lsls	r2, r3, #8
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	431a      	orrs	r2, r3
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	4313      	orrs	r3, r2
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	4313      	orrs	r3, r2
 8004282:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	609a      	str	r2, [r3, #8]
}
 800428a:	bf00      	nop
 800428c:	371c      	adds	r7, #28
 800428e:	46bd      	mov	sp, r7
 8004290:	bc80      	pop	{r7}
 8004292:	4770      	bx	lr

08004294 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042a8:	2302      	movs	r3, #2
 80042aa:	e041      	b.n	8004330 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	4313      	orrs	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a14      	ldr	r2, [pc, #80]	; (800433c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d009      	beq.n	8004304 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f8:	d004      	beq.n	8004304 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a10      	ldr	r2, [pc, #64]	; (8004340 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d10c      	bne.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800430a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	4313      	orrs	r3, r2
 8004314:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	bc80      	pop	{r7}
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	40012c00 	.word	0x40012c00
 8004340:	40000400 	.word	0x40000400

08004344 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	bc80      	pop	{r7}
 8004354:	4770      	bx	lr

08004356 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004356:	b480      	push	{r7}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr

08004368 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e03f      	b.n	80043fa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d106      	bne.n	8004394 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7fc f9b6 	bl	8000700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2224      	movs	r2, #36	; 0x24
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 fde3 	bl	8004f78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	691a      	ldr	r2, [r3, #16]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	695a      	ldr	r2, [r3, #20]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68da      	ldr	r2, [r3, #12]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2220      	movs	r2, #32
 80043f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b08a      	sub	sp, #40	; 0x28
 8004406:	af02      	add	r7, sp, #8
 8004408:	60f8      	str	r0, [r7, #12]
 800440a:	60b9      	str	r1, [r7, #8]
 800440c:	603b      	str	r3, [r7, #0]
 800440e:	4613      	mov	r3, r2
 8004410:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004412:	2300      	movs	r3, #0
 8004414:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b20      	cmp	r3, #32
 8004420:	d17c      	bne.n	800451c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d002      	beq.n	800442e <HAL_UART_Transmit+0x2c>
 8004428:	88fb      	ldrh	r3, [r7, #6]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e075      	b.n	800451e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004438:	2b01      	cmp	r3, #1
 800443a:	d101      	bne.n	8004440 <HAL_UART_Transmit+0x3e>
 800443c:	2302      	movs	r3, #2
 800443e:	e06e      	b.n	800451e <HAL_UART_Transmit+0x11c>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2221      	movs	r2, #33	; 0x21
 8004452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004456:	f7fd fa99 	bl	800198c <HAL_GetTick>
 800445a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	88fa      	ldrh	r2, [r7, #6]
 8004460:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	88fa      	ldrh	r2, [r7, #6]
 8004466:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004470:	d108      	bne.n	8004484 <HAL_UART_Transmit+0x82>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d104      	bne.n	8004484 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800447a:	2300      	movs	r3, #0
 800447c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	61bb      	str	r3, [r7, #24]
 8004482:	e003      	b.n	800448c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004488:	2300      	movs	r3, #0
 800448a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004494:	e02a      	b.n	80044ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2200      	movs	r2, #0
 800449e:	2180      	movs	r1, #128	; 0x80
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 fb54 	bl	8004b4e <UART_WaitOnFlagUntilTimeout>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e036      	b.n	800451e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10b      	bne.n	80044ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	881b      	ldrh	r3, [r3, #0]
 80044ba:	461a      	mov	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	3302      	adds	r3, #2
 80044ca:	61bb      	str	r3, [r7, #24]
 80044cc:	e007      	b.n	80044de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	781a      	ldrb	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	3301      	adds	r3, #1
 80044dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	3b01      	subs	r3, #1
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1cf      	bne.n	8004496 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	2200      	movs	r2, #0
 80044fe:	2140      	movs	r1, #64	; 0x40
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 fb24 	bl	8004b4e <UART_WaitOnFlagUntilTimeout>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e006      	b.n	800451e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2220      	movs	r2, #32
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004518:	2300      	movs	r3, #0
 800451a:	e000      	b.n	800451e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800451c:	2302      	movs	r3, #2
  }
}
 800451e:	4618      	mov	r0, r3
 8004520:	3720      	adds	r7, #32
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b084      	sub	sp, #16
 800452a:	af00      	add	r7, sp, #0
 800452c:	60f8      	str	r0, [r7, #12]
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	4613      	mov	r3, r2
 8004532:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b20      	cmp	r3, #32
 800453e:	d11d      	bne.n	800457c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d002      	beq.n	800454c <HAL_UART_Receive_DMA+0x26>
 8004546:	88fb      	ldrh	r3, [r7, #6]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e016      	b.n	800457e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004556:	2b01      	cmp	r3, #1
 8004558:	d101      	bne.n	800455e <HAL_UART_Receive_DMA+0x38>
 800455a:	2302      	movs	r3, #2
 800455c:	e00f      	b.n	800457e <HAL_UART_Receive_DMA+0x58>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800456c:	88fb      	ldrh	r3, [r7, #6]
 800456e:	461a      	mov	r2, r3
 8004570:	68b9      	ldr	r1, [r7, #8]
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 fb36 	bl	8004be4 <UART_Start_Receive_DMA>
 8004578:	4603      	mov	r3, r0
 800457a:	e000      	b.n	800457e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800457c:	2302      	movs	r3, #2
  }
}
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b084      	sub	sp, #16
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800458e:	2300      	movs	r3, #0
 8004590:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459c:	2b00      	cmp	r3, #0
 800459e:	bf14      	ite	ne
 80045a0:	2301      	movne	r3, #1
 80045a2:	2300      	moveq	r3, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b21      	cmp	r3, #33	; 0x21
 80045b2:	d116      	bne.n	80045e2 <HAL_UART_DMAStop+0x5c>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d013      	beq.n	80045e2 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	695a      	ldr	r2, [r3, #20]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045c8:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d004      	beq.n	80045dc <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fe fa3b 	bl	8002a52 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fb65 	bl	8004cac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	bf14      	ite	ne
 80045f0:	2301      	movne	r3, #1
 80045f2:	2300      	moveq	r3, #0
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b22      	cmp	r3, #34	; 0x22
 8004602:	d116      	bne.n	8004632 <HAL_UART_DMAStop+0xac>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d013      	beq.n	8004632 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	695a      	ldr	r2, [r3, #20]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004618:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461e:	2b00      	cmp	r3, #0
 8004620:	d004      	beq.n	800462c <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004626:	4618      	mov	r0, r3
 8004628:	f7fe fa13 	bl	8002a52 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 fb52 	bl	8004cd6 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b08a      	sub	sp, #40	; 0x28
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800465c:	2300      	movs	r3, #0
 800465e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004660:	2300      	movs	r3, #0
 8004662:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10d      	bne.n	800468e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	f003 0320 	and.w	r3, r3, #32
 8004678:	2b00      	cmp	r3, #0
 800467a:	d008      	beq.n	800468e <HAL_UART_IRQHandler+0x52>
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	f003 0320 	and.w	r3, r3, #32
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 fbcc 	bl	8004e24 <UART_Receive_IT>
      return;
 800468c:	e17b      	b.n	8004986 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 80b1 	beq.w	80047f8 <HAL_UART_IRQHandler+0x1bc>
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b00      	cmp	r3, #0
 800469e:	d105      	bne.n	80046ac <HAL_UART_IRQHandler+0x70>
 80046a0:	6a3b      	ldr	r3, [r7, #32]
 80046a2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 80a6 	beq.w	80047f8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00a      	beq.n	80046cc <HAL_UART_IRQHandler+0x90>
 80046b6:	6a3b      	ldr	r3, [r7, #32]
 80046b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d005      	beq.n	80046cc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c4:	f043 0201 	orr.w	r2, r3, #1
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	f003 0304 	and.w	r3, r3, #4
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00a      	beq.n	80046ec <HAL_UART_IRQHandler+0xb0>
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d005      	beq.n	80046ec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e4:	f043 0202 	orr.w	r2, r3, #2
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00a      	beq.n	800470c <HAL_UART_IRQHandler+0xd0>
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d005      	beq.n	800470c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004704:	f043 0204 	orr.w	r2, r3, #4
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	f003 0308 	and.w	r3, r3, #8
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00f      	beq.n	8004736 <HAL_UART_IRQHandler+0xfa>
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	f003 0320 	and.w	r3, r3, #32
 800471c:	2b00      	cmp	r3, #0
 800471e:	d104      	bne.n	800472a <HAL_UART_IRQHandler+0xee>
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	d005      	beq.n	8004736 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	f043 0208 	orr.w	r2, r3, #8
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 811e 	beq.w	800497c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	f003 0320 	and.w	r3, r3, #32
 8004746:	2b00      	cmp	r3, #0
 8004748:	d007      	beq.n	800475a <HAL_UART_IRQHandler+0x11e>
 800474a:	6a3b      	ldr	r3, [r7, #32]
 800474c:	f003 0320 	and.w	r3, r3, #32
 8004750:	2b00      	cmp	r3, #0
 8004752:	d002      	beq.n	800475a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 fb65 	bl	8004e24 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004764:	2b00      	cmp	r3, #0
 8004766:	bf14      	ite	ne
 8004768:	2301      	movne	r3, #1
 800476a:	2300      	moveq	r3, #0
 800476c:	b2db      	uxtb	r3, r3
 800476e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004774:	f003 0308 	and.w	r3, r3, #8
 8004778:	2b00      	cmp	r3, #0
 800477a:	d102      	bne.n	8004782 <HAL_UART_IRQHandler+0x146>
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d031      	beq.n	80047e6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 faa7 	bl	8004cd6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004792:	2b00      	cmp	r3, #0
 8004794:	d023      	beq.n	80047de <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	695a      	ldr	r2, [r3, #20]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047a4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d013      	beq.n	80047d6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b2:	4a76      	ldr	r2, [pc, #472]	; (800498c <HAL_UART_IRQHandler+0x350>)
 80047b4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fe f984 	bl	8002ac8 <HAL_DMA_Abort_IT>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d016      	beq.n	80047f4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047d0:	4610      	mov	r0, r2
 80047d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d4:	e00e      	b.n	80047f4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f8f5 	bl	80049c6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047dc:	e00a      	b.n	80047f4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f8f1 	bl	80049c6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e4:	e006      	b.n	80047f4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f8ed 	bl	80049c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80047f2:	e0c3      	b.n	800497c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f4:	bf00      	nop
    return;
 80047f6:	e0c1      	b.n	800497c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	f040 80a1 	bne.w	8004944 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	f003 0310 	and.w	r3, r3, #16
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 809b 	beq.w	8004944 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	f003 0310 	and.w	r3, r3, #16
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 8095 	beq.w	8004944 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800481a:	2300      	movs	r3, #0
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	60fb      	str	r3, [r7, #12]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	60fb      	str	r3, [r7, #12]
 800482e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483a:	2b00      	cmp	r3, #0
 800483c:	d04e      	beq.n	80048dc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004848:	8a3b      	ldrh	r3, [r7, #16]
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 8098 	beq.w	8004980 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004854:	8a3a      	ldrh	r2, [r7, #16]
 8004856:	429a      	cmp	r2, r3
 8004858:	f080 8092 	bcs.w	8004980 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	8a3a      	ldrh	r2, [r7, #16]
 8004860:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	2b20      	cmp	r3, #32
 800486a:	d02b      	beq.n	80048c4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800487a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695a      	ldr	r2, [r3, #20]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0201 	bic.w	r2, r2, #1
 800488a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	695a      	ldr	r2, [r3, #20]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800489a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2220      	movs	r2, #32
 80048a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0210 	bic.w	r2, r2, #16
 80048b8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fe f8c7 	bl	8002a52 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	4619      	mov	r1, r3
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 f87f 	bl	80049d8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80048da:	e051      	b.n	8004980 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d047      	beq.n	8004984 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80048f4:	8a7b      	ldrh	r3, [r7, #18]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d044      	beq.n	8004984 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004908:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695a      	ldr	r2, [r3, #20]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0201 	bic.w	r2, r2, #1
 8004918:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2220      	movs	r2, #32
 800491e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68da      	ldr	r2, [r3, #12]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0210 	bic.w	r2, r2, #16
 8004936:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004938:	8a7b      	ldrh	r3, [r7, #18]
 800493a:	4619      	mov	r1, r3
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f84b 	bl	80049d8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004942:	e01f      	b.n	8004984 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494a:	2b00      	cmp	r3, #0
 800494c:	d008      	beq.n	8004960 <HAL_UART_IRQHandler+0x324>
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004954:	2b00      	cmp	r3, #0
 8004956:	d003      	beq.n	8004960 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f9fc 	bl	8004d56 <UART_Transmit_IT>
    return;
 800495e:	e012      	b.n	8004986 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00d      	beq.n	8004986 <HAL_UART_IRQHandler+0x34a>
 800496a:	6a3b      	ldr	r3, [r7, #32]
 800496c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004970:	2b00      	cmp	r3, #0
 8004972:	d008      	beq.n	8004986 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 fa3d 	bl	8004df4 <UART_EndTransmit_IT>
    return;
 800497a:	e004      	b.n	8004986 <HAL_UART_IRQHandler+0x34a>
    return;
 800497c:	bf00      	nop
 800497e:	e002      	b.n	8004986 <HAL_UART_IRQHandler+0x34a>
      return;
 8004980:	bf00      	nop
 8004982:	e000      	b.n	8004986 <HAL_UART_IRQHandler+0x34a>
      return;
 8004984:	bf00      	nop
  }
}
 8004986:	3728      	adds	r7, #40	; 0x28
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	08004d2f 	.word	0x08004d2f

08004990 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	bc80      	pop	{r7}
 80049a0:	4770      	bx	lr

080049a2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bc80      	pop	{r7}
 80049b2:	4770      	bx	lr

080049b4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bc80      	pop	{r7}
 80049c4:	4770      	bx	lr

080049c6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b083      	sub	sp, #12
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049ce:	bf00      	nop
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bc80      	pop	{r7}
 80049d6:	4770      	bx	lr

080049d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	460b      	mov	r3, r1
 80049e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bc80      	pop	{r7}
 80049ec:	4770      	bx	lr

080049ee <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b084      	sub	sp, #16
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0320 	and.w	r3, r3, #32
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d12a      	bne.n	8004a60 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a1e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	695a      	ldr	r2, [r3, #20]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 0201 	bic.w	r2, r2, #1
 8004a2e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695a      	ldr	r2, [r3, #20]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a3e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2220      	movs	r2, #32
 8004a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d107      	bne.n	8004a60 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68da      	ldr	r2, [r3, #12]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0210 	bic.w	r2, r2, #16
 8004a5e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d106      	bne.n	8004a76 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f7ff ffb2 	bl	80049d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a74:	e002      	b.n	8004a7c <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f7ff ff93 	bl	80049a2 <HAL_UART_RxCpltCallback>
}
 8004a7c:	bf00      	nop
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d108      	bne.n	8004aac <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a9e:	085b      	lsrs	r3, r3, #1
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f7ff ff97 	bl	80049d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004aaa:	e002      	b.n	8004ab2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f7ff ff81 	bl	80049b4 <HAL_UART_RxHalfCpltCallback>
}
 8004ab2:	bf00      	nop
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b084      	sub	sp, #16
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	bf14      	ite	ne
 8004ada:	2301      	movne	r3, #1
 8004adc:	2300      	moveq	r3, #0
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b21      	cmp	r3, #33	; 0x21
 8004aec:	d108      	bne.n	8004b00 <UART_DMAError+0x46>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d005      	beq.n	8004b00 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	2200      	movs	r2, #0
 8004af8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004afa:	68b8      	ldr	r0, [r7, #8]
 8004afc:	f000 f8d6 	bl	8004cac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	bf14      	ite	ne
 8004b0e:	2301      	movne	r3, #1
 8004b10:	2300      	moveq	r3, #0
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b22      	cmp	r3, #34	; 0x22
 8004b20:	d108      	bne.n	8004b34 <UART_DMAError+0x7a>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d005      	beq.n	8004b34 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004b2e:	68b8      	ldr	r0, [r7, #8]
 8004b30:	f000 f8d1 	bl	8004cd6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b38:	f043 0210 	orr.w	r2, r3, #16
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b40:	68b8      	ldr	r0, [r7, #8]
 8004b42:	f7ff ff40 	bl	80049c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b46:	bf00      	nop
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b084      	sub	sp, #16
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	60f8      	str	r0, [r7, #12]
 8004b56:	60b9      	str	r1, [r7, #8]
 8004b58:	603b      	str	r3, [r7, #0]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b5e:	e02c      	b.n	8004bba <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b66:	d028      	beq.n	8004bba <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d007      	beq.n	8004b7e <UART_WaitOnFlagUntilTimeout+0x30>
 8004b6e:	f7fc ff0d 	bl	800198c <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	69ba      	ldr	r2, [r7, #24]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d21d      	bcs.n	8004bba <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68da      	ldr	r2, [r3, #12]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b8c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695a      	ldr	r2, [r3, #20]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0201 	bic.w	r2, r2, #1
 8004b9c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e00f      	b.n	8004bda <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	bf0c      	ite	eq
 8004bca:	2301      	moveq	r3, #1
 8004bcc:	2300      	movne	r3, #0
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	79fb      	ldrb	r3, [r7, #7]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d0c3      	beq.n	8004b60 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
	...

08004be4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	88fa      	ldrh	r2, [r7, #6]
 8004bfc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2222      	movs	r2, #34	; 0x22
 8004c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c10:	4a23      	ldr	r2, [pc, #140]	; (8004ca0 <UART_Start_Receive_DMA+0xbc>)
 8004c12:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c18:	4a22      	ldr	r2, [pc, #136]	; (8004ca4 <UART_Start_Receive_DMA+0xc0>)
 8004c1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	4a21      	ldr	r2, [pc, #132]	; (8004ca8 <UART_Start_Receive_DMA+0xc4>)
 8004c22:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c28:	2200      	movs	r2, #0
 8004c2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004c2c:	f107 0308 	add.w	r3, r7, #8
 8004c30:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	3304      	adds	r3, #4
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	88fb      	ldrh	r3, [r7, #6]
 8004c44:	f7fd fea6 	bl	8002994 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004c48:	2300      	movs	r3, #0
 8004c4a:	613b      	str	r3, [r7, #16]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	613b      	str	r3, [r7, #16]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	613b      	str	r3, [r7, #16]
 8004c5c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68da      	ldr	r2, [r3, #12]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c74:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	695a      	ldr	r2, [r3, #20]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f042 0201 	orr.w	r2, r2, #1
 8004c84:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	695a      	ldr	r2, [r3, #20]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c94:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3718      	adds	r7, #24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	080049ef 	.word	0x080049ef
 8004ca4:	08004a85 	.word	0x08004a85
 8004ca8:	08004abb 	.word	0x08004abb

08004cac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68da      	ldr	r2, [r3, #12]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004cc2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bc80      	pop	{r7}
 8004cd4:	4770      	bx	lr

08004cd6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b083      	sub	sp, #12
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68da      	ldr	r2, [r3, #12]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004cec:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	695a      	ldr	r2, [r3, #20]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0201 	bic.w	r2, r2, #1
 8004cfc:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d107      	bne.n	8004d16 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68da      	ldr	r2, [r3, #12]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 0210 	bic.w	r2, r2, #16
 8004d14:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bc80      	pop	{r7}
 8004d2c:	4770      	bx	lr

08004d2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b084      	sub	sp, #16
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f7ff fe3c 	bl	80049c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d4e:	bf00      	nop
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b085      	sub	sp, #20
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b21      	cmp	r3, #33	; 0x21
 8004d68:	d13e      	bne.n	8004de8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d72:	d114      	bne.n	8004d9e <UART_Transmit_IT+0x48>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d110      	bne.n	8004d9e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	881b      	ldrh	r3, [r3, #0]
 8004d86:	461a      	mov	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d90:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	1c9a      	adds	r2, r3, #2
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	621a      	str	r2, [r3, #32]
 8004d9c:	e008      	b.n	8004db0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	1c59      	adds	r1, r3, #1
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6211      	str	r1, [r2, #32]
 8004da8:	781a      	ldrb	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	3b01      	subs	r3, #1
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10f      	bne.n	8004de4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68da      	ldr	r2, [r3, #12]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dd2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68da      	ldr	r2, [r3, #12]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004de2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004de4:	2300      	movs	r3, #0
 8004de6:	e000      	b.n	8004dea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004de8:	2302      	movs	r3, #2
  }
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bc80      	pop	{r7}
 8004df2:	4770      	bx	lr

08004df4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e0a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f7ff fdbb 	bl	8004990 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3708      	adds	r7, #8
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b22      	cmp	r3, #34	; 0x22
 8004e36:	f040 8099 	bne.w	8004f6c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e42:	d117      	bne.n	8004e74 <UART_Receive_IT+0x50>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d113      	bne.n	8004e74 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e54:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6c:	1c9a      	adds	r2, r3, #2
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	629a      	str	r2, [r3, #40]	; 0x28
 8004e72:	e026      	b.n	8004ec2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e78:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e86:	d007      	beq.n	8004e98 <UART_Receive_IT+0x74>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10a      	bne.n	8004ea6 <UART_Receive_IT+0x82>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d106      	bne.n	8004ea6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	701a      	strb	r2, [r3, #0]
 8004ea4:	e008      	b.n	8004eb8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebc:	1c5a      	adds	r2, r3, #1
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	4619      	mov	r1, r3
 8004ed0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d148      	bne.n	8004f68 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68da      	ldr	r2, [r3, #12]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 0220 	bic.w	r2, r2, #32
 8004ee4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ef4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	695a      	ldr	r2, [r3, #20]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 0201 	bic.w	r2, r2, #1
 8004f04:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d123      	bne.n	8004f5e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0210 	bic.w	r2, r2, #16
 8004f2a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0310 	and.w	r3, r3, #16
 8004f36:	2b10      	cmp	r3, #16
 8004f38:	d10a      	bne.n	8004f50 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	60fb      	str	r3, [r7, #12]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	60fb      	str	r3, [r7, #12]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f54:	4619      	mov	r1, r3
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7ff fd3e 	bl	80049d8 <HAL_UARTEx_RxEventCallback>
 8004f5c:	e002      	b.n	8004f64 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7ff fd1f 	bl	80049a2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f64:	2300      	movs	r3, #0
 8004f66:	e002      	b.n	8004f6e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	e000      	b.n	8004f6e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004f6c:	2302      	movs	r3, #2
  }
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3718      	adds	r7, #24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
	...

08004f78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68da      	ldr	r2, [r3, #12]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	689a      	ldr	r2, [r3, #8]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004fb2:	f023 030c 	bic.w	r3, r3, #12
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	6812      	ldr	r2, [r2, #0]
 8004fba:	68b9      	ldr	r1, [r7, #8]
 8004fbc:	430b      	orrs	r3, r1
 8004fbe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699a      	ldr	r2, [r3, #24]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a2c      	ldr	r2, [pc, #176]	; (800508c <UART_SetConfig+0x114>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d103      	bne.n	8004fe8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004fe0:	f7fe fdb4 	bl	8003b4c <HAL_RCC_GetPCLK2Freq>
 8004fe4:	60f8      	str	r0, [r7, #12]
 8004fe6:	e002      	b.n	8004fee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004fe8:	f7fe fd9c 	bl	8003b24 <HAL_RCC_GetPCLK1Freq>
 8004fec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	009a      	lsls	r2, r3, #2
 8004ff8:	441a      	add	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	fbb2 f3f3 	udiv	r3, r2, r3
 8005004:	4a22      	ldr	r2, [pc, #136]	; (8005090 <UART_SetConfig+0x118>)
 8005006:	fba2 2303 	umull	r2, r3, r2, r3
 800500a:	095b      	lsrs	r3, r3, #5
 800500c:	0119      	lsls	r1, r3, #4
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	4613      	mov	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	009a      	lsls	r2, r3, #2
 8005018:	441a      	add	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	fbb2 f2f3 	udiv	r2, r2, r3
 8005024:	4b1a      	ldr	r3, [pc, #104]	; (8005090 <UART_SetConfig+0x118>)
 8005026:	fba3 0302 	umull	r0, r3, r3, r2
 800502a:	095b      	lsrs	r3, r3, #5
 800502c:	2064      	movs	r0, #100	; 0x64
 800502e:	fb00 f303 	mul.w	r3, r0, r3
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	011b      	lsls	r3, r3, #4
 8005036:	3332      	adds	r3, #50	; 0x32
 8005038:	4a15      	ldr	r2, [pc, #84]	; (8005090 <UART_SetConfig+0x118>)
 800503a:	fba2 2303 	umull	r2, r3, r2, r3
 800503e:	095b      	lsrs	r3, r3, #5
 8005040:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005044:	4419      	add	r1, r3
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	009a      	lsls	r2, r3, #2
 8005050:	441a      	add	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	fbb2 f2f3 	udiv	r2, r2, r3
 800505c:	4b0c      	ldr	r3, [pc, #48]	; (8005090 <UART_SetConfig+0x118>)
 800505e:	fba3 0302 	umull	r0, r3, r3, r2
 8005062:	095b      	lsrs	r3, r3, #5
 8005064:	2064      	movs	r0, #100	; 0x64
 8005066:	fb00 f303 	mul.w	r3, r0, r3
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	3332      	adds	r3, #50	; 0x32
 8005070:	4a07      	ldr	r2, [pc, #28]	; (8005090 <UART_SetConfig+0x118>)
 8005072:	fba2 2303 	umull	r2, r3, r2, r3
 8005076:	095b      	lsrs	r3, r3, #5
 8005078:	f003 020f 	and.w	r2, r3, #15
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	440a      	add	r2, r1
 8005082:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005084:	bf00      	nop
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	40013800 	.word	0x40013800
 8005090:	51eb851f 	.word	0x51eb851f

08005094 <__libc_init_array>:
 8005094:	b570      	push	{r4, r5, r6, lr}
 8005096:	2600      	movs	r6, #0
 8005098:	4d0c      	ldr	r5, [pc, #48]	; (80050cc <__libc_init_array+0x38>)
 800509a:	4c0d      	ldr	r4, [pc, #52]	; (80050d0 <__libc_init_array+0x3c>)
 800509c:	1b64      	subs	r4, r4, r5
 800509e:	10a4      	asrs	r4, r4, #2
 80050a0:	42a6      	cmp	r6, r4
 80050a2:	d109      	bne.n	80050b8 <__libc_init_array+0x24>
 80050a4:	f000 f830 	bl	8005108 <_init>
 80050a8:	2600      	movs	r6, #0
 80050aa:	4d0a      	ldr	r5, [pc, #40]	; (80050d4 <__libc_init_array+0x40>)
 80050ac:	4c0a      	ldr	r4, [pc, #40]	; (80050d8 <__libc_init_array+0x44>)
 80050ae:	1b64      	subs	r4, r4, r5
 80050b0:	10a4      	asrs	r4, r4, #2
 80050b2:	42a6      	cmp	r6, r4
 80050b4:	d105      	bne.n	80050c2 <__libc_init_array+0x2e>
 80050b6:	bd70      	pop	{r4, r5, r6, pc}
 80050b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80050bc:	4798      	blx	r3
 80050be:	3601      	adds	r6, #1
 80050c0:	e7ee      	b.n	80050a0 <__libc_init_array+0xc>
 80050c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80050c6:	4798      	blx	r3
 80050c8:	3601      	adds	r6, #1
 80050ca:	e7f2      	b.n	80050b2 <__libc_init_array+0x1e>
 80050cc:	08005148 	.word	0x08005148
 80050d0:	08005148 	.word	0x08005148
 80050d4:	08005148 	.word	0x08005148
 80050d8:	0800514c 	.word	0x0800514c

080050dc <memcpy>:
 80050dc:	440a      	add	r2, r1
 80050de:	4291      	cmp	r1, r2
 80050e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80050e4:	d100      	bne.n	80050e8 <memcpy+0xc>
 80050e6:	4770      	bx	lr
 80050e8:	b510      	push	{r4, lr}
 80050ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050ee:	4291      	cmp	r1, r2
 80050f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050f4:	d1f9      	bne.n	80050ea <memcpy+0xe>
 80050f6:	bd10      	pop	{r4, pc}

080050f8 <memset>:
 80050f8:	4603      	mov	r3, r0
 80050fa:	4402      	add	r2, r0
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d100      	bne.n	8005102 <memset+0xa>
 8005100:	4770      	bx	lr
 8005102:	f803 1b01 	strb.w	r1, [r3], #1
 8005106:	e7f9      	b.n	80050fc <memset+0x4>

08005108 <_init>:
 8005108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800510a:	bf00      	nop
 800510c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800510e:	bc08      	pop	{r3}
 8005110:	469e      	mov	lr, r3
 8005112:	4770      	bx	lr

08005114 <_fini>:
 8005114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005116:	bf00      	nop
 8005118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800511a:	bc08      	pop	{r3}
 800511c:	469e      	mov	lr, r3
 800511e:	4770      	bx	lr
